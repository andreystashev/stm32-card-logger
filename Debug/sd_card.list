
sd_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ebc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000798  08007fc8  08007fc8  00017fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008760  08008760  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08008760  08008760  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008760  08008760  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008760  08008760  00018760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008764  08008764  00018764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08008768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000035b8  2000003c  080087a4  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200035f4  080087a4  000235f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d9d  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030fc  00000000  00000000  00033e02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00036f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  000382c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a60a  00000000  00000000  00039548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001766c  00000000  00000000  00053b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009153f  00000000  00000000  0006b1be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc6fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005248  00000000  00000000  000fc750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007fb0 	.word	0x08007fb0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08007fb0 	.word	0x08007fb0

0800014c <main>:

	  }
}

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f001 f9fa 	bl	8001548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f98c 	bl	8000470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 fb68 	bl	800082c <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 fb30 	bl	80007c0 <MX_DMA_Init>
  MX_SPI2_Init();
 8000160:	f000 fa2e 	bl	80005c0 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000164:	f000 fa62 	bl	800062c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000168:	f000 faac 	bl	80006c4 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 800016c:	f004 fca2 	bl	8004ab4 <MX_FATFS_Init>
  MX_RTC_Init();
 8000170:	f000 f9dc 	bl	800052c <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000174:	f000 fafa 	bl	800076c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000178:	f000 face 	bl	8000718 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800017c:	4819      	ldr	r0, [pc, #100]	; (80001e4 <main+0x98>)
 800017e:	f003 fb45 	bl	800380c <HAL_TIM_Base_Start_IT>

  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000182:	2026      	movs	r0, #38	; 0x26
 8000184:	f001 fb35 	bl	80017f2 <HAL_NVIC_EnableIRQ>
  //sd_ini()
//  HAL_UART_Transmit(&huart3 , statusMessage, 8,10 );//отправляем статус ок
//  HAL_UART_Transmit(&huart2 , statusMessage, 8,10 );//отправляем статус ок
//  HAL_UART_Transmit(&huart1 , statusMessage, 8,10 );//отправляем статус ок

  disk_initialize(SDFatFs.drv);
 8000188:	4b17      	ldr	r3, [pc, #92]	; (80001e8 <main+0x9c>)
 800018a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800018e:	785b      	ldrb	r3, [r3, #1]
 8000190:	4618      	mov	r0, r3
 8000192:	f004 fdbb 	bl	8004d0c <disk_initialize>
//  ReadDir();
//  send_file_over_uart2("mywrite.txt");
//  fileTransfer();
//  CreateNewFile("123456.txt", 46);

  if(f_mount(&SDFatFs,(TCHAR const*)USERPath,0)!=FR_OK)
 8000196:	2200      	movs	r2, #0
 8000198:	4914      	ldr	r1, [pc, #80]	; (80001ec <main+0xa0>)
 800019a:	4813      	ldr	r0, [pc, #76]	; (80001e8 <main+0x9c>)
 800019c:	f007 f9be 	bl	800751c <f_mount>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d002      	beq.n	80001ac <main+0x60>
  {
    Error_Handler();
 80001a6:	f000 fc91 	bl	8000acc <Error_Handler>
 80001aa:	e00d      	b.n	80001c8 <main+0x7c>
  }
  else
  {
    if(f_open(&MyFile,"mywrite.txt",FA_READ)!=FR_OK)
 80001ac:	2201      	movs	r2, #1
 80001ae:	4910      	ldr	r1, [pc, #64]	; (80001f0 <main+0xa4>)
 80001b0:	4810      	ldr	r0, [pc, #64]	; (80001f4 <main+0xa8>)
 80001b2:	f007 f9fd 	bl	80075b0 <f_open>
 80001b6:	4603      	mov	r3, r0
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d002      	beq.n	80001c2 <main+0x76>
    {
      Error_Handler();
 80001bc:	f000 fc86 	bl	8000acc <Error_Handler>
 80001c0:	e002      	b.n	80001c8 <main+0x7c>
    }
    else
    {
//      ReadLongFile();//read file in start
      f_close(&MyFile);
 80001c2:	480c      	ldr	r0, [pc, #48]	; (80001f4 <main+0xa8>)
 80001c4:	f007 fdda 	bl	8007d7c <f_close>
    }
  }


  headerSwitcher = 1;
 80001c8:	4b0b      	ldr	r3, [pc, #44]	; (80001f8 <main+0xac>)
 80001ca:	2201      	movs	r2, #1
 80001cc:	601a      	str	r2, [r3, #0]
  lighterSwitcher = 1;
 80001ce:	4b0b      	ldr	r3, [pc, #44]	; (80001fc <main+0xb0>)
 80001d0:	2201      	movs	r2, #1
 80001d2:	601a      	str	r2, [r3, #0]
//  HAL_UART_Receive_IT (&huart2, fullMessageBuffer, 42);//приходят данные сюда записываются в массив стр на размер буфера

  HAL_UART_Receive_IT (&huart2, pfullMessageBuffer, 6);//приходят данные сюда записываются в массив стр на размер буфера
 80001d4:	4b0a      	ldr	r3, [pc, #40]	; (8000200 <main+0xb4>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	2206      	movs	r2, #6
 80001da:	4619      	mov	r1, r3
 80001dc:	4809      	ldr	r0, [pc, #36]	; (8000204 <main+0xb8>)
 80001de:	f003 ff9e 	bl	800411e <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e2:	e7fe      	b.n	80001e2 <main+0x96>
 80001e4:	200000c4 	.word	0x200000c4
 80001e8:	200002ec 	.word	0x200002ec
 80001ec:	200033c4 	.word	0x200033c4
 80001f0:	08007fdc 	.word	0x08007fdc
 80001f4:	2000131c 	.word	0x2000131c
 80001f8:	20000004 	.word	0x20000004
 80001fc:	20000008 	.word	0x20000008
 8000200:	20000000 	.word	0x20000000
 8000204:	20000150 	.word	0x20000150

08000208 <HAL_UART_RxCpltCallback>:
  /* USER CODE END 3 */
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b088      	sub	sp, #32
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
//		  	  HAL_UART_Transmit(&huart2 , massiveP, 42,10);
//		  	  HAL_UART_Receive_IT (&huart2, fullMessageBuffer, 42);//приходят данные сюда записываются в массив стр на размер буфера
//
//	  }

  if(huart == &huart2)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a8d      	ldr	r2, [pc, #564]	; (8000448 <HAL_UART_RxCpltCallback+0x240>)
 8000214:	4293      	cmp	r3, r2
 8000216:	f040 8112 	bne.w	800043e <HAL_UART_RxCpltCallback+0x236>
  {
//	  HAL_UART_Transmit_DMA(&huart2 , fullMessageBuffer, 42);
//	  HAL_UART_Transmit(&huart2 , fullMessageBuffer, 42,1);

	  if(headerSwitcher != 0)
 800021a:	4b8c      	ldr	r3, [pc, #560]	; (800044c <HAL_UART_RxCpltCallback+0x244>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d01e      	beq.n	8000260 <HAL_UART_RxCpltCallback+0x58>
	  {
		  headerSwitcher = 0;
 8000222:	4b8a      	ldr	r3, [pc, #552]	; (800044c <HAL_UART_RxCpltCallback+0x244>)
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
		  fullMessageLength = (pfullMessageBuffer[5]<< 8) | pfullMessageBuffer[4];
 8000228:	4b89      	ldr	r3, [pc, #548]	; (8000450 <HAL_UART_RxCpltCallback+0x248>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	3305      	adds	r3, #5
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	021b      	lsls	r3, r3, #8
 8000232:	b21a      	sxth	r2, r3
 8000234:	4b86      	ldr	r3, [pc, #536]	; (8000450 <HAL_UART_RxCpltCallback+0x248>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	3304      	adds	r3, #4
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	b21b      	sxth	r3, r3
 800023e:	4313      	orrs	r3, r2
 8000240:	b21b      	sxth	r3, r3
 8000242:	b29a      	uxth	r2, r3
 8000244:	4b83      	ldr	r3, [pc, #524]	; (8000454 <HAL_UART_RxCpltCallback+0x24c>)
 8000246:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart2, pfullMessageBuffer+6, fullMessageLength+2);
 8000248:	4b81      	ldr	r3, [pc, #516]	; (8000450 <HAL_UART_RxCpltCallback+0x248>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	1d99      	adds	r1, r3, #6
 800024e:	4b81      	ldr	r3, [pc, #516]	; (8000454 <HAL_UART_RxCpltCallback+0x24c>)
 8000250:	881b      	ldrh	r3, [r3, #0]
 8000252:	3302      	adds	r3, #2
 8000254:	b29b      	uxth	r3, r3
 8000256:	461a      	mov	r2, r3
 8000258:	487b      	ldr	r0, [pc, #492]	; (8000448 <HAL_UART_RxCpltCallback+0x240>)
 800025a:	f003 ff60 	bl	800411e <HAL_UART_Receive_IT>
		  }
		  fullMessageLength = 0;
		  HAL_UART_Receive_IT(&huart2, fullMessageBuffer, 6);
	  }
  }
}
 800025e:	e0ee      	b.n	800043e <HAL_UART_RxCpltCallback+0x236>
		  headerSwitcher = 1;
 8000260:	4b7a      	ldr	r3, [pc, #488]	; (800044c <HAL_UART_RxCpltCallback+0x244>)
 8000262:	2201      	movs	r2, #1
 8000264:	601a      	str	r2, [r3, #0]
		  addressMessage = (pfullMessageBuffer[2]<< 8) | pfullMessageBuffer[1];
 8000266:	4b7a      	ldr	r3, [pc, #488]	; (8000450 <HAL_UART_RxCpltCallback+0x248>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	3302      	adds	r3, #2
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	021b      	lsls	r3, r3, #8
 8000270:	b21a      	sxth	r2, r3
 8000272:	4b77      	ldr	r3, [pc, #476]	; (8000450 <HAL_UART_RxCpltCallback+0x248>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	3301      	adds	r3, #1
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	b21b      	sxth	r3, r3
 800027c:	4313      	orrs	r3, r2
 800027e:	b21b      	sxth	r3, r3
 8000280:	b29a      	uxth	r2, r3
 8000282:	4b75      	ldr	r3, [pc, #468]	; (8000458 <HAL_UART_RxCpltCallback+0x250>)
 8000284:	801a      	strh	r2, [r3, #0]
		  bool prBit = addressMessage & 0x20;
 8000286:	4b74      	ldr	r3, [pc, #464]	; (8000458 <HAL_UART_RxCpltCallback+0x250>)
 8000288:	881b      	ldrh	r3, [r3, #0]
 800028a:	f003 0320 	and.w	r3, r3, #32
 800028e:	2b00      	cmp	r3, #0
 8000290:	bf14      	ite	ne
 8000292:	2301      	movne	r3, #1
 8000294:	2300      	moveq	r3, #0
 8000296:	72fb      	strb	r3, [r7, #11]
		  if(prBit)
 8000298:	7afb      	ldrb	r3, [r7, #11]
 800029a:	2b00      	cmp	r3, #0
 800029c:	f000 80c7 	beq.w	800042e <HAL_UART_RxCpltCallback+0x226>
			  bool statusByte = pfullMessageBuffer[3]==0x06;
 80002a0:	4b6b      	ldr	r3, [pc, #428]	; (8000450 <HAL_UART_RxCpltCallback+0x248>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	3303      	adds	r3, #3
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	2b06      	cmp	r3, #6
 80002aa:	bf0c      	ite	eq
 80002ac:	2301      	moveq	r3, #1
 80002ae:	2300      	movne	r3, #0
 80002b0:	72bb      	strb	r3, [r7, #10]
			  bool retranslateByte = pfullMessageBuffer[3]==0x03;
 80002b2:	4b67      	ldr	r3, [pc, #412]	; (8000450 <HAL_UART_RxCpltCallback+0x248>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	3303      	adds	r3, #3
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	2b03      	cmp	r3, #3
 80002bc:	bf0c      	ite	eq
 80002be:	2301      	moveq	r3, #1
 80002c0:	2300      	movne	r3, #0
 80002c2:	727b      	strb	r3, [r7, #9]
			  bool transmittedByte = pfullMessageBuffer[3]==0x05;
 80002c4:	4b62      	ldr	r3, [pc, #392]	; (8000450 <HAL_UART_RxCpltCallback+0x248>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	3303      	adds	r3, #3
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	2b05      	cmp	r3, #5
 80002ce:	bf0c      	ite	eq
 80002d0:	2301      	moveq	r3, #1
 80002d2:	2300      	movne	r3, #0
 80002d4:	723b      	strb	r3, [r7, #8]
			  if(statusByte)
 80002d6:	7abb      	ldrb	r3, [r7, #10]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d03b      	beq.n	8000354 <HAL_UART_RxCpltCallback+0x14c>
				  HAL_UART_Transmit(&huart2 , statusMessage, 8,10);//отправляем статус ок
 80002dc:	230a      	movs	r3, #10
 80002de:	2208      	movs	r2, #8
 80002e0:	495e      	ldr	r1, [pc, #376]	; (800045c <HAL_UART_RxCpltCallback+0x254>)
 80002e2:	4859      	ldr	r0, [pc, #356]	; (8000448 <HAL_UART_RxCpltCallback+0x240>)
 80002e4:	f003 fe89 	bl	8003ffa <HAL_UART_Transmit>
				  for(int z=0;z<fullMessageLength+2+6;++z)
 80002e8:	2300      	movs	r3, #0
 80002ea:	61fb      	str	r3, [r7, #28]
 80002ec:	e00d      	b.n	800030a <HAL_UART_RxCpltCallback+0x102>
					  rewriteMessagesBuffer[z+rewriteMessagesCounter]=fullMessageBuffer[z];
 80002ee:	4b5c      	ldr	r3, [pc, #368]	; (8000460 <HAL_UART_RxCpltCallback+0x258>)
 80002f0:	881b      	ldrh	r3, [r3, #0]
 80002f2:	461a      	mov	r2, r3
 80002f4:	69fb      	ldr	r3, [r7, #28]
 80002f6:	4413      	add	r3, r2
 80002f8:	495a      	ldr	r1, [pc, #360]	; (8000464 <HAL_UART_RxCpltCallback+0x25c>)
 80002fa:	69fa      	ldr	r2, [r7, #28]
 80002fc:	440a      	add	r2, r1
 80002fe:	7811      	ldrb	r1, [r2, #0]
 8000300:	4a59      	ldr	r2, [pc, #356]	; (8000468 <HAL_UART_RxCpltCallback+0x260>)
 8000302:	54d1      	strb	r1, [r2, r3]
				  for(int z=0;z<fullMessageLength+2+6;++z)
 8000304:	69fb      	ldr	r3, [r7, #28]
 8000306:	3301      	adds	r3, #1
 8000308:	61fb      	str	r3, [r7, #28]
 800030a:	4b52      	ldr	r3, [pc, #328]	; (8000454 <HAL_UART_RxCpltCallback+0x24c>)
 800030c:	881b      	ldrh	r3, [r3, #0]
 800030e:	3307      	adds	r3, #7
 8000310:	69fa      	ldr	r2, [r7, #28]
 8000312:	429a      	cmp	r2, r3
 8000314:	ddeb      	ble.n	80002ee <HAL_UART_RxCpltCallback+0xe6>
				  for(int z=0;z<8;++z)
 8000316:	2300      	movs	r3, #0
 8000318:	61bb      	str	r3, [r7, #24]
 800031a:	e00d      	b.n	8000338 <HAL_UART_RxCpltCallback+0x130>
					  rewriteMessagesBuffer[z+rewriteMessagesCounter]=statusMessage[z];
 800031c:	4b50      	ldr	r3, [pc, #320]	; (8000460 <HAL_UART_RxCpltCallback+0x258>)
 800031e:	881b      	ldrh	r3, [r3, #0]
 8000320:	461a      	mov	r2, r3
 8000322:	69bb      	ldr	r3, [r7, #24]
 8000324:	4413      	add	r3, r2
 8000326:	494d      	ldr	r1, [pc, #308]	; (800045c <HAL_UART_RxCpltCallback+0x254>)
 8000328:	69ba      	ldr	r2, [r7, #24]
 800032a:	440a      	add	r2, r1
 800032c:	7811      	ldrb	r1, [r2, #0]
 800032e:	4a4e      	ldr	r2, [pc, #312]	; (8000468 <HAL_UART_RxCpltCallback+0x260>)
 8000330:	54d1      	strb	r1, [r2, r3]
				  for(int z=0;z<8;++z)
 8000332:	69bb      	ldr	r3, [r7, #24]
 8000334:	3301      	adds	r3, #1
 8000336:	61bb      	str	r3, [r7, #24]
 8000338:	69bb      	ldr	r3, [r7, #24]
 800033a:	2b07      	cmp	r3, #7
 800033c:	ddee      	ble.n	800031c <HAL_UART_RxCpltCallback+0x114>
				  rewriteMessagesCounter+=fullMessageLength+2+6+8;
 800033e:	4b45      	ldr	r3, [pc, #276]	; (8000454 <HAL_UART_RxCpltCallback+0x24c>)
 8000340:	881a      	ldrh	r2, [r3, #0]
 8000342:	4b47      	ldr	r3, [pc, #284]	; (8000460 <HAL_UART_RxCpltCallback+0x258>)
 8000344:	881b      	ldrh	r3, [r3, #0]
 8000346:	4413      	add	r3, r2
 8000348:	b29b      	uxth	r3, r3
 800034a:	3310      	adds	r3, #16
 800034c:	b29a      	uxth	r2, r3
 800034e:	4b44      	ldr	r3, [pc, #272]	; (8000460 <HAL_UART_RxCpltCallback+0x258>)
 8000350:	801a      	strh	r2, [r3, #0]
 8000352:	e06c      	b.n	800042e <HAL_UART_RxCpltCallback+0x226>
			  else if(retranslateByte)
 8000354:	7a7b      	ldrb	r3, [r7, #9]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d02b      	beq.n	80003b2 <HAL_UART_RxCpltCallback+0x1aa>
				  HAL_UART_Transmit(&huart2 , pfullMessageBuffer, fullMessageLength+2+6,10);
 800035a:	4b3d      	ldr	r3, [pc, #244]	; (8000450 <HAL_UART_RxCpltCallback+0x248>)
 800035c:	6819      	ldr	r1, [r3, #0]
 800035e:	4b3d      	ldr	r3, [pc, #244]	; (8000454 <HAL_UART_RxCpltCallback+0x24c>)
 8000360:	881b      	ldrh	r3, [r3, #0]
 8000362:	3308      	adds	r3, #8
 8000364:	b29a      	uxth	r2, r3
 8000366:	230a      	movs	r3, #10
 8000368:	4837      	ldr	r0, [pc, #220]	; (8000448 <HAL_UART_RxCpltCallback+0x240>)
 800036a:	f003 fe46 	bl	8003ffa <HAL_UART_Transmit>
				  for(int z=0;z<fullMessageLength+2+6;++z)
 800036e:	2300      	movs	r3, #0
 8000370:	617b      	str	r3, [r7, #20]
 8000372:	e00d      	b.n	8000390 <HAL_UART_RxCpltCallback+0x188>
					  rewriteMessagesBuffer[z+rewriteMessagesCounter]=fullMessageBuffer[z];
 8000374:	4b3a      	ldr	r3, [pc, #232]	; (8000460 <HAL_UART_RxCpltCallback+0x258>)
 8000376:	881b      	ldrh	r3, [r3, #0]
 8000378:	461a      	mov	r2, r3
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	4413      	add	r3, r2
 800037e:	4939      	ldr	r1, [pc, #228]	; (8000464 <HAL_UART_RxCpltCallback+0x25c>)
 8000380:	697a      	ldr	r2, [r7, #20]
 8000382:	440a      	add	r2, r1
 8000384:	7811      	ldrb	r1, [r2, #0]
 8000386:	4a38      	ldr	r2, [pc, #224]	; (8000468 <HAL_UART_RxCpltCallback+0x260>)
 8000388:	54d1      	strb	r1, [r2, r3]
				  for(int z=0;z<fullMessageLength+2+6;++z)
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	3301      	adds	r3, #1
 800038e:	617b      	str	r3, [r7, #20]
 8000390:	4b30      	ldr	r3, [pc, #192]	; (8000454 <HAL_UART_RxCpltCallback+0x24c>)
 8000392:	881b      	ldrh	r3, [r3, #0]
 8000394:	3307      	adds	r3, #7
 8000396:	697a      	ldr	r2, [r7, #20]
 8000398:	429a      	cmp	r2, r3
 800039a:	ddeb      	ble.n	8000374 <HAL_UART_RxCpltCallback+0x16c>
				  rewriteMessagesCounter+=fullMessageLength+2+6;
 800039c:	4b2d      	ldr	r3, [pc, #180]	; (8000454 <HAL_UART_RxCpltCallback+0x24c>)
 800039e:	881a      	ldrh	r2, [r3, #0]
 80003a0:	4b2f      	ldr	r3, [pc, #188]	; (8000460 <HAL_UART_RxCpltCallback+0x258>)
 80003a2:	881b      	ldrh	r3, [r3, #0]
 80003a4:	4413      	add	r3, r2
 80003a6:	b29b      	uxth	r3, r3
 80003a8:	3308      	adds	r3, #8
 80003aa:	b29a      	uxth	r2, r3
 80003ac:	4b2c      	ldr	r3, [pc, #176]	; (8000460 <HAL_UART_RxCpltCallback+0x258>)
 80003ae:	801a      	strh	r2, [r3, #0]
 80003b0:	e03d      	b.n	800042e <HAL_UART_RxCpltCallback+0x226>
			  else if(transmittedByte)
 80003b2:	7a3b      	ldrb	r3, [r7, #8]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d03a      	beq.n	800042e <HAL_UART_RxCpltCallback+0x226>
				  HAL_UART_Transmit(&huart2 , nothingToSendMessage, 8,1);//отправляем статус ок
 80003b8:	2301      	movs	r3, #1
 80003ba:	2208      	movs	r2, #8
 80003bc:	492b      	ldr	r1, [pc, #172]	; (800046c <HAL_UART_RxCpltCallback+0x264>)
 80003be:	4822      	ldr	r0, [pc, #136]	; (8000448 <HAL_UART_RxCpltCallback+0x240>)
 80003c0:	f003 fe1b 	bl	8003ffa <HAL_UART_Transmit>
				  for(int z=0;z<fullMessageLength+2+6;++z)
 80003c4:	2300      	movs	r3, #0
 80003c6:	613b      	str	r3, [r7, #16]
 80003c8:	e00d      	b.n	80003e6 <HAL_UART_RxCpltCallback+0x1de>
					  rewriteMessagesBuffer[z+rewriteMessagesCounter]=fullMessageBuffer[z];
 80003ca:	4b25      	ldr	r3, [pc, #148]	; (8000460 <HAL_UART_RxCpltCallback+0x258>)
 80003cc:	881b      	ldrh	r3, [r3, #0]
 80003ce:	461a      	mov	r2, r3
 80003d0:	693b      	ldr	r3, [r7, #16]
 80003d2:	4413      	add	r3, r2
 80003d4:	4923      	ldr	r1, [pc, #140]	; (8000464 <HAL_UART_RxCpltCallback+0x25c>)
 80003d6:	693a      	ldr	r2, [r7, #16]
 80003d8:	440a      	add	r2, r1
 80003da:	7811      	ldrb	r1, [r2, #0]
 80003dc:	4a22      	ldr	r2, [pc, #136]	; (8000468 <HAL_UART_RxCpltCallback+0x260>)
 80003de:	54d1      	strb	r1, [r2, r3]
				  for(int z=0;z<fullMessageLength+2+6;++z)
 80003e0:	693b      	ldr	r3, [r7, #16]
 80003e2:	3301      	adds	r3, #1
 80003e4:	613b      	str	r3, [r7, #16]
 80003e6:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <HAL_UART_RxCpltCallback+0x24c>)
 80003e8:	881b      	ldrh	r3, [r3, #0]
 80003ea:	3307      	adds	r3, #7
 80003ec:	693a      	ldr	r2, [r7, #16]
 80003ee:	429a      	cmp	r2, r3
 80003f0:	ddeb      	ble.n	80003ca <HAL_UART_RxCpltCallback+0x1c2>
				  for(int z=0;z<8;++z)
 80003f2:	2300      	movs	r3, #0
 80003f4:	60fb      	str	r3, [r7, #12]
 80003f6:	e00d      	b.n	8000414 <HAL_UART_RxCpltCallback+0x20c>
					  rewriteMessagesBuffer[z+rewriteMessagesCounter]=nothingToSendMessage[z];
 80003f8:	4b19      	ldr	r3, [pc, #100]	; (8000460 <HAL_UART_RxCpltCallback+0x258>)
 80003fa:	881b      	ldrh	r3, [r3, #0]
 80003fc:	461a      	mov	r2, r3
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	4413      	add	r3, r2
 8000402:	491a      	ldr	r1, [pc, #104]	; (800046c <HAL_UART_RxCpltCallback+0x264>)
 8000404:	68fa      	ldr	r2, [r7, #12]
 8000406:	440a      	add	r2, r1
 8000408:	7811      	ldrb	r1, [r2, #0]
 800040a:	4a17      	ldr	r2, [pc, #92]	; (8000468 <HAL_UART_RxCpltCallback+0x260>)
 800040c:	54d1      	strb	r1, [r2, r3]
				  for(int z=0;z<8;++z)
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	3301      	adds	r3, #1
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	2b07      	cmp	r3, #7
 8000418:	ddee      	ble.n	80003f8 <HAL_UART_RxCpltCallback+0x1f0>
				  rewriteMessagesCounter+=fullMessageLength+2+6+8;
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <HAL_UART_RxCpltCallback+0x24c>)
 800041c:	881a      	ldrh	r2, [r3, #0]
 800041e:	4b10      	ldr	r3, [pc, #64]	; (8000460 <HAL_UART_RxCpltCallback+0x258>)
 8000420:	881b      	ldrh	r3, [r3, #0]
 8000422:	4413      	add	r3, r2
 8000424:	b29b      	uxth	r3, r3
 8000426:	3310      	adds	r3, #16
 8000428:	b29a      	uxth	r2, r3
 800042a:	4b0d      	ldr	r3, [pc, #52]	; (8000460 <HAL_UART_RxCpltCallback+0x258>)
 800042c:	801a      	strh	r2, [r3, #0]
		  fullMessageLength = 0;
 800042e:	4b09      	ldr	r3, [pc, #36]	; (8000454 <HAL_UART_RxCpltCallback+0x24c>)
 8000430:	2200      	movs	r2, #0
 8000432:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart2, fullMessageBuffer, 6);
 8000434:	2206      	movs	r2, #6
 8000436:	490b      	ldr	r1, [pc, #44]	; (8000464 <HAL_UART_RxCpltCallback+0x25c>)
 8000438:	4803      	ldr	r0, [pc, #12]	; (8000448 <HAL_UART_RxCpltCallback+0x240>)
 800043a:	f003 fe70 	bl	800411e <HAL_UART_Receive_IT>
}
 800043e:	bf00      	nop
 8000440:	3720      	adds	r7, #32
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000150 	.word	0x20000150
 800044c:	20000004 	.word	0x20000004
 8000450:	20000000 	.word	0x20000000
 8000454:	20002668 	.word	0x20002668
 8000458:	2000266a 	.word	0x2000266a
 800045c:	2000000c 	.word	0x2000000c
 8000460:	200033b4 	.word	0x200033b4
 8000464:	20002348 	.word	0x20002348
 8000468:	2000266c 	.word	0x2000266c
 800046c:	20000014 	.word	0x20000014

08000470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b094      	sub	sp, #80	; 0x50
 8000474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800047a:	2228      	movs	r2, #40	; 0x28
 800047c:	2100      	movs	r1, #0
 800047e:	4618      	mov	r0, r3
 8000480:	f007 fd8e 	bl	8007fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000484:	f107 0314 	add.w	r3, r7, #20
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
 800048c:	605a      	str	r2, [r3, #4]
 800048e:	609a      	str	r2, [r3, #8]
 8000490:	60da      	str	r2, [r3, #12]
 8000492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80004a0:	2309      	movs	r3, #9
 80004a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004aa:	2300      	movs	r3, #0
 80004ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ae:	2301      	movs	r3, #1
 80004b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80004b2:	2301      	movs	r3, #1
 80004b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004b6:	2302      	movs	r3, #2
 80004b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004c0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004ca:	4618      	mov	r0, r3
 80004cc:	f001 fd64 	bl	8001f98 <HAL_RCC_OscConfig>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80004d6:	f000 faf9 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004da:	230f      	movs	r3, #15
 80004dc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004de:	2302      	movs	r3, #2
 80004e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e2:	2300      	movs	r3, #0
 80004e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ec:	2300      	movs	r3, #0
 80004ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004f0:	f107 0314 	add.w	r3, r7, #20
 80004f4:	2102      	movs	r1, #2
 80004f6:	4618      	mov	r0, r3
 80004f8:	f001 ffd0 	bl	800249c <HAL_RCC_ClockConfig>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000502:	f000 fae3 	bl	8000acc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000506:	2301      	movs	r3, #1
 8000508:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800050a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800050e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	4618      	mov	r0, r3
 8000514:	f002 f95a 	bl	80027cc <HAL_RCCEx_PeriphCLKConfig>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800051e:	f000 fad5 	bl	8000acc <Error_Handler>
  }
}
 8000522:	bf00      	nop
 8000524:	3750      	adds	r7, #80	; 0x50
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	2100      	movs	r1, #0
 8000536:	460a      	mov	r2, r1
 8000538:	801a      	strh	r2, [r3, #0]
 800053a:	460a      	mov	r2, r1
 800053c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800053e:	2300      	movs	r3, #0
 8000540:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000542:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <MX_RTC_Init+0x8c>)
 8000544:	4a1d      	ldr	r2, [pc, #116]	; (80005bc <MX_RTC_Init+0x90>)
 8000546:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000548:	4b1b      	ldr	r3, [pc, #108]	; (80005b8 <MX_RTC_Init+0x8c>)
 800054a:	f04f 32ff 	mov.w	r2, #4294967295
 800054e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000550:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <MX_RTC_Init+0x8c>)
 8000552:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000556:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000558:	4817      	ldr	r0, [pc, #92]	; (80005b8 <MX_RTC_Init+0x8c>)
 800055a:	f002 faad 	bl	8002ab8 <HAL_RTC_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000564:	f000 fab2 	bl	8000acc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000568:	2300      	movs	r3, #0
 800056a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800056c:	2300      	movs	r3, #0
 800056e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000570:	2300      	movs	r3, #0
 8000572:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2201      	movs	r2, #1
 8000578:	4619      	mov	r1, r3
 800057a:	480f      	ldr	r0, [pc, #60]	; (80005b8 <MX_RTC_Init+0x8c>)
 800057c:	f002 fb32 	bl	8002be4 <HAL_RTC_SetTime>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000586:	f000 faa1 	bl	8000acc <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800058a:	2301      	movs	r3, #1
 800058c:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800058e:	2301      	movs	r3, #1
 8000590:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000592:	2301      	movs	r3, #1
 8000594:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000596:	2300      	movs	r3, #0
 8000598:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800059a:	463b      	mov	r3, r7
 800059c:	2201      	movs	r2, #1
 800059e:	4619      	mov	r1, r3
 80005a0:	4805      	ldr	r0, [pc, #20]	; (80005b8 <MX_RTC_Init+0x8c>)
 80005a2:	f002 fbb7 	bl	8002d14 <HAL_RTC_SetDate>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80005ac:	f000 fa8e 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000058 	.word	0x20000058
 80005bc:	40002800 	.word	0x40002800

080005c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <MX_SPI2_Init+0x64>)
 80005c6:	4a18      	ldr	r2, [pc, #96]	; (8000628 <MX_SPI2_Init+0x68>)
 80005c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005ca:	4b16      	ldr	r3, [pc, #88]	; (8000624 <MX_SPI2_Init+0x64>)
 80005cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005d2:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_SPI2_Init+0x64>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <MX_SPI2_Init+0x64>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_SPI2_Init+0x64>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_SPI2_Init+0x64>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_SPI2_Init+0x64>)
 80005ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_SPI2_Init+0x64>)
 80005f4:	2208      	movs	r2, #8
 80005f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <MX_SPI2_Init+0x64>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_SPI2_Init+0x64>)
 8000600:	2200      	movs	r2, #0
 8000602:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <MX_SPI2_Init+0x64>)
 8000606:	2200      	movs	r2, #0
 8000608:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_SPI2_Init+0x64>)
 800060c:	220a      	movs	r2, #10
 800060e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000610:	4804      	ldr	r0, [pc, #16]	; (8000624 <MX_SPI2_Init+0x64>)
 8000612:	f002 fddf 	bl	80031d4 <HAL_SPI_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800061c:	f000 fa56 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	2000006c 	.word	0x2000006c
 8000628:	40003800 	.word	0x40003800

0800062c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000640:	463b      	mov	r3, r7
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000648:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <MX_TIM2_Init+0x94>)
 800064a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800064e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39999;
 8000650:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <MX_TIM2_Init+0x94>)
 8000652:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000656:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_TIM2_Init+0x94>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800065e:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <MX_TIM2_Init+0x94>)
 8000660:	220a      	movs	r2, #10
 8000662:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000664:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_TIM2_Init+0x94>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <MX_TIM2_Init+0x94>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000670:	4813      	ldr	r0, [pc, #76]	; (80006c0 <MX_TIM2_Init+0x94>)
 8000672:	f003 f87b 	bl	800376c <HAL_TIM_Base_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800067c:	f000 fa26 	bl	8000acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000684:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	4619      	mov	r1, r3
 800068c:	480c      	ldr	r0, [pc, #48]	; (80006c0 <MX_TIM2_Init+0x94>)
 800068e:	f003 fa17 	bl	8003ac0 <HAL_TIM_ConfigClockSource>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000698:	f000 fa18 	bl	8000acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069c:	2300      	movs	r3, #0
 800069e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006a4:	463b      	mov	r3, r7
 80006a6:	4619      	mov	r1, r3
 80006a8:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_TIM2_Init+0x94>)
 80006aa:	f003 fbe9 	bl	8003e80 <HAL_TIMEx_MasterConfigSynchronization>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006b4:	f000 fa0a 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	200000c4 	.word	0x200000c4

080006c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_USART1_UART_Init+0x50>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006d0:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80006d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006fc:	f003 fc30 	bl	8003f60 <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000706:	f000 f9e1 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	2000010c 	.word	0x2000010c
 8000714:	40013800 	.word	0x40013800

08000718 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800071e:	4a12      	ldr	r2, [pc, #72]	; (8000768 <MX_USART2_UART_Init+0x50>)
 8000720:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000724:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8000728:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000750:	f003 fc06 	bl	8003f60 <HAL_UART_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800075a:	f000 f9b7 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000150 	.word	0x20000150
 8000768:	40004400 	.word	0x40004400

0800076c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 8000772:	4a12      	ldr	r2, [pc, #72]	; (80007bc <MX_USART3_UART_Init+0x50>)
 8000774:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 8000778:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 800077c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 8000792:	220c      	movs	r2, #12
 8000794:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 80007a4:	f003 fbdc 	bl	8003f60 <HAL_UART_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007ae:	f000 f98d 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000194 	.word	0x20000194
 80007bc:	40004800 	.word	0x40004800

080007c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_DMA_Init+0x68>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	4a17      	ldr	r2, [pc, #92]	; (8000828 <MX_DMA_Init+0x68>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6153      	str	r3, [r2, #20]
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_DMA_Init+0x68>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	200c      	movs	r0, #12
 80007e4:	f000 ffe9 	bl	80017ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007e8:	200c      	movs	r0, #12
 80007ea:	f001 f802 	bl	80017f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	200d      	movs	r0, #13
 80007f4:	f000 ffe1 	bl	80017ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80007f8:	200d      	movs	r0, #13
 80007fa:	f000 fffa 	bl	80017f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	200e      	movs	r0, #14
 8000804:	f000 ffd9 	bl	80017ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000808:	200e      	movs	r0, #14
 800080a:	f000 fff2 	bl	80017f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	200f      	movs	r0, #15
 8000814:	f000 ffd1 	bl	80017ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000818:	200f      	movs	r0, #15
 800081a:	f000 ffea 	bl	80017f2 <HAL_NVIC_EnableIRQ>

}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 0310 	add.w	r3, r7, #16
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000840:	4b37      	ldr	r3, [pc, #220]	; (8000920 <MX_GPIO_Init+0xf4>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a36      	ldr	r2, [pc, #216]	; (8000920 <MX_GPIO_Init+0xf4>)
 8000846:	f043 0310 	orr.w	r3, r3, #16
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b34      	ldr	r3, [pc, #208]	; (8000920 <MX_GPIO_Init+0xf4>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f003 0310 	and.w	r3, r3, #16
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000858:	4b31      	ldr	r3, [pc, #196]	; (8000920 <MX_GPIO_Init+0xf4>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a30      	ldr	r2, [pc, #192]	; (8000920 <MX_GPIO_Init+0xf4>)
 800085e:	f043 0320 	orr.w	r3, r3, #32
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b2e      	ldr	r3, [pc, #184]	; (8000920 <MX_GPIO_Init+0xf4>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0320 	and.w	r3, r3, #32
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <MX_GPIO_Init+0xf4>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a2a      	ldr	r2, [pc, #168]	; (8000920 <MX_GPIO_Init+0xf4>)
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b28      	ldr	r3, [pc, #160]	; (8000920 <MX_GPIO_Init+0xf4>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0304 	and.w	r3, r3, #4
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000888:	4b25      	ldr	r3, [pc, #148]	; (8000920 <MX_GPIO_Init+0xf4>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a24      	ldr	r2, [pc, #144]	; (8000920 <MX_GPIO_Init+0xf4>)
 800088e:	f043 0308 	orr.w	r3, r3, #8
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b22      	ldr	r3, [pc, #136]	; (8000920 <MX_GPIO_Init+0xf4>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f003 0308 	and.w	r3, r3, #8
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a6:	481f      	ldr	r0, [pc, #124]	; (8000924 <MX_GPIO_Init+0xf8>)
 80008a8:	f001 fb52 	bl	8001f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2110      	movs	r1, #16
 80008b0:	481d      	ldr	r0, [pc, #116]	; (8000928 <MX_GPIO_Init+0xfc>)
 80008b2:	f001 fb4d 	bl	8001f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(parachute_GPIO_Port, parachute_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2102      	movs	r1, #2
 80008ba:	481c      	ldr	r0, [pc, #112]	; (800092c <MX_GPIO_Init+0x100>)
 80008bc:	f001 fb48 	bl	8001f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	4619      	mov	r1, r3
 80008d8:	4812      	ldr	r0, [pc, #72]	; (8000924 <MX_GPIO_Init+0xf8>)
 80008da:	f001 f9b5 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008de:	2310      	movs	r3, #16
 80008e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008ea:	2301      	movs	r3, #1
 80008ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 0310 	add.w	r3, r7, #16
 80008f2:	4619      	mov	r1, r3
 80008f4:	480c      	ldr	r0, [pc, #48]	; (8000928 <MX_GPIO_Init+0xfc>)
 80008f6:	f001 f9a7 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : parachute_Pin */
  GPIO_InitStruct.Pin = parachute_Pin;
 80008fa:	2302      	movs	r3, #2
 80008fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000906:	2301      	movs	r3, #1
 8000908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(parachute_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	4619      	mov	r1, r3
 8000910:	4806      	ldr	r0, [pc, #24]	; (800092c <MX_GPIO_Init+0x100>)
 8000912:	f001 f999 	bl	8001c48 <HAL_GPIO_Init>

}
 8000916:	bf00      	nop
 8000918:	3720      	adds	r7, #32
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000
 8000924:	40011000 	.word	0x40011000
 8000928:	40010800 	.word	0x40010800
 800092c:	40010c00 	.word	0x40010c00

08000930 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//обработчик прерывания
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	if(htim==&htim2)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a07      	ldr	r2, [pc, #28]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d106      	bne.n	800094e <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		Timer1++;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	b29b      	uxth	r3, r3
 8000946:	3301      	adds	r3, #1
 8000948:	b29a      	uxth	r2, r3
 800094a:	4b04      	ldr	r3, [pc, #16]	; (800095c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800094c:	801a      	strh	r2, [r3, #0]
	}
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	200000c4 	.word	0x200000c4
 800095c:	200002e8 	.word	0x200002e8

08000960 <HAL_UART_ErrorCallback>:
}
//


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a52      	ldr	r2, [pc, #328]	; (8000ab4 <HAL_UART_ErrorCallback+0x154>)
 800096c:	4293      	cmp	r3, r2
 800096e:	f040 809a 	bne.w	8000aa6 <HAL_UART_ErrorCallback+0x146>
	{
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 8000972:	4b50      	ldr	r3, [pc, #320]	; (8000ab4 <HAL_UART_ErrorCallback+0x154>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	68da      	ldr	r2, [r3, #12]
 8000978:	4b4e      	ldr	r3, [pc, #312]	; (8000ab4 <HAL_UART_ErrorCallback+0x154>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f022 0210 	bic.w	r2, r2, #16
 8000980:	60da      	str	r2, [r3, #12]
		HAL_UART_DMAStop(&huart1);
 8000982:	484c      	ldr	r0, [pc, #304]	; (8000ab4 <HAL_UART_ErrorCallback+0x154>)
 8000984:	f003 fbfb 	bl	800417e <HAL_UART_DMAStop>
//		HAL_GPIO_TogglePin(pc13_GPIO_Port, pc13_Pin);
		uint32_t er = HAL_UART_GetError(&huart1);
 8000988:	484a      	ldr	r0, [pc, #296]	; (8000ab4 <HAL_UART_ErrorCallback+0x154>)
 800098a:	f003 fe11 	bl	80045b0 <HAL_UART_GetError>
 800098e:	61f8      	str	r0, [r7, #28]

		switch(er)
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	3b01      	subs	r3, #1
 8000994:	2b0f      	cmp	r3, #15
 8000996:	f200 8088 	bhi.w	8000aaa <HAL_UART_ErrorCallback+0x14a>
 800099a:	a201      	add	r2, pc, #4	; (adr r2, 80009a0 <HAL_UART_ErrorCallback+0x40>)
 800099c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a0:	080009e1 	.word	0x080009e1
 80009a4:	08000a0d 	.word	0x08000a0d
 80009a8:	08000aab 	.word	0x08000aab
 80009ac:	08000a39 	.word	0x08000a39
 80009b0:	08000aab 	.word	0x08000aab
 80009b4:	08000aab 	.word	0x08000aab
 80009b8:	08000aab 	.word	0x08000aab
 80009bc:	08000a65 	.word	0x08000a65
 80009c0:	08000aab 	.word	0x08000aab
 80009c4:	08000aab 	.word	0x08000aab
 80009c8:	08000aab 	.word	0x08000aab
 80009cc:	08000aab 	.word	0x08000aab
 80009d0:	08000aab 	.word	0x08000aab
 80009d4:	08000aab 	.word	0x08000aab
 80009d8:	08000aab 	.word	0x08000aab
 80009dc:	08000a91 	.word	0x08000a91
		{
			case HAL_UART_ERROR_PE:
				HAL_UART_Transmit(&huart1, (uint8_t*)"ERR_Callbck - Parity error\n", 27, 1000);
 80009e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e4:	221b      	movs	r2, #27
 80009e6:	4934      	ldr	r1, [pc, #208]	; (8000ab8 <HAL_UART_ErrorCallback+0x158>)
 80009e8:	4832      	ldr	r0, [pc, #200]	; (8000ab4 <HAL_UART_ErrorCallback+0x154>)
 80009ea:	f003 fb06 	bl	8003ffa <HAL_UART_Transmit>
				__HAL_UART_CLEAR_PEFLAG(&huart1);
 80009ee:	2300      	movs	r3, #0
 80009f0:	61bb      	str	r3, [r7, #24]
 80009f2:	4b30      	ldr	r3, [pc, #192]	; (8000ab4 <HAL_UART_ErrorCallback+0x154>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	61bb      	str	r3, [r7, #24]
 80009fa:	4b2e      	ldr	r3, [pc, #184]	; (8000ab4 <HAL_UART_ErrorCallback+0x154>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	61bb      	str	r3, [r7, #24]
 8000a02:	69bb      	ldr	r3, [r7, #24]
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000a0a:	e04f      	b.n	8000aac <HAL_UART_ErrorCallback+0x14c>

			case HAL_UART_ERROR_NE:
				HAL_UART_Transmit(&huart1, (uint8_t*)"ERR_Callbck - Noise error\n", 26, 1000);
 8000a0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a10:	221a      	movs	r2, #26
 8000a12:	492a      	ldr	r1, [pc, #168]	; (8000abc <HAL_UART_ErrorCallback+0x15c>)
 8000a14:	4827      	ldr	r0, [pc, #156]	; (8000ab4 <HAL_UART_ErrorCallback+0x154>)
 8000a16:	f003 faf0 	bl	8003ffa <HAL_UART_Transmit>
				__HAL_UART_CLEAR_NEFLAG(&huart1);
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
 8000a1e:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <HAL_UART_ErrorCallback+0x154>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <HAL_UART_ErrorCallback+0x154>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	697b      	ldr	r3, [r7, #20]
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2200      	movs	r2, #0
 8000a34:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000a36:	e039      	b.n	8000aac <HAL_UART_ErrorCallback+0x14c>

			case HAL_UART_ERROR_FE:
				HAL_UART_Transmit(&huart1, (uint8_t*)"ERR_Callbck - Frame error\n", 26, 1000);
 8000a38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3c:	221a      	movs	r2, #26
 8000a3e:	4920      	ldr	r1, [pc, #128]	; (8000ac0 <HAL_UART_ErrorCallback+0x160>)
 8000a40:	481c      	ldr	r0, [pc, #112]	; (8000ab4 <HAL_UART_ErrorCallback+0x154>)
 8000a42:	f003 fada 	bl	8003ffa <HAL_UART_Transmit>
				__HAL_UART_CLEAR_FEFLAG(&huart1);
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <HAL_UART_ErrorCallback+0x154>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <HAL_UART_ErrorCallback+0x154>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	693b      	ldr	r3, [r7, #16]
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000a62:	e023      	b.n	8000aac <HAL_UART_ErrorCallback+0x14c>

			case HAL_UART_ERROR_ORE:
				HAL_UART_Transmit(&huart1, (uint8_t*)"ERR_Callbck - Overrun error\n", 28, 1000);
 8000a64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a68:	221c      	movs	r2, #28
 8000a6a:	4916      	ldr	r1, [pc, #88]	; (8000ac4 <HAL_UART_ErrorCallback+0x164>)
 8000a6c:	4811      	ldr	r0, [pc, #68]	; (8000ab4 <HAL_UART_ErrorCallback+0x154>)
 8000a6e:	f003 fac4 	bl	8003ffa <HAL_UART_Transmit>
				__HAL_UART_CLEAR_OREFLAG(huart);
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000a8e:	e00d      	b.n	8000aac <HAL_UART_ErrorCallback+0x14c>

			case HAL_UART_ERROR_DMA:
				HAL_UART_Transmit(&huart1, (uint8_t*)"ERR_Callbck - DMA transfer error\n", 33, 1000);
 8000a90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a94:	2221      	movs	r2, #33	; 0x21
 8000a96:	490c      	ldr	r1, [pc, #48]	; (8000ac8 <HAL_UART_ErrorCallback+0x168>)
 8000a98:	4806      	ldr	r0, [pc, #24]	; (8000ab4 <HAL_UART_ErrorCallback+0x154>)
 8000a9a:	f003 faae 	bl	8003ffa <HAL_UART_Transmit>
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000aa4:	e002      	b.n	8000aac <HAL_UART_ErrorCallback+0x14c>

			default:
			break;
		}
	}
 8000aa6:	bf00      	nop
 8000aa8:	e000      	b.n	8000aac <HAL_UART_ErrorCallback+0x14c>
			break;
 8000aaa:	bf00      	nop

}
 8000aac:	bf00      	nop
 8000aae:	3720      	adds	r7, #32
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	2000010c 	.word	0x2000010c
 8000ab8:	080080f8 	.word	0x080080f8
 8000abc:	08008114 	.word	0x08008114
 8000ac0:	08008130 	.word	0x08008130
 8000ac4:	0800814c 	.word	0x0800814c
 8000ac8:	0800816c 	.word	0x0800816c

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>
	...

08000ad8 <Error>:
#define CMD58 (0x40+58) // READ_OCR


//включениe красного светодиода в случае какой-нибудь ошибки
static void Error (void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  LD_ON;
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae2:	4802      	ldr	r0, [pc, #8]	; (8000aec <Error+0x14>)
 8000ae4:	f001 fa34 	bl	8001f50 <HAL_GPIO_WritePin>
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40011000 	.word	0x40011000

08000af0 <SPIx_WriteRead>:

//запись и чтение шины SPI
uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af02      	add	r7, sp, #8
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi2,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8000afe:	f107 020f 	add.w	r2, r7, #15
 8000b02:	1df9      	adds	r1, r7, #7
 8000b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	4806      	ldr	r0, [pc, #24]	; (8000b28 <SPIx_WriteRead+0x38>)
 8000b0e:	f002 fbe5 	bl	80032dc <HAL_SPI_TransmitReceive>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SPIx_WriteRead+0x2c>
  {
    Error();
 8000b18:	f7ff ffde 	bl	8000ad8 <Error>
  }
  return receivedbyte;
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2000006c 	.word	0x2000006c

08000b2c <SPI_SendByte>:

//функции для SPI — чтение, запись и обычный прогон байта
void SPI_SendByte(uint8_t bt)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(bt);
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ffd9 	bl	8000af0 <SPIx_WriteRead>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <SPI_ReceiveByte>:

//-----------------------------------------------

uint8_t SPI_ReceiveByte(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
  uint8_t bt = SPIx_WriteRead(0xFF);
 8000b4c:	20ff      	movs	r0, #255	; 0xff
 8000b4e:	f7ff ffcf 	bl	8000af0 <SPIx_WriteRead>
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
  return bt;
 8000b56:	79fb      	ldrb	r3, [r7, #7]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <SPI_Release>:

//-----------------------------------------------

void SPI_Release(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF);
 8000b64:	20ff      	movs	r0, #255	; 0xff
 8000b66:	f7ff ffc3 	bl	8000af0 <SPIx_WriteRead>
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <SPI_wait_ready>:

uint8_t SPI_wait_ready(void)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
  uint8_t res;
  uint16_t cnt;
  cnt=0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	80fb      	strh	r3, [r7, #6]
  do { //Ждем окончания состояния BUSY
    res=SPI_ReceiveByte();
 8000b78:	f7ff ffe5 	bl	8000b46 <SPI_ReceiveByte>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	717b      	strb	r3, [r7, #5]
    cnt++;
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	3301      	adds	r3, #1
 8000b84:	80fb      	strh	r3, [r7, #6]
  } while ( (res!=0xFF)&&(cnt<0xFFFF) );
 8000b86:	797b      	ldrb	r3, [r7, #5]
 8000b88:	2bff      	cmp	r3, #255	; 0xff
 8000b8a:	d004      	beq.n	8000b96 <SPI_wait_ready+0x28>
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d1f0      	bne.n	8000b78 <SPI_wait_ready+0xa>
  if (cnt>=0xFFFF) return 1;
 8000b96:	88fb      	ldrh	r3, [r7, #6]
 8000b98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d101      	bne.n	8000ba4 <SPI_wait_ready+0x36>
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	e000      	b.n	8000ba6 <SPI_wait_ready+0x38>
  return res;
 8000ba4:	797b      	ldrb	r3, [r7, #5]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <SD_cmd>:

//послать команду карте
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	6039      	str	r1, [r7, #0]
 8000bba:	71fb      	strb	r3, [r7, #7]
  uint8_t n, res;
  if (cmd & 0x80)
 8000bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	da0e      	bge.n	8000be2 <SD_cmd+0x32>
  {
    cmd &= 0x7F;
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bca:	71fb      	strb	r3, [r7, #7]
    res = SD_cmd(CMD55, 0);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2077      	movs	r0, #119	; 0x77
 8000bd0:	f7ff ffee 	bl	8000bb0 <SD_cmd>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	73bb      	strb	r3, [r7, #14]
    if (res > 1) return res;
 8000bd8:	7bbb      	ldrb	r3, [r7, #14]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d901      	bls.n	8000be2 <SD_cmd+0x32>
 8000bde:	7bbb      	ldrb	r3, [r7, #14]
 8000be0:	e049      	b.n	8000c76 <SD_cmd+0xc6>
  }
  SS_SD_DESELECT();
 8000be2:	2201      	movs	r2, #1
 8000be4:	2108      	movs	r1, #8
 8000be6:	4826      	ldr	r0, [pc, #152]	; (8000c80 <SD_cmd+0xd0>)
 8000be8:	f001 f9b2 	bl	8001f50 <HAL_GPIO_WritePin>
  SPI_ReceiveByte();
 8000bec:	f7ff ffab 	bl	8000b46 <SPI_ReceiveByte>
  SS_SD_SELECT();
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2108      	movs	r1, #8
 8000bf4:	4822      	ldr	r0, [pc, #136]	; (8000c80 <SD_cmd+0xd0>)
 8000bf6:	f001 f9ab 	bl	8001f50 <HAL_GPIO_WritePin>
  SPI_ReceiveByte();
 8000bfa:	f7ff ffa4 	bl	8000b46 <SPI_ReceiveByte>
  SPI_SendByte(cmd); // Start + Command index
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff93 	bl	8000b2c <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 24)); // Argument[31..24]
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	0e1b      	lsrs	r3, r3, #24
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff8d 	bl	8000b2c <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 16)); // Argument[23..16]
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	0c1b      	lsrs	r3, r3, #16
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff87 	bl	8000b2c <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 8)); // Argument[15..8]
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff81 	bl	8000b2c <SPI_SendByte>
  SPI_SendByte((uint8_t)arg); // Argument[7..0]
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ff7c 	bl	8000b2c <SPI_SendByte>

  n = 0x01; // Dummy CRC + Stop
 8000c34:	2301      	movs	r3, #1
 8000c36:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0)
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	2b40      	cmp	r3, #64	; 0x40
 8000c3c:	d101      	bne.n	8000c42 <SD_cmd+0x92>
 8000c3e:	2395      	movs	r3, #149	; 0x95
 8000c40:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD8) {n = 0x87;} // Valid CRC for CMD8(0x1AA)
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b48      	cmp	r3, #72	; 0x48
 8000c46:	d101      	bne.n	8000c4c <SD_cmd+0x9c>
 8000c48:	2387      	movs	r3, #135	; 0x87
 8000c4a:	73fb      	strb	r3, [r7, #15]
  SPI_SendByte(n);
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff ff6c 	bl	8000b2c <SPI_SendByte>
  n = 10; // Wait for a valid response in timeout of 10 attempts
 8000c54:	230a      	movs	r3, #10
 8000c56:	73fb      	strb	r3, [r7, #15]
  do {
	  res = SPI_ReceiveByte();
 8000c58:	f7ff ff75 	bl	8000b46 <SPI_ReceiveByte>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	73bb      	strb	r3, [r7, #14]
  } while ((res & 0x80) && --n);
 8000c60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	da05      	bge.n	8000c74 <SD_cmd+0xc4>
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	73fb      	strb	r3, [r7, #15]
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d1f1      	bne.n	8000c58 <SD_cmd+0xa8>
  return res;
 8000c74:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40010800 	.word	0x40010800

08000c84 <SD_PowerOn>:
void SD_PowerOn(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  Timer1 = 0;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <SD_PowerOn+0x20>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	801a      	strh	r2, [r3, #0]
  while(Timer1<2); //ждём 20 милисекунд, для того, чтобы напряжение стабилизировалось
 8000c8e:	bf00      	nop
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <SD_PowerOn+0x20>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d9fa      	bls.n	8000c90 <SD_PowerOn+0xc>
}
 8000c9a:	bf00      	nop
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr
 8000ca4:	200002e8 	.word	0x200002e8

08000ca8 <SD_Read_Block>:

//прочитать данные из блока памяти
uint8_t SD_Read_Block (uint8_t *buff, uint32_t lba)
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  uint8_t result;
  uint16_t cnt;
  result=SD_cmd (CMD17, lba); //CMD17 даташит стр 50 и 96
 8000cb2:	6839      	ldr	r1, [r7, #0]
 8000cb4:	2051      	movs	r0, #81	; 0x51
 8000cb6:	f7ff ff7b 	bl	8000bb0 <SD_cmd>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	737b      	strb	r3, [r7, #13]
  if (result!=0x00) return 5; //Выйти, если результат не 0x00
 8000cbe:	7b7b      	ldrb	r3, [r7, #13]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <SD_Read_Block+0x20>
 8000cc4:	2305      	movs	r3, #5
 8000cc6:	e02f      	b.n	8000d28 <SD_Read_Block+0x80>
  SPI_Release();
 8000cc8:	f7ff ff4a 	bl	8000b60 <SPI_Release>
  cnt=0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	81fb      	strh	r3, [r7, #14]
  do{ //Ждем начала блока
	  result=SPI_ReceiveByte();
 8000cd0:	f7ff ff39 	bl	8000b46 <SPI_ReceiveByte>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	737b      	strb	r3, [r7, #13]
	  cnt++;
 8000cd8:	89fb      	ldrh	r3, [r7, #14]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	81fb      	strh	r3, [r7, #14]
  } while ( (result!=0xFE)&&(cnt<0xFFFF) );
 8000cde:	7b7b      	ldrb	r3, [r7, #13]
 8000ce0:	2bfe      	cmp	r3, #254	; 0xfe
 8000ce2:	d004      	beq.n	8000cee <SD_Read_Block+0x46>
 8000ce4:	89fb      	ldrh	r3, [r7, #14]
 8000ce6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d1f0      	bne.n	8000cd0 <SD_Read_Block+0x28>
  if (cnt>=0xFFFF) return 5;
 8000cee:	89fb      	ldrh	r3, [r7, #14]
 8000cf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d101      	bne.n	8000cfc <SD_Read_Block+0x54>
 8000cf8:	2305      	movs	r3, #5
 8000cfa:	e015      	b.n	8000d28 <SD_Read_Block+0x80>
  for (cnt=0;cnt<512;cnt++) buff[cnt]=SPI_ReceiveByte(); //получаем байты блока из шины в буфер
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	81fb      	strh	r3, [r7, #14]
 8000d00:	e009      	b.n	8000d16 <SD_Read_Block+0x6e>
 8000d02:	89fb      	ldrh	r3, [r7, #14]
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	18d4      	adds	r4, r2, r3
 8000d08:	f7ff ff1d 	bl	8000b46 <SPI_ReceiveByte>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	7023      	strb	r3, [r4, #0]
 8000d10:	89fb      	ldrh	r3, [r7, #14]
 8000d12:	3301      	adds	r3, #1
 8000d14:	81fb      	strh	r3, [r7, #14]
 8000d16:	89fb      	ldrh	r3, [r7, #14]
 8000d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d1c:	d3f1      	bcc.n	8000d02 <SD_Read_Block+0x5a>
  SPI_Release(); //Пропускаем контрольную сумму
 8000d1e:	f7ff ff1f 	bl	8000b60 <SPI_Release>
  SPI_Release();
 8000d22:	f7ff ff1d 	bl	8000b60 <SPI_Release>
  return 0;
 8000d26:	2300      	movs	r3, #0
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd90      	pop	{r4, r7, pc}

08000d30 <SD_Write_Block>:

//записать данные в блок памяти
uint8_t SD_Write_Block (uint8_t *buff, uint32_t lba)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint8_t result;
  uint16_t cnt;
  result=SD_cmd(CMD24,lba); //CMD24 даташит стр 51 и 97-98
 8000d3a:	6839      	ldr	r1, [r7, #0]
 8000d3c:	2058      	movs	r0, #88	; 0x58
 8000d3e:	f7ff ff37 	bl	8000bb0 <SD_cmd>
 8000d42:	4603      	mov	r3, r0
 8000d44:	737b      	strb	r3, [r7, #13]
  if (result!=0x00) return 6; //Выйти, если результат не 0x00
 8000d46:	7b7b      	ldrb	r3, [r7, #13]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SD_Write_Block+0x20>
 8000d4c:	2306      	movs	r3, #6
 8000d4e:	e03d      	b.n	8000dcc <SD_Write_Block+0x9c>
  SPI_Release();
 8000d50:	f7ff ff06 	bl	8000b60 <SPI_Release>
  SPI_SendByte (0xFE); //Начало буфера
 8000d54:	20fe      	movs	r0, #254	; 0xfe
 8000d56:	f7ff fee9 	bl	8000b2c <SPI_SendByte>
  for (cnt=0;cnt<512;cnt++) SPI_SendByte(buff[cnt]); //Данные
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	81fb      	strh	r3, [r7, #14]
 8000d5e:	e009      	b.n	8000d74 <SD_Write_Block+0x44>
 8000d60:	89fb      	ldrh	r3, [r7, #14]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fedf 	bl	8000b2c <SPI_SendByte>
 8000d6e:	89fb      	ldrh	r3, [r7, #14]
 8000d70:	3301      	adds	r3, #1
 8000d72:	81fb      	strh	r3, [r7, #14]
 8000d74:	89fb      	ldrh	r3, [r7, #14]
 8000d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d7a:	d3f1      	bcc.n	8000d60 <SD_Write_Block+0x30>
  SPI_Release(); //Пропустим котрольную сумму
 8000d7c:	f7ff fef0 	bl	8000b60 <SPI_Release>
  SPI_Release();
 8000d80:	f7ff feee 	bl	8000b60 <SPI_Release>
  result=SPI_ReceiveByte();
 8000d84:	f7ff fedf 	bl	8000b46 <SPI_ReceiveByte>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	737b      	strb	r3, [r7, #13]
  if ((result&0x05)!=0x05) return 6; //Выйти, если результат не 0x05 (Даташит стр 111)
 8000d8c:	7b7b      	ldrb	r3, [r7, #13]
 8000d8e:	f003 0305 	and.w	r3, r3, #5
 8000d92:	2b05      	cmp	r3, #5
 8000d94:	d001      	beq.n	8000d9a <SD_Write_Block+0x6a>
 8000d96:	2306      	movs	r3, #6
 8000d98:	e018      	b.n	8000dcc <SD_Write_Block+0x9c>
  cnt=0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	81fb      	strh	r3, [r7, #14]
  do { //Ждем окончания состояния BUSY
    result=SPI_ReceiveByte();
 8000d9e:	f7ff fed2 	bl	8000b46 <SPI_ReceiveByte>
 8000da2:	4603      	mov	r3, r0
 8000da4:	737b      	strb	r3, [r7, #13]
    cnt++;
 8000da6:	89fb      	ldrh	r3, [r7, #14]
 8000da8:	3301      	adds	r3, #1
 8000daa:	81fb      	strh	r3, [r7, #14]
  } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 8000dac:	7b7b      	ldrb	r3, [r7, #13]
 8000dae:	2bff      	cmp	r3, #255	; 0xff
 8000db0:	d004      	beq.n	8000dbc <SD_Write_Block+0x8c>
 8000db2:	89fb      	ldrh	r3, [r7, #14]
 8000db4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d1f0      	bne.n	8000d9e <SD_Write_Block+0x6e>
  if (cnt>=0xFFFF) return 6;
 8000dbc:	89fb      	ldrh	r3, [r7, #14]
 8000dbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d101      	bne.n	8000dca <SD_Write_Block+0x9a>
 8000dc6:	2306      	movs	r3, #6
 8000dc8:	e000      	b.n	8000dcc <SD_Write_Block+0x9c>

  return 0;
 8000dca:	2300      	movs	r3, #0

}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <sd_ini>:

//инициализации карты SD
uint8_t sd_ini(void)
{
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
	uint8_t i, cmd;
	uint8_t ocr[4];
	int16_t tmr;
	uint32_t temp;
	LD_OFF;
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de0:	4869      	ldr	r0, [pc, #420]	; (8000f88 <sd_ini+0x1b4>)
 8000de2:	f001 f8b5 	bl	8001f50 <HAL_GPIO_WritePin>
	sdinfo.type = 0;
 8000de6:	4b69      	ldr	r3, [pc, #420]	; (8000f8c <sd_ini+0x1b8>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
	temp = hspi2.Init.BaudRatePrescaler;
 8000dec:	4b68      	ldr	r3, [pc, #416]	; (8000f90 <sd_ini+0x1bc>)
 8000dee:	69db      	ldr	r3, [r3, #28]
 8000df0:	60bb      	str	r3, [r7, #8]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128; //156.25 kbbs
 8000df2:	4b67      	ldr	r3, [pc, #412]	; (8000f90 <sd_ini+0x1bc>)
 8000df4:	2230      	movs	r2, #48	; 0x30
 8000df6:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi2);
 8000df8:	4865      	ldr	r0, [pc, #404]	; (8000f90 <sd_ini+0x1bc>)
 8000dfa:	f002 f9eb 	bl	80031d4 <HAL_SPI_Init>
	SS_SD_DESELECT();
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2108      	movs	r1, #8
 8000e02:	4864      	ldr	r0, [pc, #400]	; (8000f94 <sd_ini+0x1c0>)
 8000e04:	f001 f8a4 	bl	8001f50 <HAL_GPIO_WritePin>
	for(i=0;i<10;i++) //80 импульсов (не менее 74) Даташит стр 91
 8000e08:	2300      	movs	r3, #0
 8000e0a:	73fb      	strb	r3, [r7, #15]
 8000e0c:	e004      	b.n	8000e18 <sd_ini+0x44>
		SPI_Release();
 8000e0e:	f7ff fea7 	bl	8000b60 <SPI_Release>
	for(i=0;i<10;i++) //80 импульсов (не менее 74) Даташит стр 91
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	3301      	adds	r3, #1
 8000e16:	73fb      	strb	r3, [r7, #15]
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	2b09      	cmp	r3, #9
 8000e1c:	d9f7      	bls.n	8000e0e <sd_ini+0x3a>
	hspi2.Init.BaudRatePrescaler = temp;
 8000e1e:	4a5c      	ldr	r2, [pc, #368]	; (8000f90 <sd_ini+0x1bc>)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	61d3      	str	r3, [r2, #28]
	HAL_SPI_Init(&hspi2);
 8000e24:	485a      	ldr	r0, [pc, #360]	; (8000f90 <sd_ini+0x1bc>)
 8000e26:	f002 f9d5 	bl	80031d4 <HAL_SPI_Init>
	SS_SD_SELECT();
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2108      	movs	r1, #8
 8000e2e:	4859      	ldr	r0, [pc, #356]	; (8000f94 <sd_ini+0x1c0>)
 8000e30:	f001 f88e 	bl	8001f50 <HAL_GPIO_WritePin>
	if (SD_cmd(CMD0, 0) == 1) // Enter Idle state
 8000e34:	2100      	movs	r1, #0
 8000e36:	2040      	movs	r0, #64	; 0x40
 8000e38:	f7ff feba 	bl	8000bb0 <SD_cmd>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	f040 809a 	bne.w	8000f78 <sd_ini+0x1a4>
	{
		SPI_Release();
 8000e44:	f7ff fe8c 	bl	8000b60 <SPI_Release>
		if (SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 8000e48:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000e4c:	2048      	movs	r0, #72	; 0x48
 8000e4e:	f7ff feaf 	bl	8000bb0 <SD_cmd>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d157      	bne.n	8000f08 <sd_ini+0x134>
		{
			for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	73fb      	strb	r3, [r7, #15]
 8000e5c:	e00c      	b.n	8000e78 <sd_ini+0xa4>
 8000e5e:	7bfc      	ldrb	r4, [r7, #15]
 8000e60:	f7ff fe71 	bl	8000b46 <SPI_ReceiveByte>
 8000e64:	4603      	mov	r3, r0
 8000e66:	461a      	mov	r2, r3
 8000e68:	f104 0310 	add.w	r3, r4, #16
 8000e6c:	443b      	add	r3, r7
 8000e6e:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	3301      	adds	r3, #1
 8000e76:	73fb      	strb	r3, [r7, #15]
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	2b03      	cmp	r3, #3
 8000e7c:	d9ef      	bls.n	8000e5e <sd_ini+0x8a>
#if DEBUG
			sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
			HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
#endif
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8000e7e:	79bb      	ldrb	r3, [r7, #6]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d17b      	bne.n	8000f7c <sd_ini+0x1a8>
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2baa      	cmp	r3, #170	; 0xaa
 8000e88:	d178      	bne.n	8000f7c <sd_ini+0x1a8>
			{
				for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--);
 8000e8a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8000e8e:	81bb      	strh	r3, [r7, #12]
 8000e90:	e005      	b.n	8000e9e <sd_ini+0xca>
 8000e92:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	81bb      	strh	r3, [r7, #12]
 8000e9e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d007      	beq.n	8000eb6 <sd_ini+0xe2>
 8000ea6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000eaa:	20e9      	movs	r0, #233	; 0xe9
 8000eac:	f7ff fe80 	bl	8000bb0 <SD_cmd>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1ed      	bne.n	8000e92 <sd_ini+0xbe>
				     // Wait for leaving idle state (ACMD41 with HCS bit)
				if (tmr && SD_cmd(CMD58, 0) == 0)
 8000eb6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d05e      	beq.n	8000f7c <sd_ini+0x1a8>
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	207a      	movs	r0, #122	; 0x7a
 8000ec2:	f7ff fe75 	bl	8000bb0 <SD_cmd>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d157      	bne.n	8000f7c <sd_ini+0x1a8>
				{ // Check CCS bit in the OCR

					for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73fb      	strb	r3, [r7, #15]
 8000ed0:	e00c      	b.n	8000eec <sd_ini+0x118>
 8000ed2:	7bfc      	ldrb	r4, [r7, #15]
 8000ed4:	f7ff fe37 	bl	8000b46 <SPI_ReceiveByte>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	461a      	mov	r2, r3
 8000edc:	f104 0310 	add.w	r3, r4, #16
 8000ee0:	443b      	add	r3, r7
 8000ee2:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d9ef      	bls.n	8000ed2 <sd_ini+0xfe>
#if DEBUG
					sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
					HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
#endif
					sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 8000ef2:	793b      	ldrb	r3, [r7, #4]
 8000ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <sd_ini+0x12c>
 8000efc:	220c      	movs	r2, #12
 8000efe:	e000      	b.n	8000f02 <sd_ini+0x12e>
 8000f00:	2204      	movs	r2, #4
 8000f02:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <sd_ini+0x1b8>)
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	e039      	b.n	8000f7c <sd_ini+0x1a8>
				}
			}
		}
		else //SDv1 or MMCv3
		{
			if (SD_cmd(ACMD41, 0) <= 1)
 8000f08:	2100      	movs	r1, #0
 8000f0a:	20e9      	movs	r0, #233	; 0xe9
 8000f0c:	f7ff fe50 	bl	8000bb0 <SD_cmd>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d805      	bhi.n	8000f22 <sd_ini+0x14e>
			{
				sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 8000f16:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <sd_ini+0x1b8>)
 8000f18:	2202      	movs	r2, #2
 8000f1a:	701a      	strb	r2, [r3, #0]
 8000f1c:	23e9      	movs	r3, #233	; 0xe9
 8000f1e:	73bb      	strb	r3, [r7, #14]
 8000f20:	e004      	b.n	8000f2c <sd_ini+0x158>
			}
			else
			{
			    sdinfo.type = CT_MMC; cmd = CMD1; // MMCv3
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <sd_ini+0x1b8>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]
 8000f28:	2341      	movs	r3, #65	; 0x41
 8000f2a:	73bb      	strb	r3, [r7, #14]
			}
			for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; // Wait for leaving idle state
 8000f2c:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8000f30:	81bb      	strh	r3, [r7, #12]
 8000f32:	e005      	b.n	8000f40 <sd_ini+0x16c>
 8000f34:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	81bb      	strh	r3, [r7, #12]
 8000f40:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d007      	beq.n	8000f58 <sd_ini+0x184>
 8000f48:	7bbb      	ldrb	r3, [r7, #14]
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fe2f 	bl	8000bb0 <SD_cmd>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1ed      	bne.n	8000f34 <sd_ini+0x160>
			if (!tmr || SD_cmd(CMD16, 512) != 0) // Set R/W block length to 512
 8000f58:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d007      	beq.n	8000f70 <sd_ini+0x19c>
 8000f60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f64:	2050      	movs	r0, #80	; 0x50
 8000f66:	f7ff fe23 	bl	8000bb0 <SD_cmd>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <sd_ini+0x1a8>
				sdinfo.type = 0;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <sd_ini+0x1b8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
 8000f76:	e001      	b.n	8000f7c <sd_ini+0x1a8>
		}
	}
	else
	{
		return 1;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e000      	b.n	8000f7e <sd_ini+0x1aa>
	}
#if DEBUG
	sprintf(str1,"Type SD: 0x%02X\r\n",sdinfo.type);
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
#endif
	return 0;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd90      	pop	{r4, r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40011000 	.word	0x40011000
 8000f8c:	200033b8 	.word	0x200033b8
 8000f90:	2000006c 	.word	0x2000006c
 8000f94:	40010800 	.word	0x40010800

08000f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6193      	str	r3, [r2, #24]
 8000faa:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	61d3      	str	r3, [r2, #28]
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <HAL_MspInit+0x60>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <HAL_MspInit+0x60>)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40010000 	.word	0x40010000

08000ffc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <HAL_RTC_MspInit+0x3c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d110      	bne.n	8001030 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800100e:	f000 ffb7 	bl	8001f80 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <HAL_RTC_MspInit+0x40>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	4a09      	ldr	r2, [pc, #36]	; (800103c <HAL_RTC_MspInit+0x40>)
 8001018:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800101c:	61d3      	str	r3, [r2, #28]
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <HAL_RTC_MspInit+0x40>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800102a:	4b05      	ldr	r3, [pc, #20]	; (8001040 <HAL_RTC_MspInit+0x44>)
 800102c:	2201      	movs	r2, #1
 800102e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40002800 	.word	0x40002800
 800103c:	40021000 	.word	0x40021000
 8001040:	4242043c 	.word	0x4242043c

08001044 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a1c      	ldr	r2, [pc, #112]	; (80010d0 <HAL_SPI_MspInit+0x8c>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d131      	bne.n	80010c8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <HAL_SPI_MspInit+0x90>)
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	4a1a      	ldr	r2, [pc, #104]	; (80010d4 <HAL_SPI_MspInit+0x90>)
 800106a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800106e:	61d3      	str	r3, [r2, #28]
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <HAL_SPI_MspInit+0x90>)
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <HAL_SPI_MspInit+0x90>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a14      	ldr	r2, [pc, #80]	; (80010d4 <HAL_SPI_MspInit+0x90>)
 8001082:	f043 0308 	orr.w	r3, r3, #8
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_SPI_MspInit+0x90>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0308 	and.w	r3, r3, #8
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001094:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001098:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a2:	f107 0310 	add.w	r3, r7, #16
 80010a6:	4619      	mov	r1, r3
 80010a8:	480b      	ldr	r0, [pc, #44]	; (80010d8 <HAL_SPI_MspInit+0x94>)
 80010aa:	f000 fdcd 	bl	8001c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80010ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	4619      	mov	r1, r3
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <HAL_SPI_MspInit+0x94>)
 80010c4:	f000 fdc0 	bl	8001c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80010c8:	bf00      	nop
 80010ca:	3720      	adds	r7, #32
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40003800 	.word	0x40003800
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40010c00 	.word	0x40010c00

080010dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010ec:	d113      	bne.n	8001116 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <HAL_TIM_Base_MspInit+0x44>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <HAL_TIM_Base_MspInit+0x44>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	61d3      	str	r3, [r2, #28]
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <HAL_TIM_Base_MspInit+0x44>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2100      	movs	r1, #0
 800110a:	201c      	movs	r0, #28
 800110c:	f000 fb55 	bl	80017ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001110:	201c      	movs	r0, #28
 8001112:	f000 fb6e 	bl	80017f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000

08001124 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08c      	sub	sp, #48	; 0x30
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0320 	add.w	r3, r7, #32
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a61      	ldr	r2, [pc, #388]	; (80012c4 <HAL_UART_MspInit+0x1a0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	f040 8089 	bne.w	8001258 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001146:	4b60      	ldr	r3, [pc, #384]	; (80012c8 <HAL_UART_MspInit+0x1a4>)
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	4a5f      	ldr	r2, [pc, #380]	; (80012c8 <HAL_UART_MspInit+0x1a4>)
 800114c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001150:	6193      	str	r3, [r2, #24]
 8001152:	4b5d      	ldr	r3, [pc, #372]	; (80012c8 <HAL_UART_MspInit+0x1a4>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115a:	61fb      	str	r3, [r7, #28]
 800115c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	4b5a      	ldr	r3, [pc, #360]	; (80012c8 <HAL_UART_MspInit+0x1a4>)
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	4a59      	ldr	r2, [pc, #356]	; (80012c8 <HAL_UART_MspInit+0x1a4>)
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	6193      	str	r3, [r2, #24]
 800116a:	4b57      	ldr	r3, [pc, #348]	; (80012c8 <HAL_UART_MspInit+0x1a4>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	61bb      	str	r3, [r7, #24]
 8001174:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001176:	f44f 7300 	mov.w	r3, #512	; 0x200
 800117a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	f107 0320 	add.w	r3, r7, #32
 8001188:	4619      	mov	r1, r3
 800118a:	4850      	ldr	r0, [pc, #320]	; (80012cc <HAL_UART_MspInit+0x1a8>)
 800118c:	f000 fd5c 	bl	8001c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001196:	2300      	movs	r3, #0
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 0320 	add.w	r3, r7, #32
 80011a2:	4619      	mov	r1, r3
 80011a4:	4849      	ldr	r0, [pc, #292]	; (80012cc <HAL_UART_MspInit+0x1a8>)
 80011a6:	f000 fd4f 	bl	8001c48 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80011aa:	4b49      	ldr	r3, [pc, #292]	; (80012d0 <HAL_UART_MspInit+0x1ac>)
 80011ac:	4a49      	ldr	r2, [pc, #292]	; (80012d4 <HAL_UART_MspInit+0x1b0>)
 80011ae:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011b0:	4b47      	ldr	r3, [pc, #284]	; (80012d0 <HAL_UART_MspInit+0x1ac>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b6:	4b46      	ldr	r3, [pc, #280]	; (80012d0 <HAL_UART_MspInit+0x1ac>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011bc:	4b44      	ldr	r3, [pc, #272]	; (80012d0 <HAL_UART_MspInit+0x1ac>)
 80011be:	2280      	movs	r2, #128	; 0x80
 80011c0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011c2:	4b43      	ldr	r3, [pc, #268]	; (80012d0 <HAL_UART_MspInit+0x1ac>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011c8:	4b41      	ldr	r3, [pc, #260]	; (80012d0 <HAL_UART_MspInit+0x1ac>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80011ce:	4b40      	ldr	r3, [pc, #256]	; (80012d0 <HAL_UART_MspInit+0x1ac>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80011d4:	4b3e      	ldr	r3, [pc, #248]	; (80012d0 <HAL_UART_MspInit+0x1ac>)
 80011d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80011dc:	483c      	ldr	r0, [pc, #240]	; (80012d0 <HAL_UART_MspInit+0x1ac>)
 80011de:	f000 fb23 	bl	8001828 <HAL_DMA_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 80011e8:	f7ff fc70 	bl	8000acc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a38      	ldr	r2, [pc, #224]	; (80012d0 <HAL_UART_MspInit+0x1ac>)
 80011f0:	639a      	str	r2, [r3, #56]	; 0x38
 80011f2:	4a37      	ldr	r2, [pc, #220]	; (80012d0 <HAL_UART_MspInit+0x1ac>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80011f8:	4b37      	ldr	r3, [pc, #220]	; (80012d8 <HAL_UART_MspInit+0x1b4>)
 80011fa:	4a38      	ldr	r2, [pc, #224]	; (80012dc <HAL_UART_MspInit+0x1b8>)
 80011fc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011fe:	4b36      	ldr	r3, [pc, #216]	; (80012d8 <HAL_UART_MspInit+0x1b4>)
 8001200:	2210      	movs	r2, #16
 8001202:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001204:	4b34      	ldr	r3, [pc, #208]	; (80012d8 <HAL_UART_MspInit+0x1b4>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800120a:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <HAL_UART_MspInit+0x1b4>)
 800120c:	2280      	movs	r2, #128	; 0x80
 800120e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001210:	4b31      	ldr	r3, [pc, #196]	; (80012d8 <HAL_UART_MspInit+0x1b4>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001216:	4b30      	ldr	r3, [pc, #192]	; (80012d8 <HAL_UART_MspInit+0x1b4>)
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800121c:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <HAL_UART_MspInit+0x1b4>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001222:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <HAL_UART_MspInit+0x1b4>)
 8001224:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001228:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800122a:	482b      	ldr	r0, [pc, #172]	; (80012d8 <HAL_UART_MspInit+0x1b4>)
 800122c:	f000 fafc 	bl	8001828 <HAL_DMA_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8001236:	f7ff fc49 	bl	8000acc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a26      	ldr	r2, [pc, #152]	; (80012d8 <HAL_UART_MspInit+0x1b4>)
 800123e:	635a      	str	r2, [r3, #52]	; 0x34
 8001240:	4a25      	ldr	r2, [pc, #148]	; (80012d8 <HAL_UART_MspInit+0x1b4>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	2025      	movs	r0, #37	; 0x25
 800124c:	f000 fab5 	bl	80017ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001250:	2025      	movs	r0, #37	; 0x25
 8001252:	f000 face 	bl	80017f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001256:	e0ca      	b.n	80013ee <HAL_UART_MspInit+0x2ca>
  else if(huart->Instance==USART2)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a20      	ldr	r2, [pc, #128]	; (80012e0 <HAL_UART_MspInit+0x1bc>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d140      	bne.n	80012e4 <HAL_UART_MspInit+0x1c0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <HAL_UART_MspInit+0x1a4>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	4a18      	ldr	r2, [pc, #96]	; (80012c8 <HAL_UART_MspInit+0x1a4>)
 8001268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800126c:	61d3      	str	r3, [r2, #28]
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <HAL_UART_MspInit+0x1a4>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <HAL_UART_MspInit+0x1a4>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <HAL_UART_MspInit+0x1a4>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6193      	str	r3, [r2, #24]
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <HAL_UART_MspInit+0x1a4>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001292:	2304      	movs	r3, #4
 8001294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800129a:	2303      	movs	r3, #3
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	4619      	mov	r1, r3
 80012a4:	4809      	ldr	r0, [pc, #36]	; (80012cc <HAL_UART_MspInit+0x1a8>)
 80012a6:	f000 fccf 	bl	8001c48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012aa:	2308      	movs	r3, #8
 80012ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ae:	2300      	movs	r3, #0
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b6:	f107 0320 	add.w	r3, r7, #32
 80012ba:	4619      	mov	r1, r3
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <HAL_UART_MspInit+0x1a8>)
 80012be:	f000 fcc3 	bl	8001c48 <HAL_GPIO_Init>
}
 80012c2:	e094      	b.n	80013ee <HAL_UART_MspInit+0x2ca>
 80012c4:	40013800 	.word	0x40013800
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40010800 	.word	0x40010800
 80012d0:	200001d8 	.word	0x200001d8
 80012d4:	40020058 	.word	0x40020058
 80012d8:	2000021c 	.word	0x2000021c
 80012dc:	40020044 	.word	0x40020044
 80012e0:	40004400 	.word	0x40004400
  else if(huart->Instance==USART3)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a43      	ldr	r2, [pc, #268]	; (80013f8 <HAL_UART_MspInit+0x2d4>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d17f      	bne.n	80013ee <HAL_UART_MspInit+0x2ca>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012ee:	4b43      	ldr	r3, [pc, #268]	; (80013fc <HAL_UART_MspInit+0x2d8>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a42      	ldr	r2, [pc, #264]	; (80013fc <HAL_UART_MspInit+0x2d8>)
 80012f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012f8:	61d3      	str	r3, [r2, #28]
 80012fa:	4b40      	ldr	r3, [pc, #256]	; (80013fc <HAL_UART_MspInit+0x2d8>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001306:	4b3d      	ldr	r3, [pc, #244]	; (80013fc <HAL_UART_MspInit+0x2d8>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	4a3c      	ldr	r2, [pc, #240]	; (80013fc <HAL_UART_MspInit+0x2d8>)
 800130c:	f043 0308 	orr.w	r3, r3, #8
 8001310:	6193      	str	r3, [r2, #24]
 8001312:	4b3a      	ldr	r3, [pc, #232]	; (80013fc <HAL_UART_MspInit+0x2d8>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800131e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001328:	2303      	movs	r3, #3
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132c:	f107 0320 	add.w	r3, r7, #32
 8001330:	4619      	mov	r1, r3
 8001332:	4833      	ldr	r0, [pc, #204]	; (8001400 <HAL_UART_MspInit+0x2dc>)
 8001334:	f000 fc88 	bl	8001c48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001338:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800133c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001346:	f107 0320 	add.w	r3, r7, #32
 800134a:	4619      	mov	r1, r3
 800134c:	482c      	ldr	r0, [pc, #176]	; (8001400 <HAL_UART_MspInit+0x2dc>)
 800134e:	f000 fc7b 	bl	8001c48 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001352:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <HAL_UART_MspInit+0x2e0>)
 8001354:	4a2c      	ldr	r2, [pc, #176]	; (8001408 <HAL_UART_MspInit+0x2e4>)
 8001356:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001358:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <HAL_UART_MspInit+0x2e0>)
 800135a:	2200      	movs	r2, #0
 800135c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800135e:	4b29      	ldr	r3, [pc, #164]	; (8001404 <HAL_UART_MspInit+0x2e0>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001364:	4b27      	ldr	r3, [pc, #156]	; (8001404 <HAL_UART_MspInit+0x2e0>)
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800136a:	4b26      	ldr	r3, [pc, #152]	; (8001404 <HAL_UART_MspInit+0x2e0>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001370:	4b24      	ldr	r3, [pc, #144]	; (8001404 <HAL_UART_MspInit+0x2e0>)
 8001372:	2200      	movs	r2, #0
 8001374:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001376:	4b23      	ldr	r3, [pc, #140]	; (8001404 <HAL_UART_MspInit+0x2e0>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800137c:	4b21      	ldr	r3, [pc, #132]	; (8001404 <HAL_UART_MspInit+0x2e0>)
 800137e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001382:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001384:	481f      	ldr	r0, [pc, #124]	; (8001404 <HAL_UART_MspInit+0x2e0>)
 8001386:	f000 fa4f 	bl	8001828 <HAL_DMA_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <HAL_UART_MspInit+0x270>
      Error_Handler();
 8001390:	f7ff fb9c 	bl	8000acc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a1b      	ldr	r2, [pc, #108]	; (8001404 <HAL_UART_MspInit+0x2e0>)
 8001398:	639a      	str	r2, [r3, #56]	; 0x38
 800139a:	4a1a      	ldr	r2, [pc, #104]	; (8001404 <HAL_UART_MspInit+0x2e0>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <HAL_UART_MspInit+0x2e8>)
 80013a2:	4a1b      	ldr	r2, [pc, #108]	; (8001410 <HAL_UART_MspInit+0x2ec>)
 80013a4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <HAL_UART_MspInit+0x2e8>)
 80013a8:	2210      	movs	r2, #16
 80013aa:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ac:	4b17      	ldr	r3, [pc, #92]	; (800140c <HAL_UART_MspInit+0x2e8>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <HAL_UART_MspInit+0x2e8>)
 80013b4:	2280      	movs	r2, #128	; 0x80
 80013b6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <HAL_UART_MspInit+0x2e8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <HAL_UART_MspInit+0x2e8>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <HAL_UART_MspInit+0x2e8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <HAL_UART_MspInit+0x2e8>)
 80013cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013d0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80013d2:	480e      	ldr	r0, [pc, #56]	; (800140c <HAL_UART_MspInit+0x2e8>)
 80013d4:	f000 fa28 	bl	8001828 <HAL_DMA_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_UART_MspInit+0x2be>
      Error_Handler();
 80013de:	f7ff fb75 	bl	8000acc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a09      	ldr	r2, [pc, #36]	; (800140c <HAL_UART_MspInit+0x2e8>)
 80013e6:	635a      	str	r2, [r3, #52]	; 0x34
 80013e8:	4a08      	ldr	r2, [pc, #32]	; (800140c <HAL_UART_MspInit+0x2e8>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6253      	str	r3, [r2, #36]	; 0x24
}
 80013ee:	bf00      	nop
 80013f0:	3730      	adds	r7, #48	; 0x30
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40004800 	.word	0x40004800
 80013fc:	40021000 	.word	0x40021000
 8001400:	40010c00 	.word	0x40010c00
 8001404:	20000260 	.word	0x20000260
 8001408:	40020030 	.word	0x40020030
 800140c:	200002a4 	.word	0x200002a4
 8001410:	4002001c 	.word	0x4002001c

08001414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <NMI_Handler+0x4>

0800141a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141e:	e7fe      	b.n	800141e <HardFault_Handler+0x4>

08001420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <MemManage_Handler+0x4>

08001426 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <BusFault_Handler+0x4>

0800142c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <UsageFault_Handler+0x4>

08001432 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr

0800144a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800145a:	f000 f8bb 	bl	80015d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <DMA1_Channel2_IRQHandler+0x10>)
 800146a:	f000 fae7 	bl	8001a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200002a4 	.word	0x200002a4

08001478 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <DMA1_Channel3_IRQHandler+0x10>)
 800147e:	f000 fadd 	bl	8001a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000260 	.word	0x20000260

0800148c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <DMA1_Channel4_IRQHandler+0x10>)
 8001492:	f000 fad3 	bl	8001a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000021c 	.word	0x2000021c

080014a0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <DMA1_Channel5_IRQHandler+0x10>)
 80014a6:	f000 fac9 	bl	8001a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200001d8 	.word	0x200001d8

080014b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <TIM2_IRQHandler+0x10>)
 80014ba:	f002 f9f9 	bl	80038b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200000c4 	.word	0x200000c4

080014c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <USART1_IRQHandler+0x10>)
 80014ce:	f002 feb1 	bl	8004234 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	2000010c 	.word	0x2000010c

080014dc <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <USART2_IRQHandler+0x10>)
 80014e2:	f002 fea7 	bl	8004234 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000150 	.word	0x20000150

080014f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014fe:	490d      	ldr	r1, [pc, #52]	; (8001534 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001500:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001504:	e002      	b.n	800150c <LoopCopyDataInit>

08001506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150a:	3304      	adds	r3, #4

0800150c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800150c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001510:	d3f9      	bcc.n	8001506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001514:	4c0a      	ldr	r4, [pc, #40]	; (8001540 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001518:	e001      	b.n	800151e <LoopFillZerobss>

0800151a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800151c:	3204      	adds	r2, #4

0800151e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001520:	d3fb      	bcc.n	800151a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001522:	f7ff ffe5 	bl	80014f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001526:	f006 fd17 	bl	8007f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800152a:	f7fe fe0f 	bl	800014c <main>
  bx lr
 800152e:	4770      	bx	lr
  ldr r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001534:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001538:	08008768 	.word	0x08008768
  ldr r2, =_sbss
 800153c:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001540:	200035f4 	.word	0x200035f4

08001544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC1_2_IRQHandler>
	...

08001548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_Init+0x28>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a07      	ldr	r2, [pc, #28]	; (8001570 <HAL_Init+0x28>)
 8001552:	f043 0310 	orr.w	r3, r3, #16
 8001556:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001558:	2003      	movs	r0, #3
 800155a:	f000 f923 	bl	80017a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800155e:	200f      	movs	r0, #15
 8001560:	f000 f808 	bl	8001574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001564:	f7ff fd18 	bl	8000f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40022000 	.word	0x40022000

08001574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <HAL_InitTick+0x54>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_InitTick+0x58>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158a:	fbb3 f3f1 	udiv	r3, r3, r1
 800158e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f000 f93b 	bl	800180e <HAL_SYSTICK_Config>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e00e      	b.n	80015c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b0f      	cmp	r3, #15
 80015a6:	d80a      	bhi.n	80015be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a8:	2200      	movs	r2, #0
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f000 f903 	bl	80017ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b4:	4a06      	ldr	r2, [pc, #24]	; (80015d0 <HAL_InitTick+0x5c>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e000      	b.n	80015c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	2000001c 	.word	0x2000001c
 80015cc:	20000024 	.word	0x20000024
 80015d0:	20000020 	.word	0x20000020

080015d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <HAL_IncTick+0x1c>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <HAL_IncTick+0x20>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	4a03      	ldr	r2, [pc, #12]	; (80015f4 <HAL_IncTick+0x20>)
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	20000024 	.word	0x20000024
 80015f4:	200033bc 	.word	0x200033bc

080015f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return uwTick;
 80015fc:	4b02      	ldr	r3, [pc, #8]	; (8001608 <HAL_GetTick+0x10>)
 80015fe:	681b      	ldr	r3, [r3, #0]
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	200033bc 	.word	0x200033bc

0800160c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001628:	4013      	ands	r3, r2
 800162a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800163c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163e:	4a04      	ldr	r2, [pc, #16]	; (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	60d3      	str	r3, [r2, #12]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <__NVIC_GetPriorityGrouping+0x18>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	0a1b      	lsrs	r3, r3, #8
 800165e:	f003 0307 	and.w	r3, r3, #7
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	2b00      	cmp	r3, #0
 8001680:	db0b      	blt.n	800169a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	f003 021f 	and.w	r2, r3, #31
 8001688:	4906      	ldr	r1, [pc, #24]	; (80016a4 <__NVIC_EnableIRQ+0x34>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	095b      	lsrs	r3, r3, #5
 8001690:	2001      	movs	r0, #1
 8001692:	fa00 f202 	lsl.w	r2, r0, r2
 8001696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	e000e100 	.word	0xe000e100

080016a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	db0a      	blt.n	80016d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	490c      	ldr	r1, [pc, #48]	; (80016f4 <__NVIC_SetPriority+0x4c>)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	0112      	lsls	r2, r2, #4
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	440b      	add	r3, r1
 80016cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d0:	e00a      	b.n	80016e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4908      	ldr	r1, [pc, #32]	; (80016f8 <__NVIC_SetPriority+0x50>)
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	3b04      	subs	r3, #4
 80016e0:	0112      	lsls	r2, r2, #4
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	440b      	add	r3, r1
 80016e6:	761a      	strb	r2, [r3, #24]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000e100 	.word	0xe000e100
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	; 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f1c3 0307 	rsb	r3, r3, #7
 8001716:	2b04      	cmp	r3, #4
 8001718:	bf28      	it	cs
 800171a:	2304      	movcs	r3, #4
 800171c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3304      	adds	r3, #4
 8001722:	2b06      	cmp	r3, #6
 8001724:	d902      	bls.n	800172c <NVIC_EncodePriority+0x30>
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3b03      	subs	r3, #3
 800172a:	e000      	b.n	800172e <NVIC_EncodePriority+0x32>
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	f04f 32ff 	mov.w	r2, #4294967295
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43da      	mvns	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	401a      	ands	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001744:	f04f 31ff 	mov.w	r1, #4294967295
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa01 f303 	lsl.w	r3, r1, r3
 800174e:	43d9      	mvns	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	4313      	orrs	r3, r2
         );
}
 8001756:	4618      	mov	r0, r3
 8001758:	3724      	adds	r7, #36	; 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001770:	d301      	bcc.n	8001776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001772:	2301      	movs	r3, #1
 8001774:	e00f      	b.n	8001796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <SysTick_Config+0x40>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177e:	210f      	movs	r1, #15
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f7ff ff90 	bl	80016a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <SysTick_Config+0x40>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <SysTick_Config+0x40>)
 8001790:	2207      	movs	r2, #7
 8001792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	e000e010 	.word	0xe000e010

080017a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ff2d 	bl	800160c <__NVIC_SetPriorityGrouping>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b086      	sub	sp, #24
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
 80017c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017cc:	f7ff ff42 	bl	8001654 <__NVIC_GetPriorityGrouping>
 80017d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	6978      	ldr	r0, [r7, #20]
 80017d8:	f7ff ff90 	bl	80016fc <NVIC_EncodePriority>
 80017dc:	4602      	mov	r2, r0
 80017de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e2:	4611      	mov	r1, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff5f 	bl	80016a8 <__NVIC_SetPriority>
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff35 	bl	8001670 <__NVIC_EnableIRQ>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff ffa2 	bl	8001760 <SysTick_Config>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e043      	b.n	80018c6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <HAL_DMA_Init+0xa8>)
 8001846:	4413      	add	r3, r2
 8001848:	4a22      	ldr	r2, [pc, #136]	; (80018d4 <HAL_DMA_Init+0xac>)
 800184a:	fba2 2303 	umull	r2, r3, r2, r3
 800184e:	091b      	lsrs	r3, r3, #4
 8001850:	009a      	lsls	r2, r3, #2
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a1f      	ldr	r2, [pc, #124]	; (80018d8 <HAL_DMA_Init+0xb0>)
 800185a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001872:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001876:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001880:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800188c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001898:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	bffdfff8 	.word	0xbffdfff8
 80018d4:	cccccccd 	.word	0xcccccccd
 80018d8:	40020000 	.word	0x40020000

080018dc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d008      	beq.n	8001904 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2204      	movs	r2, #4
 80018f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e020      	b.n	8001946 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 020e 	bic.w	r2, r2, #14
 8001912:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0201 	bic.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192c:	2101      	movs	r1, #1
 800192e:	fa01 f202 	lsl.w	r2, r1, r2
 8001932:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001944:	7bfb      	ldrb	r3, [r7, #15]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001962:	2b02      	cmp	r3, #2
 8001964:	d005      	beq.n	8001972 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2204      	movs	r2, #4
 800196a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	73fb      	strb	r3, [r7, #15]
 8001970:	e051      	b.n	8001a16 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 020e 	bic.w	r2, r2, #14
 8001980:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0201 	bic.w	r2, r2, #1
 8001990:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a22      	ldr	r2, [pc, #136]	; (8001a20 <HAL_DMA_Abort_IT+0xd0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d029      	beq.n	80019f0 <HAL_DMA_Abort_IT+0xa0>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a20      	ldr	r2, [pc, #128]	; (8001a24 <HAL_DMA_Abort_IT+0xd4>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d022      	beq.n	80019ec <HAL_DMA_Abort_IT+0x9c>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a1f      	ldr	r2, [pc, #124]	; (8001a28 <HAL_DMA_Abort_IT+0xd8>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d01a      	beq.n	80019e6 <HAL_DMA_Abort_IT+0x96>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <HAL_DMA_Abort_IT+0xdc>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d012      	beq.n	80019e0 <HAL_DMA_Abort_IT+0x90>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a1c      	ldr	r2, [pc, #112]	; (8001a30 <HAL_DMA_Abort_IT+0xe0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d00a      	beq.n	80019da <HAL_DMA_Abort_IT+0x8a>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a1a      	ldr	r2, [pc, #104]	; (8001a34 <HAL_DMA_Abort_IT+0xe4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d102      	bne.n	80019d4 <HAL_DMA_Abort_IT+0x84>
 80019ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019d2:	e00e      	b.n	80019f2 <HAL_DMA_Abort_IT+0xa2>
 80019d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019d8:	e00b      	b.n	80019f2 <HAL_DMA_Abort_IT+0xa2>
 80019da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019de:	e008      	b.n	80019f2 <HAL_DMA_Abort_IT+0xa2>
 80019e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e4:	e005      	b.n	80019f2 <HAL_DMA_Abort_IT+0xa2>
 80019e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ea:	e002      	b.n	80019f2 <HAL_DMA_Abort_IT+0xa2>
 80019ec:	2310      	movs	r3, #16
 80019ee:	e000      	b.n	80019f2 <HAL_DMA_Abort_IT+0xa2>
 80019f0:	2301      	movs	r3, #1
 80019f2:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <HAL_DMA_Abort_IT+0xe8>)
 80019f4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	4798      	blx	r3
    } 
  }
  return status;
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40020008 	.word	0x40020008
 8001a24:	4002001c 	.word	0x4002001c
 8001a28:	40020030 	.word	0x40020030
 8001a2c:	40020044 	.word	0x40020044
 8001a30:	40020058 	.word	0x40020058
 8001a34:	4002006c 	.word	0x4002006c
 8001a38:	40020000 	.word	0x40020000

08001a3c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	2204      	movs	r2, #4
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d04f      	beq.n	8001b04 <HAL_DMA_IRQHandler+0xc8>
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d04a      	beq.n	8001b04 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0320 	and.w	r3, r3, #32
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d107      	bne.n	8001a8c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0204 	bic.w	r2, r2, #4
 8001a8a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a66      	ldr	r2, [pc, #408]	; (8001c2c <HAL_DMA_IRQHandler+0x1f0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d029      	beq.n	8001aea <HAL_DMA_IRQHandler+0xae>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a65      	ldr	r2, [pc, #404]	; (8001c30 <HAL_DMA_IRQHandler+0x1f4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d022      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0xaa>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a63      	ldr	r2, [pc, #396]	; (8001c34 <HAL_DMA_IRQHandler+0x1f8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d01a      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0xa4>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a62      	ldr	r2, [pc, #392]	; (8001c38 <HAL_DMA_IRQHandler+0x1fc>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d012      	beq.n	8001ada <HAL_DMA_IRQHandler+0x9e>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a60      	ldr	r2, [pc, #384]	; (8001c3c <HAL_DMA_IRQHandler+0x200>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d00a      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x98>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a5f      	ldr	r2, [pc, #380]	; (8001c40 <HAL_DMA_IRQHandler+0x204>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d102      	bne.n	8001ace <HAL_DMA_IRQHandler+0x92>
 8001ac8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001acc:	e00e      	b.n	8001aec <HAL_DMA_IRQHandler+0xb0>
 8001ace:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001ad2:	e00b      	b.n	8001aec <HAL_DMA_IRQHandler+0xb0>
 8001ad4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ad8:	e008      	b.n	8001aec <HAL_DMA_IRQHandler+0xb0>
 8001ada:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ade:	e005      	b.n	8001aec <HAL_DMA_IRQHandler+0xb0>
 8001ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae4:	e002      	b.n	8001aec <HAL_DMA_IRQHandler+0xb0>
 8001ae6:	2340      	movs	r3, #64	; 0x40
 8001ae8:	e000      	b.n	8001aec <HAL_DMA_IRQHandler+0xb0>
 8001aea:	2304      	movs	r3, #4
 8001aec:	4a55      	ldr	r2, [pc, #340]	; (8001c44 <HAL_DMA_IRQHandler+0x208>)
 8001aee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 8094 	beq.w	8001c22 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001b02:	e08e      	b.n	8001c22 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	2202      	movs	r2, #2
 8001b0a:	409a      	lsls	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d056      	beq.n	8001bc2 <HAL_DMA_IRQHandler+0x186>
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d051      	beq.n	8001bc2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0320 	and.w	r3, r3, #32
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10b      	bne.n	8001b44 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 020a 	bic.w	r2, r2, #10
 8001b3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a38      	ldr	r2, [pc, #224]	; (8001c2c <HAL_DMA_IRQHandler+0x1f0>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d029      	beq.n	8001ba2 <HAL_DMA_IRQHandler+0x166>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a37      	ldr	r2, [pc, #220]	; (8001c30 <HAL_DMA_IRQHandler+0x1f4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d022      	beq.n	8001b9e <HAL_DMA_IRQHandler+0x162>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a35      	ldr	r2, [pc, #212]	; (8001c34 <HAL_DMA_IRQHandler+0x1f8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d01a      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x15c>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a34      	ldr	r2, [pc, #208]	; (8001c38 <HAL_DMA_IRQHandler+0x1fc>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d012      	beq.n	8001b92 <HAL_DMA_IRQHandler+0x156>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a32      	ldr	r2, [pc, #200]	; (8001c3c <HAL_DMA_IRQHandler+0x200>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00a      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x150>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a31      	ldr	r2, [pc, #196]	; (8001c40 <HAL_DMA_IRQHandler+0x204>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d102      	bne.n	8001b86 <HAL_DMA_IRQHandler+0x14a>
 8001b80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b84:	e00e      	b.n	8001ba4 <HAL_DMA_IRQHandler+0x168>
 8001b86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b8a:	e00b      	b.n	8001ba4 <HAL_DMA_IRQHandler+0x168>
 8001b8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b90:	e008      	b.n	8001ba4 <HAL_DMA_IRQHandler+0x168>
 8001b92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b96:	e005      	b.n	8001ba4 <HAL_DMA_IRQHandler+0x168>
 8001b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b9c:	e002      	b.n	8001ba4 <HAL_DMA_IRQHandler+0x168>
 8001b9e:	2320      	movs	r3, #32
 8001ba0:	e000      	b.n	8001ba4 <HAL_DMA_IRQHandler+0x168>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	4a27      	ldr	r2, [pc, #156]	; (8001c44 <HAL_DMA_IRQHandler+0x208>)
 8001ba6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d034      	beq.n	8001c22 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001bc0:	e02f      	b.n	8001c22 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	2208      	movs	r2, #8
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d028      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x1e8>
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d023      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 020e 	bic.w	r2, r2, #14
 8001bea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bfa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d004      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	4798      	blx	r3
    }
  }
  return;
 8001c22:	bf00      	nop
 8001c24:	bf00      	nop
}
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40020008 	.word	0x40020008
 8001c30:	4002001c 	.word	0x4002001c
 8001c34:	40020030 	.word	0x40020030
 8001c38:	40020044 	.word	0x40020044
 8001c3c:	40020058 	.word	0x40020058
 8001c40:	4002006c 	.word	0x4002006c
 8001c44:	40020000 	.word	0x40020000

08001c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b08b      	sub	sp, #44	; 0x2c
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c52:	2300      	movs	r3, #0
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c56:	2300      	movs	r3, #0
 8001c58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c5a:	e169      	b.n	8001f30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	69fa      	ldr	r2, [r7, #28]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	f040 8158 	bne.w	8001f2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4a9a      	ldr	r2, [pc, #616]	; (8001ee8 <HAL_GPIO_Init+0x2a0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d05e      	beq.n	8001d42 <HAL_GPIO_Init+0xfa>
 8001c84:	4a98      	ldr	r2, [pc, #608]	; (8001ee8 <HAL_GPIO_Init+0x2a0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d875      	bhi.n	8001d76 <HAL_GPIO_Init+0x12e>
 8001c8a:	4a98      	ldr	r2, [pc, #608]	; (8001eec <HAL_GPIO_Init+0x2a4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d058      	beq.n	8001d42 <HAL_GPIO_Init+0xfa>
 8001c90:	4a96      	ldr	r2, [pc, #600]	; (8001eec <HAL_GPIO_Init+0x2a4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d86f      	bhi.n	8001d76 <HAL_GPIO_Init+0x12e>
 8001c96:	4a96      	ldr	r2, [pc, #600]	; (8001ef0 <HAL_GPIO_Init+0x2a8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d052      	beq.n	8001d42 <HAL_GPIO_Init+0xfa>
 8001c9c:	4a94      	ldr	r2, [pc, #592]	; (8001ef0 <HAL_GPIO_Init+0x2a8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d869      	bhi.n	8001d76 <HAL_GPIO_Init+0x12e>
 8001ca2:	4a94      	ldr	r2, [pc, #592]	; (8001ef4 <HAL_GPIO_Init+0x2ac>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d04c      	beq.n	8001d42 <HAL_GPIO_Init+0xfa>
 8001ca8:	4a92      	ldr	r2, [pc, #584]	; (8001ef4 <HAL_GPIO_Init+0x2ac>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d863      	bhi.n	8001d76 <HAL_GPIO_Init+0x12e>
 8001cae:	4a92      	ldr	r2, [pc, #584]	; (8001ef8 <HAL_GPIO_Init+0x2b0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d046      	beq.n	8001d42 <HAL_GPIO_Init+0xfa>
 8001cb4:	4a90      	ldr	r2, [pc, #576]	; (8001ef8 <HAL_GPIO_Init+0x2b0>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d85d      	bhi.n	8001d76 <HAL_GPIO_Init+0x12e>
 8001cba:	2b12      	cmp	r3, #18
 8001cbc:	d82a      	bhi.n	8001d14 <HAL_GPIO_Init+0xcc>
 8001cbe:	2b12      	cmp	r3, #18
 8001cc0:	d859      	bhi.n	8001d76 <HAL_GPIO_Init+0x12e>
 8001cc2:	a201      	add	r2, pc, #4	; (adr r2, 8001cc8 <HAL_GPIO_Init+0x80>)
 8001cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc8:	08001d43 	.word	0x08001d43
 8001ccc:	08001d1d 	.word	0x08001d1d
 8001cd0:	08001d2f 	.word	0x08001d2f
 8001cd4:	08001d71 	.word	0x08001d71
 8001cd8:	08001d77 	.word	0x08001d77
 8001cdc:	08001d77 	.word	0x08001d77
 8001ce0:	08001d77 	.word	0x08001d77
 8001ce4:	08001d77 	.word	0x08001d77
 8001ce8:	08001d77 	.word	0x08001d77
 8001cec:	08001d77 	.word	0x08001d77
 8001cf0:	08001d77 	.word	0x08001d77
 8001cf4:	08001d77 	.word	0x08001d77
 8001cf8:	08001d77 	.word	0x08001d77
 8001cfc:	08001d77 	.word	0x08001d77
 8001d00:	08001d77 	.word	0x08001d77
 8001d04:	08001d77 	.word	0x08001d77
 8001d08:	08001d77 	.word	0x08001d77
 8001d0c:	08001d25 	.word	0x08001d25
 8001d10:	08001d39 	.word	0x08001d39
 8001d14:	4a79      	ldr	r2, [pc, #484]	; (8001efc <HAL_GPIO_Init+0x2b4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d013      	beq.n	8001d42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d1a:	e02c      	b.n	8001d76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	623b      	str	r3, [r7, #32]
          break;
 8001d22:	e029      	b.n	8001d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	623b      	str	r3, [r7, #32]
          break;
 8001d2c:	e024      	b.n	8001d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	3308      	adds	r3, #8
 8001d34:	623b      	str	r3, [r7, #32]
          break;
 8001d36:	e01f      	b.n	8001d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	330c      	adds	r3, #12
 8001d3e:	623b      	str	r3, [r7, #32]
          break;
 8001d40:	e01a      	b.n	8001d78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d102      	bne.n	8001d50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	623b      	str	r3, [r7, #32]
          break;
 8001d4e:	e013      	b.n	8001d78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d105      	bne.n	8001d64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d58:	2308      	movs	r3, #8
 8001d5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69fa      	ldr	r2, [r7, #28]
 8001d60:	611a      	str	r2, [r3, #16]
          break;
 8001d62:	e009      	b.n	8001d78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d64:	2308      	movs	r3, #8
 8001d66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69fa      	ldr	r2, [r7, #28]
 8001d6c:	615a      	str	r2, [r3, #20]
          break;
 8001d6e:	e003      	b.n	8001d78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d70:	2300      	movs	r3, #0
 8001d72:	623b      	str	r3, [r7, #32]
          break;
 8001d74:	e000      	b.n	8001d78 <HAL_GPIO_Init+0x130>
          break;
 8001d76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	2bff      	cmp	r3, #255	; 0xff
 8001d7c:	d801      	bhi.n	8001d82 <HAL_GPIO_Init+0x13a>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	e001      	b.n	8001d86 <HAL_GPIO_Init+0x13e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3304      	adds	r3, #4
 8001d86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	2bff      	cmp	r3, #255	; 0xff
 8001d8c:	d802      	bhi.n	8001d94 <HAL_GPIO_Init+0x14c>
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	e002      	b.n	8001d9a <HAL_GPIO_Init+0x152>
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	3b08      	subs	r3, #8
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	210f      	movs	r1, #15
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	fa01 f303 	lsl.w	r3, r1, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	401a      	ands	r2, r3
 8001dac:	6a39      	ldr	r1, [r7, #32]
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	431a      	orrs	r2, r3
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80b1 	beq.w	8001f2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dc8:	4b4d      	ldr	r3, [pc, #308]	; (8001f00 <HAL_GPIO_Init+0x2b8>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	4a4c      	ldr	r2, [pc, #304]	; (8001f00 <HAL_GPIO_Init+0x2b8>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6193      	str	r3, [r2, #24]
 8001dd4:	4b4a      	ldr	r3, [pc, #296]	; (8001f00 <HAL_GPIO_Init+0x2b8>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001de0:	4a48      	ldr	r2, [pc, #288]	; (8001f04 <HAL_GPIO_Init+0x2bc>)
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	089b      	lsrs	r3, r3, #2
 8001de6:	3302      	adds	r3, #2
 8001de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	220f      	movs	r2, #15
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	4013      	ands	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a40      	ldr	r2, [pc, #256]	; (8001f08 <HAL_GPIO_Init+0x2c0>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d013      	beq.n	8001e34 <HAL_GPIO_Init+0x1ec>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a3f      	ldr	r2, [pc, #252]	; (8001f0c <HAL_GPIO_Init+0x2c4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d00d      	beq.n	8001e30 <HAL_GPIO_Init+0x1e8>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a3e      	ldr	r2, [pc, #248]	; (8001f10 <HAL_GPIO_Init+0x2c8>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d007      	beq.n	8001e2c <HAL_GPIO_Init+0x1e4>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a3d      	ldr	r2, [pc, #244]	; (8001f14 <HAL_GPIO_Init+0x2cc>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d101      	bne.n	8001e28 <HAL_GPIO_Init+0x1e0>
 8001e24:	2303      	movs	r3, #3
 8001e26:	e006      	b.n	8001e36 <HAL_GPIO_Init+0x1ee>
 8001e28:	2304      	movs	r3, #4
 8001e2a:	e004      	b.n	8001e36 <HAL_GPIO_Init+0x1ee>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e002      	b.n	8001e36 <HAL_GPIO_Init+0x1ee>
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <HAL_GPIO_Init+0x1ee>
 8001e34:	2300      	movs	r3, #0
 8001e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e38:	f002 0203 	and.w	r2, r2, #3
 8001e3c:	0092      	lsls	r2, r2, #2
 8001e3e:	4093      	lsls	r3, r2
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e46:	492f      	ldr	r1, [pc, #188]	; (8001f04 <HAL_GPIO_Init+0x2bc>)
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d006      	beq.n	8001e6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e60:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	492c      	ldr	r1, [pc, #176]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	600b      	str	r3, [r1, #0]
 8001e6c:	e006      	b.n	8001e7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e6e:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	4928      	ldr	r1, [pc, #160]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d006      	beq.n	8001e96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e88:	4b23      	ldr	r3, [pc, #140]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	4922      	ldr	r1, [pc, #136]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	604b      	str	r3, [r1, #4]
 8001e94:	e006      	b.n	8001ea4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e96:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	491e      	ldr	r1, [pc, #120]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d006      	beq.n	8001ebe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001eb0:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	4918      	ldr	r1, [pc, #96]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	608b      	str	r3, [r1, #8]
 8001ebc:	e006      	b.n	8001ecc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ebe:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	4914      	ldr	r1, [pc, #80]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d021      	beq.n	8001f1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	490e      	ldr	r1, [pc, #56]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	60cb      	str	r3, [r1, #12]
 8001ee4:	e021      	b.n	8001f2a <HAL_GPIO_Init+0x2e2>
 8001ee6:	bf00      	nop
 8001ee8:	10320000 	.word	0x10320000
 8001eec:	10310000 	.word	0x10310000
 8001ef0:	10220000 	.word	0x10220000
 8001ef4:	10210000 	.word	0x10210000
 8001ef8:	10120000 	.word	0x10120000
 8001efc:	10110000 	.word	0x10110000
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40010000 	.word	0x40010000
 8001f08:	40010800 	.word	0x40010800
 8001f0c:	40010c00 	.word	0x40010c00
 8001f10:	40011000 	.word	0x40011000
 8001f14:	40011400 	.word	0x40011400
 8001f18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_GPIO_Init+0x304>)
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	4909      	ldr	r1, [pc, #36]	; (8001f4c <HAL_GPIO_Init+0x304>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f47f ae8e 	bne.w	8001c5c <HAL_GPIO_Init+0x14>
  }
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	372c      	adds	r7, #44	; 0x2c
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	40010400 	.word	0x40010400

08001f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	807b      	strh	r3, [r7, #2]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f60:	787b      	ldrb	r3, [r7, #1]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f66:	887a      	ldrh	r2, [r7, #2]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f6c:	e003      	b.n	8001f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f6e:	887b      	ldrh	r3, [r7, #2]
 8001f70:	041a      	lsls	r2, r3, #16
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	611a      	str	r2, [r3, #16]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	601a      	str	r2, [r3, #0]
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	420e0020 	.word	0x420e0020

08001f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e272      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 8087 	beq.w	80020c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fb8:	4b92      	ldr	r3, [pc, #584]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 030c 	and.w	r3, r3, #12
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d00c      	beq.n	8001fde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fc4:	4b8f      	ldr	r3, [pc, #572]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 030c 	and.w	r3, r3, #12
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d112      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x5e>
 8001fd0:	4b8c      	ldr	r3, [pc, #560]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fdc:	d10b      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fde:	4b89      	ldr	r3, [pc, #548]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d06c      	beq.n	80020c4 <HAL_RCC_OscConfig+0x12c>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d168      	bne.n	80020c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e24c      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffe:	d106      	bne.n	800200e <HAL_RCC_OscConfig+0x76>
 8002000:	4b80      	ldr	r3, [pc, #512]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a7f      	ldr	r2, [pc, #508]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	e02e      	b.n	800206c <HAL_RCC_OscConfig+0xd4>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10c      	bne.n	8002030 <HAL_RCC_OscConfig+0x98>
 8002016:	4b7b      	ldr	r3, [pc, #492]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a7a      	ldr	r2, [pc, #488]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 800201c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	4b78      	ldr	r3, [pc, #480]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a77      	ldr	r2, [pc, #476]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002028:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e01d      	b.n	800206c <HAL_RCC_OscConfig+0xd4>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002038:	d10c      	bne.n	8002054 <HAL_RCC_OscConfig+0xbc>
 800203a:	4b72      	ldr	r3, [pc, #456]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a71      	ldr	r2, [pc, #452]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	4b6f      	ldr	r3, [pc, #444]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a6e      	ldr	r2, [pc, #440]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 800204c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	e00b      	b.n	800206c <HAL_RCC_OscConfig+0xd4>
 8002054:	4b6b      	ldr	r3, [pc, #428]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a6a      	ldr	r2, [pc, #424]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 800205a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	4b68      	ldr	r3, [pc, #416]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a67      	ldr	r2, [pc, #412]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800206a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d013      	beq.n	800209c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7ff fac0 	bl	80015f8 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800207c:	f7ff fabc 	bl	80015f8 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	; 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e200      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	4b5d      	ldr	r3, [pc, #372]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0xe4>
 800209a:	e014      	b.n	80020c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7ff faac 	bl	80015f8 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a4:	f7ff faa8 	bl	80015f8 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b64      	cmp	r3, #100	; 0x64
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e1ec      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b6:	4b53      	ldr	r3, [pc, #332]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x10c>
 80020c2:	e000      	b.n	80020c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d063      	beq.n	800219a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020d2:	4b4c      	ldr	r3, [pc, #304]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00b      	beq.n	80020f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020de:	4b49      	ldr	r3, [pc, #292]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d11c      	bne.n	8002124 <HAL_RCC_OscConfig+0x18c>
 80020ea:	4b46      	ldr	r3, [pc, #280]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d116      	bne.n	8002124 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f6:	4b43      	ldr	r3, [pc, #268]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d005      	beq.n	800210e <HAL_RCC_OscConfig+0x176>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d001      	beq.n	800210e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e1c0      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210e:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4939      	ldr	r1, [pc, #228]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002122:	e03a      	b.n	800219a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d020      	beq.n	800216e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800212c:	4b36      	ldr	r3, [pc, #216]	; (8002208 <HAL_RCC_OscConfig+0x270>)
 800212e:	2201      	movs	r2, #1
 8002130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002132:	f7ff fa61 	bl	80015f8 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800213a:	f7ff fa5d 	bl	80015f8 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e1a1      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214c:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002158:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4927      	ldr	r1, [pc, #156]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002168:	4313      	orrs	r3, r2
 800216a:	600b      	str	r3, [r1, #0]
 800216c:	e015      	b.n	800219a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216e:	4b26      	ldr	r3, [pc, #152]	; (8002208 <HAL_RCC_OscConfig+0x270>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7ff fa40 	bl	80015f8 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800217c:	f7ff fa3c 	bl	80015f8 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e180      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218e:	4b1d      	ldr	r3, [pc, #116]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d03a      	beq.n	800221c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d019      	beq.n	80021e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ae:	4b17      	ldr	r3, [pc, #92]	; (800220c <HAL_RCC_OscConfig+0x274>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b4:	f7ff fa20 	bl	80015f8 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021bc:	f7ff fa1c 	bl	80015f8 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e160      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ce:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021da:	2001      	movs	r0, #1
 80021dc:	f000 fad8 	bl	8002790 <RCC_Delay>
 80021e0:	e01c      	b.n	800221c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <HAL_RCC_OscConfig+0x274>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e8:	f7ff fa06 	bl	80015f8 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ee:	e00f      	b.n	8002210 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f0:	f7ff fa02 	bl	80015f8 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d908      	bls.n	8002210 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e146      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
 8002208:	42420000 	.word	0x42420000
 800220c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002210:	4b92      	ldr	r3, [pc, #584]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1e9      	bne.n	80021f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 80a6 	beq.w	8002376 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800222a:	2300      	movs	r3, #0
 800222c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800222e:	4b8b      	ldr	r3, [pc, #556]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10d      	bne.n	8002256 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800223a:	4b88      	ldr	r3, [pc, #544]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	4a87      	ldr	r2, [pc, #540]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002244:	61d3      	str	r3, [r2, #28]
 8002246:	4b85      	ldr	r3, [pc, #532]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002252:	2301      	movs	r3, #1
 8002254:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002256:	4b82      	ldr	r3, [pc, #520]	; (8002460 <HAL_RCC_OscConfig+0x4c8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d118      	bne.n	8002294 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002262:	4b7f      	ldr	r3, [pc, #508]	; (8002460 <HAL_RCC_OscConfig+0x4c8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a7e      	ldr	r2, [pc, #504]	; (8002460 <HAL_RCC_OscConfig+0x4c8>)
 8002268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226e:	f7ff f9c3 	bl	80015f8 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002276:	f7ff f9bf 	bl	80015f8 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b64      	cmp	r3, #100	; 0x64
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e103      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002288:	4b75      	ldr	r3, [pc, #468]	; (8002460 <HAL_RCC_OscConfig+0x4c8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0f0      	beq.n	8002276 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d106      	bne.n	80022aa <HAL_RCC_OscConfig+0x312>
 800229c:	4b6f      	ldr	r3, [pc, #444]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	4a6e      	ldr	r2, [pc, #440]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	6213      	str	r3, [r2, #32]
 80022a8:	e02d      	b.n	8002306 <HAL_RCC_OscConfig+0x36e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10c      	bne.n	80022cc <HAL_RCC_OscConfig+0x334>
 80022b2:	4b6a      	ldr	r3, [pc, #424]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	4a69      	ldr	r2, [pc, #420]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	6213      	str	r3, [r2, #32]
 80022be:	4b67      	ldr	r3, [pc, #412]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4a66      	ldr	r2, [pc, #408]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	f023 0304 	bic.w	r3, r3, #4
 80022c8:	6213      	str	r3, [r2, #32]
 80022ca:	e01c      	b.n	8002306 <HAL_RCC_OscConfig+0x36e>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b05      	cmp	r3, #5
 80022d2:	d10c      	bne.n	80022ee <HAL_RCC_OscConfig+0x356>
 80022d4:	4b61      	ldr	r3, [pc, #388]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	4a60      	ldr	r2, [pc, #384]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022da:	f043 0304 	orr.w	r3, r3, #4
 80022de:	6213      	str	r3, [r2, #32]
 80022e0:	4b5e      	ldr	r3, [pc, #376]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	4a5d      	ldr	r2, [pc, #372]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	6213      	str	r3, [r2, #32]
 80022ec:	e00b      	b.n	8002306 <HAL_RCC_OscConfig+0x36e>
 80022ee:	4b5b      	ldr	r3, [pc, #364]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	4a5a      	ldr	r2, [pc, #360]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	f023 0301 	bic.w	r3, r3, #1
 80022f8:	6213      	str	r3, [r2, #32]
 80022fa:	4b58      	ldr	r3, [pc, #352]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	4a57      	ldr	r2, [pc, #348]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002300:	f023 0304 	bic.w	r3, r3, #4
 8002304:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d015      	beq.n	800233a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230e:	f7ff f973 	bl	80015f8 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002314:	e00a      	b.n	800232c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002316:	f7ff f96f 	bl	80015f8 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	f241 3288 	movw	r2, #5000	; 0x1388
 8002324:	4293      	cmp	r3, r2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e0b1      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232c:	4b4b      	ldr	r3, [pc, #300]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0ee      	beq.n	8002316 <HAL_RCC_OscConfig+0x37e>
 8002338:	e014      	b.n	8002364 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233a:	f7ff f95d 	bl	80015f8 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002340:	e00a      	b.n	8002358 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002342:	f7ff f959 	bl	80015f8 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002350:	4293      	cmp	r3, r2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e09b      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002358:	4b40      	ldr	r3, [pc, #256]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1ee      	bne.n	8002342 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002364:	7dfb      	ldrb	r3, [r7, #23]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d105      	bne.n	8002376 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800236a:	4b3c      	ldr	r3, [pc, #240]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	4a3b      	ldr	r2, [pc, #236]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002374:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 8087 	beq.w	800248e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002380:	4b36      	ldr	r3, [pc, #216]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 030c 	and.w	r3, r3, #12
 8002388:	2b08      	cmp	r3, #8
 800238a:	d061      	beq.n	8002450 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	2b02      	cmp	r3, #2
 8002392:	d146      	bne.n	8002422 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002394:	4b33      	ldr	r3, [pc, #204]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239a:	f7ff f92d 	bl	80015f8 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a2:	f7ff f929 	bl	80015f8 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e06d      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b4:	4b29      	ldr	r3, [pc, #164]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1f0      	bne.n	80023a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c8:	d108      	bne.n	80023dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023ca:	4b24      	ldr	r3, [pc, #144]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	4921      	ldr	r1, [pc, #132]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023dc:	4b1f      	ldr	r3, [pc, #124]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a19      	ldr	r1, [r3, #32]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	430b      	orrs	r3, r1
 80023ee:	491b      	ldr	r1, [pc, #108]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fa:	f7ff f8fd 	bl	80015f8 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002402:	f7ff f8f9 	bl	80015f8 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e03d      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002414:	4b11      	ldr	r3, [pc, #68]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0f0      	beq.n	8002402 <HAL_RCC_OscConfig+0x46a>
 8002420:	e035      	b.n	800248e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7ff f8e6 	bl	80015f8 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002430:	f7ff f8e2 	bl	80015f8 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e026      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_OscConfig+0x498>
 800244e:	e01e      	b.n	800248e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d107      	bne.n	8002468 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e019      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
 800245c:	40021000 	.word	0x40021000
 8002460:	40007000 	.word	0x40007000
 8002464:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_RCC_OscConfig+0x500>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	429a      	cmp	r2, r3
 800247a:	d106      	bne.n	800248a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002486:	429a      	cmp	r2, r3
 8002488:	d001      	beq.n	800248e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000

0800249c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0d0      	b.n	8002652 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024b0:	4b6a      	ldr	r3, [pc, #424]	; (800265c <HAL_RCC_ClockConfig+0x1c0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d910      	bls.n	80024e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b67      	ldr	r3, [pc, #412]	; (800265c <HAL_RCC_ClockConfig+0x1c0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 0207 	bic.w	r2, r3, #7
 80024c6:	4965      	ldr	r1, [pc, #404]	; (800265c <HAL_RCC_ClockConfig+0x1c0>)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ce:	4b63      	ldr	r3, [pc, #396]	; (800265c <HAL_RCC_ClockConfig+0x1c0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0b8      	b.n	8002652 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d020      	beq.n	800252e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024f8:	4b59      	ldr	r3, [pc, #356]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	4a58      	ldr	r2, [pc, #352]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002502:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002510:	4b53      	ldr	r3, [pc, #332]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4a52      	ldr	r2, [pc, #328]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 8002516:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800251a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800251c:	4b50      	ldr	r3, [pc, #320]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	494d      	ldr	r1, [pc, #308]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	4313      	orrs	r3, r2
 800252c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d040      	beq.n	80025bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d107      	bne.n	8002552 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	4b47      	ldr	r3, [pc, #284]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d115      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e07f      	b.n	8002652 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d107      	bne.n	800256a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255a:	4b41      	ldr	r3, [pc, #260]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d109      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e073      	b.n	8002652 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256a:	4b3d      	ldr	r3, [pc, #244]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e06b      	b.n	8002652 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800257a:	4b39      	ldr	r3, [pc, #228]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f023 0203 	bic.w	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4936      	ldr	r1, [pc, #216]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800258c:	f7ff f834 	bl	80015f8 <HAL_GetTick>
 8002590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	e00a      	b.n	80025aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002594:	f7ff f830 	bl	80015f8 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e053      	b.n	8002652 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 020c 	and.w	r2, r3, #12
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d1eb      	bne.n	8002594 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025bc:	4b27      	ldr	r3, [pc, #156]	; (800265c <HAL_RCC_ClockConfig+0x1c0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d210      	bcs.n	80025ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b24      	ldr	r3, [pc, #144]	; (800265c <HAL_RCC_ClockConfig+0x1c0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 0207 	bic.w	r2, r3, #7
 80025d2:	4922      	ldr	r1, [pc, #136]	; (800265c <HAL_RCC_ClockConfig+0x1c0>)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <HAL_RCC_ClockConfig+0x1c0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d001      	beq.n	80025ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e032      	b.n	8002652 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f8:	4b19      	ldr	r3, [pc, #100]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4916      	ldr	r1, [pc, #88]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	4313      	orrs	r3, r2
 8002608:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002616:	4b12      	ldr	r3, [pc, #72]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	490e      	ldr	r1, [pc, #56]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	4313      	orrs	r3, r2
 8002628:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800262a:	f000 f821 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 800262e:	4602      	mov	r2, r0
 8002630:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	490a      	ldr	r1, [pc, #40]	; (8002664 <HAL_RCC_ClockConfig+0x1c8>)
 800263c:	5ccb      	ldrb	r3, [r1, r3]
 800263e:	fa22 f303 	lsr.w	r3, r2, r3
 8002642:	4a09      	ldr	r2, [pc, #36]	; (8002668 <HAL_RCC_ClockConfig+0x1cc>)
 8002644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002646:	4b09      	ldr	r3, [pc, #36]	; (800266c <HAL_RCC_ClockConfig+0x1d0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe ff92 	bl	8001574 <HAL_InitTick>

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40022000 	.word	0x40022000
 8002660:	40021000 	.word	0x40021000
 8002664:	080081f8 	.word	0x080081f8
 8002668:	2000001c 	.word	0x2000001c
 800266c:	20000020 	.word	0x20000020

08002670 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002670:	b490      	push	{r4, r7}
 8002672:	b08a      	sub	sp, #40	; 0x28
 8002674:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002676:	4b29      	ldr	r3, [pc, #164]	; (800271c <HAL_RCC_GetSysClockFreq+0xac>)
 8002678:	1d3c      	adds	r4, r7, #4
 800267a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800267c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002680:	f240 2301 	movw	r3, #513	; 0x201
 8002684:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
 800268a:	2300      	movs	r3, #0
 800268c:	61bb      	str	r3, [r7, #24]
 800268e:	2300      	movs	r3, #0
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002696:	2300      	movs	r3, #0
 8002698:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800269a:	4b21      	ldr	r3, [pc, #132]	; (8002720 <HAL_RCC_GetSysClockFreq+0xb0>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d002      	beq.n	80026b0 <HAL_RCC_GetSysClockFreq+0x40>
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d003      	beq.n	80026b6 <HAL_RCC_GetSysClockFreq+0x46>
 80026ae:	e02b      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026b0:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026b2:	623b      	str	r3, [r7, #32]
      break;
 80026b4:	e02b      	b.n	800270e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	0c9b      	lsrs	r3, r3, #18
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	3328      	adds	r3, #40	; 0x28
 80026c0:	443b      	add	r3, r7
 80026c2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026c6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d012      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026d2:	4b13      	ldr	r3, [pc, #76]	; (8002720 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	0c5b      	lsrs	r3, r3, #17
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	3328      	adds	r3, #40	; 0x28
 80026de:	443b      	add	r3, r7
 80026e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	4a0e      	ldr	r2, [pc, #56]	; (8002724 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026ea:	fb03 f202 	mul.w	r2, r3, r2
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
 80026f6:	e004      	b.n	8002702 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	4a0b      	ldr	r2, [pc, #44]	; (8002728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026fc:	fb02 f303 	mul.w	r3, r2, r3
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	623b      	str	r3, [r7, #32]
      break;
 8002706:	e002      	b.n	800270e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_RCC_GetSysClockFreq+0xb4>)
 800270a:	623b      	str	r3, [r7, #32]
      break;
 800270c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800270e:	6a3b      	ldr	r3, [r7, #32]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3728      	adds	r7, #40	; 0x28
 8002714:	46bd      	mov	sp, r7
 8002716:	bc90      	pop	{r4, r7}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	08008190 	.word	0x08008190
 8002720:	40021000 	.word	0x40021000
 8002724:	007a1200 	.word	0x007a1200
 8002728:	003d0900 	.word	0x003d0900

0800272c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002730:	4b02      	ldr	r3, [pc, #8]	; (800273c <HAL_RCC_GetHCLKFreq+0x10>)
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	4618      	mov	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr
 800273c:	2000001c 	.word	0x2000001c

08002740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002744:	f7ff fff2 	bl	800272c <HAL_RCC_GetHCLKFreq>
 8002748:	4602      	mov	r2, r0
 800274a:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	0a1b      	lsrs	r3, r3, #8
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	4903      	ldr	r1, [pc, #12]	; (8002764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002756:	5ccb      	ldrb	r3, [r1, r3]
 8002758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800275c:	4618      	mov	r0, r3
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40021000 	.word	0x40021000
 8002764:	08008208 	.word	0x08008208

08002768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800276c:	f7ff ffde 	bl	800272c <HAL_RCC_GetHCLKFreq>
 8002770:	4602      	mov	r2, r0
 8002772:	4b05      	ldr	r3, [pc, #20]	; (8002788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	0adb      	lsrs	r3, r3, #11
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	4903      	ldr	r1, [pc, #12]	; (800278c <HAL_RCC_GetPCLK2Freq+0x24>)
 800277e:	5ccb      	ldrb	r3, [r1, r3]
 8002780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002784:	4618      	mov	r0, r3
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40021000 	.word	0x40021000
 800278c:	08008208 	.word	0x08008208

08002790 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002798:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <RCC_Delay+0x34>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <RCC_Delay+0x38>)
 800279e:	fba2 2303 	umull	r2, r3, r2, r3
 80027a2:	0a5b      	lsrs	r3, r3, #9
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	fb02 f303 	mul.w	r3, r2, r3
 80027aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027ac:	bf00      	nop
  }
  while (Delay --);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1e5a      	subs	r2, r3, #1
 80027b2:	60fa      	str	r2, [r7, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f9      	bne.n	80027ac <RCC_Delay+0x1c>
}
 80027b8:	bf00      	nop
 80027ba:	bf00      	nop
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr
 80027c4:	2000001c 	.word	0x2000001c
 80027c8:	10624dd3 	.word	0x10624dd3

080027cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d07d      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80027e8:	2300      	movs	r3, #0
 80027ea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ec:	4b4f      	ldr	r3, [pc, #316]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10d      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f8:	4b4c      	ldr	r3, [pc, #304]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	4a4b      	ldr	r2, [pc, #300]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002802:	61d3      	str	r3, [r2, #28]
 8002804:	4b49      	ldr	r3, [pc, #292]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002810:	2301      	movs	r3, #1
 8002812:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002814:	4b46      	ldr	r3, [pc, #280]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d118      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002820:	4b43      	ldr	r3, [pc, #268]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a42      	ldr	r2, [pc, #264]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800282c:	f7fe fee4 	bl	80015f8 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002832:	e008      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002834:	f7fe fee0 	bl	80015f8 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b64      	cmp	r3, #100	; 0x64
 8002840:	d901      	bls.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e06d      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002846:	4b3a      	ldr	r3, [pc, #232]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002852:	4b36      	ldr	r3, [pc, #216]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800285a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d02e      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	429a      	cmp	r2, r3
 800286e:	d027      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002870:	4b2e      	ldr	r3, [pc, #184]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002878:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800287a:	4b2e      	ldr	r3, [pc, #184]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800287c:	2201      	movs	r2, #1
 800287e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002880:	4b2c      	ldr	r3, [pc, #176]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002886:	4a29      	ldr	r2, [pc, #164]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d014      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002896:	f7fe feaf 	bl	80015f8 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289c:	e00a      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289e:	f7fe feab 	bl	80015f8 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e036      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b4:	4b1d      	ldr	r3, [pc, #116]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0ee      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028c0:	4b1a      	ldr	r3, [pc, #104]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4917      	ldr	r1, [pc, #92]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028d2:	7dfb      	ldrb	r3, [r7, #23]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d105      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d8:	4b14      	ldr	r3, [pc, #80]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	4a13      	ldr	r2, [pc, #76]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028f0:	4b0e      	ldr	r3, [pc, #56]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	490b      	ldr	r1, [pc, #44]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	2b00      	cmp	r3, #0
 800290c:	d008      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800290e:	4b07      	ldr	r3, [pc, #28]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	4904      	ldr	r1, [pc, #16]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291c:	4313      	orrs	r3, r2
 800291e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40021000 	.word	0x40021000
 8002930:	40007000 	.word	0x40007000
 8002934:	42420440 	.word	0x42420440

08002938 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b08d      	sub	sp, #52	; 0x34
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002940:	4b58      	ldr	r3, [pc, #352]	; (8002aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002942:	f107 040c 	add.w	r4, r7, #12
 8002946:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002948:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800294c:	f240 2301 	movw	r3, #513	; 0x201
 8002950:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
 8002956:	2300      	movs	r3, #0
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800295a:	2300      	movs	r3, #0
 800295c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	2300      	movs	r3, #0
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b10      	cmp	r3, #16
 800296a:	d00a      	beq.n	8002982 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b10      	cmp	r3, #16
 8002970:	f200 808e 	bhi.w	8002a90 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d049      	beq.n	8002a0e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b02      	cmp	r3, #2
 800297e:	d079      	beq.n	8002a74 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002980:	e086      	b.n	8002a90 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002982:	4b49      	ldr	r3, [pc, #292]	; (8002aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002988:	4b47      	ldr	r3, [pc, #284]	; (8002aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d07f      	beq.n	8002a94 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	0c9b      	lsrs	r3, r3, #18
 8002998:	f003 030f 	and.w	r3, r3, #15
 800299c:	3330      	adds	r3, #48	; 0x30
 800299e:	443b      	add	r3, r7
 80029a0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029a4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d017      	beq.n	80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029b0:	4b3d      	ldr	r3, [pc, #244]	; (8002aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	0c5b      	lsrs	r3, r3, #17
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	3330      	adds	r3, #48	; 0x30
 80029bc:	443b      	add	r3, r7
 80029be:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00d      	beq.n	80029ea <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80029ce:	4a37      	ldr	r2, [pc, #220]	; (8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	fb02 f303 	mul.w	r3, r2, r3
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029de:	e004      	b.n	80029ea <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	4a33      	ldr	r2, [pc, #204]	; (8002ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80029e4:	fb02 f303 	mul.w	r3, r2, r3
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80029ea:	4b2f      	ldr	r3, [pc, #188]	; (8002aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029f6:	d102      	bne.n	80029fe <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80029f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80029fc:	e04a      	b.n	8002a94 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80029fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	4a2c      	ldr	r2, [pc, #176]	; (8002ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002a04:	fba2 2303 	umull	r2, r3, r2, r3
 8002a08:	085b      	lsrs	r3, r3, #1
 8002a0a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002a0c:	e042      	b.n	8002a94 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8002a0e:	4b26      	ldr	r3, [pc, #152]	; (8002aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a1e:	d108      	bne.n	8002a32 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8002a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a30:	e01f      	b.n	8002a72 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a3c:	d109      	bne.n	8002a52 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8002a3e:	4b1a      	ldr	r3, [pc, #104]	; (8002aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8002a4a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a50:	e00f      	b.n	8002a72 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a5c:	d11c      	bne.n	8002a98 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002a5e:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d016      	beq.n	8002a98 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8002a6a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002a6e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002a70:	e012      	b.n	8002a98 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002a72:	e011      	b.n	8002a98 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002a74:	f7ff fe78 	bl	8002768 <HAL_RCC_GetPCLK2Freq>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	0b9b      	lsrs	r3, r3, #14
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	3301      	adds	r3, #1
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002a8e:	e004      	b.n	8002a9a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002a90:	bf00      	nop
 8002a92:	e002      	b.n	8002a9a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002a94:	bf00      	nop
 8002a96:	e000      	b.n	8002a9a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002a98:	bf00      	nop
    }
  }
  return (frequency);
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3734      	adds	r7, #52	; 0x34
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd90      	pop	{r4, r7, pc}
 8002aa4:	080081a0 	.word	0x080081a0
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	007a1200 	.word	0x007a1200
 8002ab0:	003d0900 	.word	0x003d0900
 8002ab4:	aaaaaaab 	.word	0xaaaaaaab

08002ab8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e084      	b.n	8002bd8 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	7c5b      	ldrb	r3, [r3, #17]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d105      	bne.n	8002ae4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7fe fa8c 	bl	8000ffc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f9c8 	bl	8002e80 <HAL_RTC_WaitForSynchro>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d004      	beq.n	8002b00 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2204      	movs	r2, #4
 8002afa:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e06b      	b.n	8002bd8 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 fa81 	bl	8003008 <RTC_EnterInitMode>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d004      	beq.n	8002b16 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2204      	movs	r2, #4
 8002b10:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e060      	b.n	8002bd8 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0207 	bic.w	r2, r2, #7
 8002b24:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002b2e:	4b2c      	ldr	r3, [pc, #176]	; (8002be0 <HAL_RTC_Init+0x128>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a2b      	ldr	r2, [pc, #172]	; (8002be0 <HAL_RTC_Init+0x128>)
 8002b34:	f023 0301 	bic.w	r3, r3, #1
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002b3a:	4b29      	ldr	r3, [pc, #164]	; (8002be0 <HAL_RTC_Init+0x128>)
 8002b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	4926      	ldr	r1, [pc, #152]	; (8002be0 <HAL_RTC_Init+0x128>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b54:	d003      	beq.n	8002b5e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	e00e      	b.n	8002b7c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002b5e:	2001      	movs	r0, #1
 8002b60:	f7ff feea 	bl	8002938 <HAL_RCCEx_GetPeriphCLKFreq>
 8002b64:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d104      	bne.n	8002b76 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2204      	movs	r2, #4
 8002b70:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e030      	b.n	8002bd8 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f023 010f 	bic.w	r1, r3, #15
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	0c1a      	lsrs	r2, r3, #16
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	0c1b      	lsrs	r3, r3, #16
 8002b9a:	041b      	lsls	r3, r3, #16
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	b291      	uxth	r1, r2
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fa55 	bl	8003058 <RTC_ExitInitMode>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d004      	beq.n	8002bbe <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2204      	movs	r2, #4
 8002bb8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e00c      	b.n	8002bd8 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
  }
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40006c00 	.word	0x40006c00

08002be4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002be4:	b590      	push	{r4, r7, lr}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <HAL_RTC_SetTime+0x20>
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e080      	b.n	8002d0a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	7c1b      	ldrb	r3, [r3, #16]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_RTC_SetTime+0x30>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e07a      	b.n	8002d0a <HAL_RTC_SetTime+0x126>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2201      	movs	r2, #1
 8002c18:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d113      	bne.n	8002c4e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002c30:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	785b      	ldrb	r3, [r3, #1]
 8002c38:	4619      	mov	r1, r3
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	1a5b      	subs	r3, r3, r1
 8002c40:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002c42:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002c48:	4413      	add	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	e01e      	b.n	8002c8c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fa28 	bl	80030a8 <RTC_Bcd2ToByte>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002c60:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	785b      	ldrb	r3, [r3, #1]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 fa1d 	bl	80030a8 <RTC_Bcd2ToByte>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	461a      	mov	r2, r3
 8002c72:	4613      	mov	r3, r2
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002c7a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	789b      	ldrb	r3, [r3, #2]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 fa11 	bl	80030a8 <RTC_Bcd2ToByte>
 8002c86:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002c88:	4423      	add	r3, r4
 8002c8a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002c8c:	6979      	ldr	r1, [r7, #20]
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 f953 	bl	8002f3a <RTC_WriteTimeCounter>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d007      	beq.n	8002caa <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2204      	movs	r2, #4
 8002c9e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e02f      	b.n	8002d0a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0205 	bic.w	r2, r2, #5
 8002cb8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 f964 	bl	8002f88 <RTC_ReadAlarmCounter>
 8002cc0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc8:	d018      	beq.n	8002cfc <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d214      	bcs.n	8002cfc <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002cd8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002cdc:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002cde:	6939      	ldr	r1, [r7, #16]
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f96a 	bl	8002fba <RTC_WriteAlarmCounter>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d007      	beq.n	8002cfc <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2204      	movs	r2, #4
 8002cf0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e006      	b.n	8002d0a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002d08:	2300      	movs	r3, #0
  }
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	371c      	adds	r7, #28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd90      	pop	{r4, r7, pc}
	...

08002d14 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	61fb      	str	r3, [r7, #28]
 8002d24:	2300      	movs	r3, #0
 8002d26:	61bb      	str	r3, [r7, #24]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <HAL_RTC_SetDate+0x24>
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e097      	b.n	8002e6c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	7c1b      	ldrb	r3, [r3, #16]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_RTC_SetDate+0x34>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e091      	b.n	8002e6c <HAL_RTC_SetDate+0x158>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2202      	movs	r2, #2
 8002d52:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10c      	bne.n	8002d74 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	78da      	ldrb	r2, [r3, #3]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	785a      	ldrb	r2, [r3, #1]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	789a      	ldrb	r2, [r3, #2]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	739a      	strb	r2, [r3, #14]
 8002d72:	e01a      	b.n	8002daa <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	78db      	ldrb	r3, [r3, #3]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 f995 	bl	80030a8 <RTC_Bcd2ToByte>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	461a      	mov	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	785b      	ldrb	r3, [r3, #1]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 f98c 	bl	80030a8 <RTC_Bcd2ToByte>
 8002d90:	4603      	mov	r3, r0
 8002d92:	461a      	mov	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	789b      	ldrb	r3, [r3, #2]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 f983 	bl	80030a8 <RTC_Bcd2ToByte>
 8002da2:	4603      	mov	r3, r0
 8002da4:	461a      	mov	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	7bdb      	ldrb	r3, [r3, #15]
 8002dae:	4618      	mov	r0, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	7b59      	ldrb	r1, [r3, #13]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	7b9b      	ldrb	r3, [r3, #14]
 8002db8:	461a      	mov	r2, r3
 8002dba:	f000 f993 	bl	80030e4 <RTC_WeekDayNum>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	7b1a      	ldrb	r2, [r3, #12]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 f883 	bl	8002eda <RTC_ReadTimeCounter>
 8002dd4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	4a26      	ldr	r2, [pc, #152]	; (8002e74 <HAL_RTC_SetDate+0x160>)
 8002dda:	fba2 2303 	umull	r2, r3, r2, r3
 8002dde:	0adb      	lsrs	r3, r3, #11
 8002de0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2b18      	cmp	r3, #24
 8002de6:	d93a      	bls.n	8002e5e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	4a23      	ldr	r2, [pc, #140]	; (8002e78 <HAL_RTC_SetDate+0x164>)
 8002dec:	fba2 2303 	umull	r2, r3, r2, r3
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	4a22      	ldr	r2, [pc, #136]	; (8002e7c <HAL_RTC_SetDate+0x168>)
 8002df4:	fb02 f303 	mul.w	r3, r2, r3
 8002df8:	69fa      	ldr	r2, [r7, #28]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002dfe:	69f9      	ldr	r1, [r7, #28]
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 f89a 	bl	8002f3a <RTC_WriteTimeCounter>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d007      	beq.n	8002e1c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2204      	movs	r2, #4
 8002e10:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e027      	b.n	8002e6c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 f8b3 	bl	8002f88 <RTC_ReadAlarmCounter>
 8002e22:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2a:	d018      	beq.n	8002e5e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d214      	bcs.n	8002e5e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002e3a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002e3e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002e40:	69b9      	ldr	r1, [r7, #24]
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f8b9 	bl	8002fba <RTC_WriteAlarmCounter>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d007      	beq.n	8002e5e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2204      	movs	r2, #4
 8002e52:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e006      	b.n	8002e6c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2201      	movs	r2, #1
 8002e62:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3720      	adds	r7, #32
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	91a2b3c5 	.word	0x91a2b3c5
 8002e78:	aaaaaaab 	.word	0xaaaaaaab
 8002e7c:	00015180 	.word	0x00015180

08002e80 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e01d      	b.n	8002ed2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0208 	bic.w	r2, r2, #8
 8002ea4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002ea6:	f7fe fba7 	bl	80015f8 <HAL_GetTick>
 8002eaa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002eac:	e009      	b.n	8002ec2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002eae:	f7fe fba3 	bl	80015f8 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e007      	b.n	8002ed2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0ee      	beq.n	8002eae <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b087      	sub	sp, #28
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	827b      	strh	r3, [r7, #18]
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	823b      	strh	r3, [r7, #16]
 8002eea:	2300      	movs	r3, #0
 8002eec:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002f0a:	8a7a      	ldrh	r2, [r7, #18]
 8002f0c:	8a3b      	ldrh	r3, [r7, #16]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d008      	beq.n	8002f24 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002f12:	8a3b      	ldrh	r3, [r7, #16]
 8002f14:	041a      	lsls	r2, r3, #16
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	e004      	b.n	8002f2e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002f24:	8a7b      	ldrh	r3, [r7, #18]
 8002f26:	041a      	lsls	r2, r3, #16
 8002f28:	89fb      	ldrh	r3, [r7, #14]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002f2e:	697b      	ldr	r3, [r7, #20]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	371c      	adds	r7, #28
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr

08002f3a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f85d 	bl	8003008 <RTC_EnterInitMode>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d002      	beq.n	8002f5a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	73fb      	strb	r3, [r7, #15]
 8002f58:	e011      	b.n	8002f7e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	0c12      	lsrs	r2, r2, #16
 8002f62:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	b292      	uxth	r2, r2
 8002f6c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f872 	bl	8003058 <RTC_ExitInitMode>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	81fb      	strh	r3, [r7, #14]
 8002f94:	2300      	movs	r3, #0
 8002f96:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002fa8:	89fb      	ldrh	r3, [r7, #14]
 8002faa:	041a      	lsls	r2, r3, #16
 8002fac:	89bb      	ldrh	r3, [r7, #12]
 8002fae:	4313      	orrs	r3, r2
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr

08002fba <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f81d 	bl	8003008 <RTC_EnterInitMode>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	73fb      	strb	r3, [r7, #15]
 8002fd8:	e011      	b.n	8002ffe <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	0c12      	lsrs	r2, r2, #16
 8002fe2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	b292      	uxth	r2, r2
 8002fec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f832 	bl	8003058 <RTC_ExitInitMode>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003014:	f7fe faf0 	bl	80015f8 <HAL_GetTick>
 8003018:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800301a:	e009      	b.n	8003030 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800301c:	f7fe faec 	bl	80015f8 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800302a:	d901      	bls.n	8003030 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e00f      	b.n	8003050 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f003 0320 	and.w	r3, r3, #32
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0ee      	beq.n	800301c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 0210 	orr.w	r2, r2, #16
 800304c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0210 	bic.w	r2, r2, #16
 8003072:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003074:	f7fe fac0 	bl	80015f8 <HAL_GetTick>
 8003078:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800307a:	e009      	b.n	8003090 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800307c:	f7fe fabc 	bl	80015f8 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800308a:	d901      	bls.n	8003090 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e007      	b.n	80030a0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0ee      	beq.n	800307c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	461a      	mov	r2, r3
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80030c8:	79fb      	ldrb	r3, [r7, #7]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	4413      	add	r3, r2
 80030d6:	b2db      	uxtb	r3, r3
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr
	...

080030e4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	70fb      	strb	r3, [r7, #3]
 80030f0:	4613      	mov	r3, r2
 80030f2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	60bb      	str	r3, [r7, #8]
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003102:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003104:	78fb      	ldrb	r3, [r7, #3]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d82d      	bhi.n	8003166 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	4613      	mov	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4413      	add	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	4a2c      	ldr	r2, [pc, #176]	; (80031c8 <RTC_WeekDayNum+0xe4>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	085a      	lsrs	r2, r3, #1
 800311e:	78bb      	ldrb	r3, [r7, #2]
 8003120:	441a      	add	r2, r3
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	441a      	add	r2, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	3b01      	subs	r3, #1
 800312a:	089b      	lsrs	r3, r3, #2
 800312c:	441a      	add	r2, r3
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	3b01      	subs	r3, #1
 8003132:	4926      	ldr	r1, [pc, #152]	; (80031cc <RTC_WeekDayNum+0xe8>)
 8003134:	fba1 1303 	umull	r1, r3, r1, r3
 8003138:	095b      	lsrs	r3, r3, #5
 800313a:	1ad2      	subs	r2, r2, r3
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	3b01      	subs	r3, #1
 8003140:	4922      	ldr	r1, [pc, #136]	; (80031cc <RTC_WeekDayNum+0xe8>)
 8003142:	fba1 1303 	umull	r1, r3, r1, r3
 8003146:	09db      	lsrs	r3, r3, #7
 8003148:	4413      	add	r3, r2
 800314a:	1d1a      	adds	r2, r3, #4
 800314c:	4b20      	ldr	r3, [pc, #128]	; (80031d0 <RTC_WeekDayNum+0xec>)
 800314e:	fba3 1302 	umull	r1, r3, r3, r2
 8003152:	1ad1      	subs	r1, r2, r3
 8003154:	0849      	lsrs	r1, r1, #1
 8003156:	440b      	add	r3, r1
 8003158:	0899      	lsrs	r1, r3, #2
 800315a:	460b      	mov	r3, r1
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	1a5b      	subs	r3, r3, r1
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	e029      	b.n	80031ba <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003166:	78fa      	ldrb	r2, [r7, #3]
 8003168:	4613      	mov	r3, r2
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	4413      	add	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	4a15      	ldr	r2, [pc, #84]	; (80031c8 <RTC_WeekDayNum+0xe4>)
 8003174:	fba2 2303 	umull	r2, r3, r2, r3
 8003178:	085a      	lsrs	r2, r3, #1
 800317a:	78bb      	ldrb	r3, [r7, #2]
 800317c:	441a      	add	r2, r3
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	441a      	add	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	089b      	lsrs	r3, r3, #2
 8003186:	441a      	add	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4910      	ldr	r1, [pc, #64]	; (80031cc <RTC_WeekDayNum+0xe8>)
 800318c:	fba1 1303 	umull	r1, r3, r1, r3
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	1ad2      	subs	r2, r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	490d      	ldr	r1, [pc, #52]	; (80031cc <RTC_WeekDayNum+0xe8>)
 8003198:	fba1 1303 	umull	r1, r3, r1, r3
 800319c:	09db      	lsrs	r3, r3, #7
 800319e:	4413      	add	r3, r2
 80031a0:	1c9a      	adds	r2, r3, #2
 80031a2:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <RTC_WeekDayNum+0xec>)
 80031a4:	fba3 1302 	umull	r1, r3, r3, r2
 80031a8:	1ad1      	subs	r1, r2, r3
 80031aa:	0849      	lsrs	r1, r1, #1
 80031ac:	440b      	add	r3, r1
 80031ae:	0899      	lsrs	r1, r3, #2
 80031b0:	460b      	mov	r3, r1
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	1a5b      	subs	r3, r3, r1
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	b2db      	uxtb	r3, r3
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	38e38e39 	.word	0x38e38e39
 80031cc:	51eb851f 	.word	0x51eb851f
 80031d0:	24924925 	.word	0x24924925

080031d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e076      	b.n	80032d4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d108      	bne.n	8003200 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031f6:	d009      	beq.n	800320c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	61da      	str	r2, [r3, #28]
 80031fe:	e005      	b.n	800320c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7fd ff0c 	bl	8001044 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003242:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800327c:	431a      	orrs	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003290:	ea42 0103 	orr.w	r1, r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	0c1a      	lsrs	r2, r3, #16
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f002 0204 	and.w	r2, r2, #4
 80032b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	69da      	ldr	r2, [r3, #28]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08c      	sub	sp, #48	; 0x30
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032ea:	2301      	movs	r3, #1
 80032ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_SPI_TransmitReceive+0x26>
 80032fe:	2302      	movs	r3, #2
 8003300:	e18a      	b.n	8003618 <HAL_SPI_TransmitReceive+0x33c>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800330a:	f7fe f975 	bl	80015f8 <HAL_GetTick>
 800330e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003320:	887b      	ldrh	r3, [r7, #2]
 8003322:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003324:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003328:	2b01      	cmp	r3, #1
 800332a:	d00f      	beq.n	800334c <HAL_SPI_TransmitReceive+0x70>
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003332:	d107      	bne.n	8003344 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d103      	bne.n	8003344 <HAL_SPI_TransmitReceive+0x68>
 800333c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003340:	2b04      	cmp	r3, #4
 8003342:	d003      	beq.n	800334c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003344:	2302      	movs	r3, #2
 8003346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800334a:	e15b      	b.n	8003604 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_SPI_TransmitReceive+0x82>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <HAL_SPI_TransmitReceive+0x82>
 8003358:	887b      	ldrh	r3, [r7, #2]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d103      	bne.n	8003366 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003364:	e14e      	b.n	8003604 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b04      	cmp	r3, #4
 8003370:	d003      	beq.n	800337a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2205      	movs	r2, #5
 8003376:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	887a      	ldrh	r2, [r7, #2]
 800338a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	887a      	ldrh	r2, [r7, #2]
 8003390:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	887a      	ldrh	r2, [r7, #2]
 800339c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	887a      	ldrh	r2, [r7, #2]
 80033a2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ba:	2b40      	cmp	r3, #64	; 0x40
 80033bc:	d007      	beq.n	80033ce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033d6:	d178      	bne.n	80034ca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <HAL_SPI_TransmitReceive+0x10a>
 80033e0:	8b7b      	ldrh	r3, [r7, #26]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d166      	bne.n	80034b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	881a      	ldrh	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	1c9a      	adds	r2, r3, #2
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b01      	subs	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800340a:	e053      	b.n	80034b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b02      	cmp	r3, #2
 8003418:	d11b      	bne.n	8003452 <HAL_SPI_TransmitReceive+0x176>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d016      	beq.n	8003452 <HAL_SPI_TransmitReceive+0x176>
 8003424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003426:	2b01      	cmp	r3, #1
 8003428:	d113      	bne.n	8003452 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	881a      	ldrh	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	1c9a      	adds	r2, r3, #2
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003444:	b29b      	uxth	r3, r3
 8003446:	3b01      	subs	r3, #1
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b01      	cmp	r3, #1
 800345e:	d119      	bne.n	8003494 <HAL_SPI_TransmitReceive+0x1b8>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003464:	b29b      	uxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d014      	beq.n	8003494 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	b292      	uxth	r2, r2
 8003476:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347c:	1c9a      	adds	r2, r3, #2
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003490:	2301      	movs	r3, #1
 8003492:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003494:	f7fe f8b0 	bl	80015f8 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d807      	bhi.n	80034b4 <HAL_SPI_TransmitReceive+0x1d8>
 80034a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034aa:	d003      	beq.n	80034b4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80034b2:	e0a7      	b.n	8003604 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1a6      	bne.n	800340c <HAL_SPI_TransmitReceive+0x130>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1a1      	bne.n	800340c <HAL_SPI_TransmitReceive+0x130>
 80034c8:	e07c      	b.n	80035c4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <HAL_SPI_TransmitReceive+0x1fc>
 80034d2:	8b7b      	ldrh	r3, [r7, #26]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d16b      	bne.n	80035b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	330c      	adds	r3, #12
 80034e2:	7812      	ldrb	r2, [r2, #0]
 80034e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034fe:	e057      	b.n	80035b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b02      	cmp	r3, #2
 800350c:	d11c      	bne.n	8003548 <HAL_SPI_TransmitReceive+0x26c>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	d017      	beq.n	8003548 <HAL_SPI_TransmitReceive+0x26c>
 8003518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351a:	2b01      	cmp	r3, #1
 800351c:	d114      	bne.n	8003548 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	330c      	adds	r3, #12
 8003528:	7812      	ldrb	r2, [r2, #0]
 800352a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b01      	cmp	r3, #1
 8003554:	d119      	bne.n	800358a <HAL_SPI_TransmitReceive+0x2ae>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d014      	beq.n	800358a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800357c:	b29b      	uxth	r3, r3
 800357e:	3b01      	subs	r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003586:	2301      	movs	r3, #1
 8003588:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800358a:	f7fe f835 	bl	80015f8 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003596:	429a      	cmp	r2, r3
 8003598:	d803      	bhi.n	80035a2 <HAL_SPI_TransmitReceive+0x2c6>
 800359a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d102      	bne.n	80035a8 <HAL_SPI_TransmitReceive+0x2cc>
 80035a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d103      	bne.n	80035b0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80035ae:	e029      	b.n	8003604 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1a2      	bne.n	8003500 <HAL_SPI_TransmitReceive+0x224>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d19d      	bne.n	8003500 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f8b1 	bl	8003730 <SPI_EndRxTxTransaction>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d006      	beq.n	80035e2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2220      	movs	r2, #32
 80035de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80035e0:	e010      	b.n	8003604 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10b      	bne.n	8003602 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	617b      	str	r3, [r7, #20]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	e000      	b.n	8003604 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003602:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003614:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003618:	4618      	mov	r0, r3
 800361a:	3730      	adds	r7, #48	; 0x30
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	4613      	mov	r3, r2
 800362e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003630:	f7fd ffe2 	bl	80015f8 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003638:	1a9b      	subs	r3, r3, r2
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	4413      	add	r3, r2
 800363e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003640:	f7fd ffda 	bl	80015f8 <HAL_GetTick>
 8003644:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003646:	4b39      	ldr	r3, [pc, #228]	; (800372c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	015b      	lsls	r3, r3, #5
 800364c:	0d1b      	lsrs	r3, r3, #20
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	fb02 f303 	mul.w	r3, r2, r3
 8003654:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003656:	e054      	b.n	8003702 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365e:	d050      	beq.n	8003702 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003660:	f7fd ffca 	bl	80015f8 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	429a      	cmp	r2, r3
 800366e:	d902      	bls.n	8003676 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d13d      	bne.n	80036f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003684:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800368e:	d111      	bne.n	80036b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003698:	d004      	beq.n	80036a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a2:	d107      	bne.n	80036b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036bc:	d10f      	bne.n	80036de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e017      	b.n	8003722 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	3b01      	subs	r3, #1
 8003700:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4013      	ands	r3, r2
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	429a      	cmp	r2, r3
 8003710:	bf0c      	ite	eq
 8003712:	2301      	moveq	r3, #1
 8003714:	2300      	movne	r3, #0
 8003716:	b2db      	uxtb	r3, r3
 8003718:	461a      	mov	r2, r3
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	429a      	cmp	r2, r3
 800371e:	d19b      	bne.n	8003658 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	2000001c 	.word	0x2000001c

08003730 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af02      	add	r7, sp, #8
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2200      	movs	r2, #0
 8003744:	2180      	movs	r1, #128	; 0x80
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f7ff ff6a 	bl	8003620 <SPI_WaitFlagStateUntilTimeout>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d007      	beq.n	8003762 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003756:	f043 0220 	orr.w	r2, r3, #32
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e000      	b.n	8003764 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e041      	b.n	8003802 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fd fca2 	bl	80010dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3304      	adds	r3, #4
 80037a8:	4619      	mov	r1, r3
 80037aa:	4610      	mov	r0, r2
 80037ac:	f000 fa70 	bl	8003c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b01      	cmp	r3, #1
 800381e:	d001      	beq.n	8003824 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e03a      	b.n	800389a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0201 	orr.w	r2, r2, #1
 800383a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a18      	ldr	r2, [pc, #96]	; (80038a4 <HAL_TIM_Base_Start_IT+0x98>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00e      	beq.n	8003864 <HAL_TIM_Base_Start_IT+0x58>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384e:	d009      	beq.n	8003864 <HAL_TIM_Base_Start_IT+0x58>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a14      	ldr	r2, [pc, #80]	; (80038a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d004      	beq.n	8003864 <HAL_TIM_Base_Start_IT+0x58>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a13      	ldr	r2, [pc, #76]	; (80038ac <HAL_TIM_Base_Start_IT+0xa0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d111      	bne.n	8003888 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2b06      	cmp	r3, #6
 8003874:	d010      	beq.n	8003898 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f042 0201 	orr.w	r2, r2, #1
 8003884:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003886:	e007      	b.n	8003898 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0201 	orr.w	r2, r2, #1
 8003896:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr
 80038a4:	40012c00 	.word	0x40012c00
 80038a8:	40000400 	.word	0x40000400
 80038ac:	40000800 	.word	0x40000800

080038b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d122      	bne.n	800390c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d11b      	bne.n	800390c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f06f 0202 	mvn.w	r2, #2
 80038dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f9b1 	bl	8003c5a <HAL_TIM_IC_CaptureCallback>
 80038f8:	e005      	b.n	8003906 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f9a4 	bl	8003c48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f9b3 	bl	8003c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	2b04      	cmp	r3, #4
 8003918:	d122      	bne.n	8003960 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b04      	cmp	r3, #4
 8003926:	d11b      	bne.n	8003960 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f06f 0204 	mvn.w	r2, #4
 8003930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2202      	movs	r2, #2
 8003936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f987 	bl	8003c5a <HAL_TIM_IC_CaptureCallback>
 800394c:	e005      	b.n	800395a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f97a 	bl	8003c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f989 	bl	8003c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b08      	cmp	r3, #8
 800396c:	d122      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b08      	cmp	r3, #8
 800397a:	d11b      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0208 	mvn.w	r2, #8
 8003984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2204      	movs	r2, #4
 800398a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f95d 	bl	8003c5a <HAL_TIM_IC_CaptureCallback>
 80039a0:	e005      	b.n	80039ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f950 	bl	8003c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f95f 	bl	8003c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f003 0310 	and.w	r3, r3, #16
 80039be:	2b10      	cmp	r3, #16
 80039c0:	d122      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f003 0310 	and.w	r3, r3, #16
 80039cc:	2b10      	cmp	r3, #16
 80039ce:	d11b      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0210 	mvn.w	r2, #16
 80039d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2208      	movs	r2, #8
 80039de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f933 	bl	8003c5a <HAL_TIM_IC_CaptureCallback>
 80039f4:	e005      	b.n	8003a02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f926 	bl	8003c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f935 	bl	8003c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d10e      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d107      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0201 	mvn.w	r2, #1
 8003a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7fc ff7e 	bl	8000930 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3e:	2b80      	cmp	r3, #128	; 0x80
 8003a40:	d10e      	bne.n	8003a60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4c:	2b80      	cmp	r3, #128	; 0x80
 8003a4e:	d107      	bne.n	8003a60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 fa77 	bl	8003f4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6a:	2b40      	cmp	r3, #64	; 0x40
 8003a6c:	d10e      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a78:	2b40      	cmp	r3, #64	; 0x40
 8003a7a:	d107      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f8f9 	bl	8003c7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f003 0320 	and.w	r3, r3, #32
 8003a96:	2b20      	cmp	r3, #32
 8003a98:	d10e      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b20      	cmp	r3, #32
 8003aa6:	d107      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0220 	mvn.w	r2, #32
 8003ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fa42 	bl	8003f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ab8:	bf00      	nop
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_TIM_ConfigClockSource+0x18>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e0b3      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x180>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003af6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003afe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b10:	d03e      	beq.n	8003b90 <HAL_TIM_ConfigClockSource+0xd0>
 8003b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b16:	f200 8087 	bhi.w	8003c28 <HAL_TIM_ConfigClockSource+0x168>
 8003b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b1e:	f000 8085 	beq.w	8003c2c <HAL_TIM_ConfigClockSource+0x16c>
 8003b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b26:	d87f      	bhi.n	8003c28 <HAL_TIM_ConfigClockSource+0x168>
 8003b28:	2b70      	cmp	r3, #112	; 0x70
 8003b2a:	d01a      	beq.n	8003b62 <HAL_TIM_ConfigClockSource+0xa2>
 8003b2c:	2b70      	cmp	r3, #112	; 0x70
 8003b2e:	d87b      	bhi.n	8003c28 <HAL_TIM_ConfigClockSource+0x168>
 8003b30:	2b60      	cmp	r3, #96	; 0x60
 8003b32:	d050      	beq.n	8003bd6 <HAL_TIM_ConfigClockSource+0x116>
 8003b34:	2b60      	cmp	r3, #96	; 0x60
 8003b36:	d877      	bhi.n	8003c28 <HAL_TIM_ConfigClockSource+0x168>
 8003b38:	2b50      	cmp	r3, #80	; 0x50
 8003b3a:	d03c      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0xf6>
 8003b3c:	2b50      	cmp	r3, #80	; 0x50
 8003b3e:	d873      	bhi.n	8003c28 <HAL_TIM_ConfigClockSource+0x168>
 8003b40:	2b40      	cmp	r3, #64	; 0x40
 8003b42:	d058      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0x136>
 8003b44:	2b40      	cmp	r3, #64	; 0x40
 8003b46:	d86f      	bhi.n	8003c28 <HAL_TIM_ConfigClockSource+0x168>
 8003b48:	2b30      	cmp	r3, #48	; 0x30
 8003b4a:	d064      	beq.n	8003c16 <HAL_TIM_ConfigClockSource+0x156>
 8003b4c:	2b30      	cmp	r3, #48	; 0x30
 8003b4e:	d86b      	bhi.n	8003c28 <HAL_TIM_ConfigClockSource+0x168>
 8003b50:	2b20      	cmp	r3, #32
 8003b52:	d060      	beq.n	8003c16 <HAL_TIM_ConfigClockSource+0x156>
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	d867      	bhi.n	8003c28 <HAL_TIM_ConfigClockSource+0x168>
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d05c      	beq.n	8003c16 <HAL_TIM_ConfigClockSource+0x156>
 8003b5c:	2b10      	cmp	r3, #16
 8003b5e:	d05a      	beq.n	8003c16 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003b60:	e062      	b.n	8003c28 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6818      	ldr	r0, [r3, #0]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	6899      	ldr	r1, [r3, #8]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f000 f966 	bl	8003e42 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b84:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	609a      	str	r2, [r3, #8]
      break;
 8003b8e:	e04e      	b.n	8003c2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	6899      	ldr	r1, [r3, #8]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f000 f94f 	bl	8003e42 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bb2:	609a      	str	r2, [r3, #8]
      break;
 8003bb4:	e03b      	b.n	8003c2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	6859      	ldr	r1, [r3, #4]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f000 f8c6 	bl	8003d54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2150      	movs	r1, #80	; 0x50
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 f91d 	bl	8003e0e <TIM_ITRx_SetConfig>
      break;
 8003bd4:	e02b      	b.n	8003c2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6818      	ldr	r0, [r3, #0]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	6859      	ldr	r1, [r3, #4]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	461a      	mov	r2, r3
 8003be4:	f000 f8e4 	bl	8003db0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2160      	movs	r1, #96	; 0x60
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 f90d 	bl	8003e0e <TIM_ITRx_SetConfig>
      break;
 8003bf4:	e01b      	b.n	8003c2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	6859      	ldr	r1, [r3, #4]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	461a      	mov	r2, r3
 8003c04:	f000 f8a6 	bl	8003d54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2140      	movs	r1, #64	; 0x40
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 f8fd 	bl	8003e0e <TIM_ITRx_SetConfig>
      break;
 8003c14:	e00b      	b.n	8003c2e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4610      	mov	r0, r2
 8003c22:	f000 f8f4 	bl	8003e0e <TIM_ITRx_SetConfig>
        break;
 8003c26:	e002      	b.n	8003c2e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003c28:	bf00      	nop
 8003c2a:	e000      	b.n	8003c2e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003c2c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr

08003c5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr

08003c6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr

08003c7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr

08003c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a29      	ldr	r2, [pc, #164]	; (8003d48 <TIM_Base_SetConfig+0xb8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00b      	beq.n	8003cc0 <TIM_Base_SetConfig+0x30>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cae:	d007      	beq.n	8003cc0 <TIM_Base_SetConfig+0x30>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a26      	ldr	r2, [pc, #152]	; (8003d4c <TIM_Base_SetConfig+0xbc>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d003      	beq.n	8003cc0 <TIM_Base_SetConfig+0x30>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a25      	ldr	r2, [pc, #148]	; (8003d50 <TIM_Base_SetConfig+0xc0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d108      	bne.n	8003cd2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a1c      	ldr	r2, [pc, #112]	; (8003d48 <TIM_Base_SetConfig+0xb8>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00b      	beq.n	8003cf2 <TIM_Base_SetConfig+0x62>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce0:	d007      	beq.n	8003cf2 <TIM_Base_SetConfig+0x62>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a19      	ldr	r2, [pc, #100]	; (8003d4c <TIM_Base_SetConfig+0xbc>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d003      	beq.n	8003cf2 <TIM_Base_SetConfig+0x62>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a18      	ldr	r2, [pc, #96]	; (8003d50 <TIM_Base_SetConfig+0xc0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d108      	bne.n	8003d04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a07      	ldr	r2, [pc, #28]	; (8003d48 <TIM_Base_SetConfig+0xb8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d103      	bne.n	8003d38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	615a      	str	r2, [r3, #20]
}
 8003d3e:	bf00      	nop
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr
 8003d48:	40012c00 	.word	0x40012c00
 8003d4c:	40000400 	.word	0x40000400
 8003d50:	40000800 	.word	0x40000800

08003d54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	f023 0201 	bic.w	r2, r3, #1
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f023 030a 	bic.w	r3, r3, #10
 8003d90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	621a      	str	r2, [r3, #32]
}
 8003da6:	bf00      	nop
 8003da8:	371c      	adds	r7, #28
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr

08003db0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	f023 0210 	bic.w	r2, r3, #16
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	031b      	lsls	r3, r3, #12
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	621a      	str	r2, [r3, #32]
}
 8003e04:	bf00      	nop
 8003e06:	371c      	adds	r7, #28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bc80      	pop	{r7}
 8003e0c:	4770      	bx	lr

08003e0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b085      	sub	sp, #20
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f043 0307 	orr.w	r3, r3, #7
 8003e30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	609a      	str	r2, [r3, #8]
}
 8003e38:	bf00      	nop
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bc80      	pop	{r7}
 8003e40:	4770      	bx	lr

08003e42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b087      	sub	sp, #28
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	60f8      	str	r0, [r7, #12]
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	607a      	str	r2, [r7, #4]
 8003e4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	021a      	lsls	r2, r3, #8
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	431a      	orrs	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	609a      	str	r2, [r3, #8]
}
 8003e76:	bf00      	nop
 8003e78:	371c      	adds	r7, #28
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr

08003e80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d101      	bne.n	8003e98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e046      	b.n	8003f26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ebe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a16      	ldr	r2, [pc, #88]	; (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d00e      	beq.n	8003efa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee4:	d009      	beq.n	8003efa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a12      	ldr	r2, [pc, #72]	; (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d004      	beq.n	8003efa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a10      	ldr	r2, [pc, #64]	; (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d10c      	bne.n	8003f14 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	4770      	bx	lr
 8003f30:	40012c00 	.word	0x40012c00
 8003f34:	40000400 	.word	0x40000400
 8003f38:	40000800 	.word	0x40000800

08003f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr

08003f4e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr

08003f60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e03f      	b.n	8003ff2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fd f8cc 	bl	8001124 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2224      	movs	r2, #36	; 0x24
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 fcf7 	bl	8004998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695a      	ldr	r2, [r3, #20]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b08a      	sub	sp, #40	; 0x28
 8003ffe:	af02      	add	r7, sp, #8
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	603b      	str	r3, [r7, #0]
 8004006:	4613      	mov	r3, r2
 8004008:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b20      	cmp	r3, #32
 8004018:	d17c      	bne.n	8004114 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <HAL_UART_Transmit+0x2c>
 8004020:	88fb      	ldrh	r3, [r7, #6]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e075      	b.n	8004116 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_UART_Transmit+0x3e>
 8004034:	2302      	movs	r3, #2
 8004036:	e06e      	b.n	8004116 <HAL_UART_Transmit+0x11c>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2221      	movs	r2, #33	; 0x21
 800404a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800404e:	f7fd fad3 	bl	80015f8 <HAL_GetTick>
 8004052:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	88fa      	ldrh	r2, [r7, #6]
 8004058:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	88fa      	ldrh	r2, [r7, #6]
 800405e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004068:	d108      	bne.n	800407c <HAL_UART_Transmit+0x82>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d104      	bne.n	800407c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004072:	2300      	movs	r3, #0
 8004074:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	61bb      	str	r3, [r7, #24]
 800407a:	e003      	b.n	8004084 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004080:	2300      	movs	r3, #0
 8004082:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800408c:	e02a      	b.n	80040e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2200      	movs	r2, #0
 8004096:	2180      	movs	r1, #128	; 0x80
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 fa94 	bl	80045c6 <UART_WaitOnFlagUntilTimeout>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e036      	b.n	8004116 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10b      	bne.n	80040c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	3302      	adds	r3, #2
 80040c2:	61bb      	str	r3, [r7, #24]
 80040c4:	e007      	b.n	80040d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	781a      	ldrb	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	3301      	adds	r3, #1
 80040d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1cf      	bne.n	800408e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2200      	movs	r2, #0
 80040f6:	2140      	movs	r1, #64	; 0x40
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 fa64 	bl	80045c6 <UART_WaitOnFlagUntilTimeout>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e006      	b.n	8004116 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004110:	2300      	movs	r3, #0
 8004112:	e000      	b.n	8004116 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004114:	2302      	movs	r3, #2
  }
}
 8004116:	4618      	mov	r0, r3
 8004118:	3720      	adds	r7, #32
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b084      	sub	sp, #16
 8004122:	af00      	add	r7, sp, #0
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	4613      	mov	r3, r2
 800412a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b20      	cmp	r3, #32
 8004136:	d11d      	bne.n	8004174 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <HAL_UART_Receive_IT+0x26>
 800413e:	88fb      	ldrh	r3, [r7, #6]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e016      	b.n	8004176 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800414e:	2b01      	cmp	r3, #1
 8004150:	d101      	bne.n	8004156 <HAL_UART_Receive_IT+0x38>
 8004152:	2302      	movs	r3, #2
 8004154:	e00f      	b.n	8004176 <HAL_UART_Receive_IT+0x58>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004164:	88fb      	ldrh	r3, [r7, #6]
 8004166:	461a      	mov	r2, r3
 8004168:	68b9      	ldr	r1, [r7, #8]
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 fa75 	bl	800465a <UART_Start_Receive_IT>
 8004170:	4603      	mov	r3, r0
 8004172:	e000      	b.n	8004176 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004174:	2302      	movs	r3, #2
  }
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004186:	2300      	movs	r3, #0
 8004188:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004194:	2b00      	cmp	r3, #0
 8004196:	bf14      	ite	ne
 8004198:	2301      	movne	r3, #1
 800419a:	2300      	moveq	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b21      	cmp	r3, #33	; 0x21
 80041aa:	d116      	bne.n	80041da <HAL_UART_DMAStop+0x5c>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d013      	beq.n	80041da <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695a      	ldr	r2, [r3, #20]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041c0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d004      	beq.n	80041d4 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fd fb84 	bl	80018dc <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fa79 	bl	80046cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	bf14      	ite	ne
 80041e8:	2301      	movne	r3, #1
 80041ea:	2300      	moveq	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b22      	cmp	r3, #34	; 0x22
 80041fa:	d116      	bne.n	800422a <HAL_UART_DMAStop+0xac>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d013      	beq.n	800422a <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695a      	ldr	r2, [r3, #20]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004210:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004216:	2b00      	cmp	r3, #0
 8004218:	d004      	beq.n	8004224 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421e:	4618      	mov	r0, r3
 8004220:	f7fd fb5c 	bl	80018dc <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 fa66 	bl	80046f6 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08a      	sub	sp, #40	; 0x28
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004254:	2300      	movs	r3, #0
 8004256:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004258:	2300      	movs	r3, #0
 800425a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10d      	bne.n	8004286 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <HAL_UART_IRQHandler+0x52>
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fae0 	bl	8004844 <UART_Receive_IT>
      return;
 8004284:	e17b      	b.n	800457e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 80b1 	beq.w	80043f0 <HAL_UART_IRQHandler+0x1bc>
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d105      	bne.n	80042a4 <HAL_UART_IRQHandler+0x70>
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 80a6 	beq.w	80043f0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <HAL_UART_IRQHandler+0x90>
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	f043 0201 	orr.w	r2, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	f003 0304 	and.w	r3, r3, #4
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <HAL_UART_IRQHandler+0xb0>
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	f043 0202 	orr.w	r2, r3, #2
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <HAL_UART_IRQHandler+0xd0>
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	f043 0204 	orr.w	r2, r3, #4
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00f      	beq.n	800432e <HAL_UART_IRQHandler+0xfa>
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	f003 0320 	and.w	r3, r3, #32
 8004314:	2b00      	cmp	r3, #0
 8004316:	d104      	bne.n	8004322 <HAL_UART_IRQHandler+0xee>
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d005      	beq.n	800432e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	f043 0208 	orr.w	r2, r3, #8
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 811e 	beq.w	8004574 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b00      	cmp	r3, #0
 8004340:	d007      	beq.n	8004352 <HAL_UART_IRQHandler+0x11e>
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	f003 0320 	and.w	r3, r3, #32
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 fa79 	bl	8004844 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435c:	2b00      	cmp	r3, #0
 800435e:	bf14      	ite	ne
 8004360:	2301      	movne	r3, #1
 8004362:	2300      	moveq	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	2b00      	cmp	r3, #0
 8004372:	d102      	bne.n	800437a <HAL_UART_IRQHandler+0x146>
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d031      	beq.n	80043de <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f9bb 	bl	80046f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d023      	beq.n	80043d6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695a      	ldr	r2, [r3, #20]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800439c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d013      	beq.n	80043ce <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043aa:	4a76      	ldr	r2, [pc, #472]	; (8004584 <HAL_UART_IRQHandler+0x350>)
 80043ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fd facc 	bl	8001950 <HAL_DMA_Abort_IT>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d016      	beq.n	80043ec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043c8:	4610      	mov	r0, r2
 80043ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043cc:	e00e      	b.n	80043ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7fc fac6 	bl	8000960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d4:	e00a      	b.n	80043ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7fc fac2 	bl	8000960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043dc:	e006      	b.n	80043ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7fc fabe 	bl	8000960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80043ea:	e0c3      	b.n	8004574 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ec:	bf00      	nop
    return;
 80043ee:	e0c1      	b.n	8004574 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	f040 80a1 	bne.w	800453c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	f003 0310 	and.w	r3, r3, #16
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 809b 	beq.w	800453c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	f003 0310 	and.w	r3, r3, #16
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 8095 	beq.w	800453c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004432:	2b00      	cmp	r3, #0
 8004434:	d04e      	beq.n	80044d4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004440:	8a3b      	ldrh	r3, [r7, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 8098 	beq.w	8004578 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800444c:	8a3a      	ldrh	r2, [r7, #16]
 800444e:	429a      	cmp	r2, r3
 8004450:	f080 8092 	bcs.w	8004578 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	8a3a      	ldrh	r2, [r7, #16]
 8004458:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	2b20      	cmp	r3, #32
 8004462:	d02b      	beq.n	80044bc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004472:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695a      	ldr	r2, [r3, #20]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0201 	bic.w	r2, r2, #1
 8004482:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004492:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0210 	bic.w	r2, r2, #16
 80044b0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fd fa10 	bl	80018dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	4619      	mov	r1, r3
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f864 	bl	800459a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80044d2:	e051      	b.n	8004578 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044dc:	b29b      	uxth	r3, r3
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d047      	beq.n	800457c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80044ec:	8a7b      	ldrh	r3, [r7, #18]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d044      	beq.n	800457c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004500:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695a      	ldr	r2, [r3, #20]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0201 	bic.w	r2, r2, #1
 8004510:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2220      	movs	r2, #32
 8004516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0210 	bic.w	r2, r2, #16
 800452e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004530:	8a7b      	ldrh	r3, [r7, #18]
 8004532:	4619      	mov	r1, r3
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f830 	bl	800459a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800453a:	e01f      	b.n	800457c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004542:	2b00      	cmp	r3, #0
 8004544:	d008      	beq.n	8004558 <HAL_UART_IRQHandler+0x324>
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f910 	bl	8004776 <UART_Transmit_IT>
    return;
 8004556:	e012      	b.n	800457e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00d      	beq.n	800457e <HAL_UART_IRQHandler+0x34a>
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004568:	2b00      	cmp	r3, #0
 800456a:	d008      	beq.n	800457e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f951 	bl	8004814 <UART_EndTransmit_IT>
    return;
 8004572:	e004      	b.n	800457e <HAL_UART_IRQHandler+0x34a>
    return;
 8004574:	bf00      	nop
 8004576:	e002      	b.n	800457e <HAL_UART_IRQHandler+0x34a>
      return;
 8004578:	bf00      	nop
 800457a:	e000      	b.n	800457e <HAL_UART_IRQHandler+0x34a>
      return;
 800457c:	bf00      	nop
  }
}
 800457e:	3728      	adds	r7, #40	; 0x28
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	0800474f 	.word	0x0800474f

08004588 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr

0800459a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	460b      	mov	r3, r1
 80045a4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bc80      	pop	{r7}
 80045ae:	4770      	bx	lr

080045b0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80045bc:	4618      	mov	r0, r3
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bc80      	pop	{r7}
 80045c4:	4770      	bx	lr

080045c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	60f8      	str	r0, [r7, #12]
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	603b      	str	r3, [r7, #0]
 80045d2:	4613      	mov	r3, r2
 80045d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045d6:	e02c      	b.n	8004632 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045de:	d028      	beq.n	8004632 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d007      	beq.n	80045f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80045e6:	f7fd f807 	bl	80015f8 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d21d      	bcs.n	8004632 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004604:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695a      	ldr	r2, [r3, #20]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0201 	bic.w	r2, r2, #1
 8004614:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2220      	movs	r2, #32
 8004622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e00f      	b.n	8004652 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4013      	ands	r3, r2
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	429a      	cmp	r2, r3
 8004640:	bf0c      	ite	eq
 8004642:	2301      	moveq	r3, #1
 8004644:	2300      	movne	r3, #0
 8004646:	b2db      	uxtb	r3, r3
 8004648:	461a      	mov	r2, r3
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	429a      	cmp	r2, r3
 800464e:	d0c3      	beq.n	80045d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800465a:	b480      	push	{r7}
 800465c:	b085      	sub	sp, #20
 800465e:	af00      	add	r7, sp, #0
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	4613      	mov	r3, r2
 8004666:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	88fa      	ldrh	r2, [r7, #6]
 8004672:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	88fa      	ldrh	r2, [r7, #6]
 8004678:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2222      	movs	r2, #34	; 0x22
 8004684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800469e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695a      	ldr	r2, [r3, #20]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0201 	orr.w	r2, r2, #1
 80046ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0220 	orr.w	r2, r2, #32
 80046be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr

080046cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80046e2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr

080046f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68da      	ldr	r2, [r3, #12]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800470c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695a      	ldr	r2, [r3, #20]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0201 	bic.w	r2, r2, #1
 800471c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	2b01      	cmp	r3, #1
 8004724:	d107      	bne.n	8004736 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0210 	bic.w	r2, r2, #16
 8004734:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2220      	movs	r2, #32
 800473a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	bc80      	pop	{r7}
 800474c:	4770      	bx	lr

0800474e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f7fc f8f9 	bl	8000960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800476e:	bf00      	nop
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004776:	b480      	push	{r7}
 8004778:	b085      	sub	sp, #20
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b21      	cmp	r3, #33	; 0x21
 8004788:	d13e      	bne.n	8004808 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004792:	d114      	bne.n	80047be <UART_Transmit_IT+0x48>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d110      	bne.n	80047be <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	1c9a      	adds	r2, r3, #2
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	621a      	str	r2, [r3, #32]
 80047bc:	e008      	b.n	80047d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	1c59      	adds	r1, r3, #1
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6211      	str	r1, [r2, #32]
 80047c8:	781a      	ldrb	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29b      	uxth	r3, r3
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	4619      	mov	r1, r3
 80047de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10f      	bne.n	8004804 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004802:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	e000      	b.n	800480a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004808:	2302      	movs	r3, #2
  }
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	bc80      	pop	{r7}
 8004812:	4770      	bx	lr

08004814 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800482a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7ff fea7 	bl	8004588 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b22      	cmp	r3, #34	; 0x22
 8004856:	f040 8099 	bne.w	800498c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004862:	d117      	bne.n	8004894 <UART_Receive_IT+0x50>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d113      	bne.n	8004894 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004874:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	b29b      	uxth	r3, r3
 800487e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004882:	b29a      	uxth	r2, r3
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488c:	1c9a      	adds	r2, r3, #2
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	629a      	str	r2, [r3, #40]	; 0x28
 8004892:	e026      	b.n	80048e2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004898:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800489a:	2300      	movs	r3, #0
 800489c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a6:	d007      	beq.n	80048b8 <UART_Receive_IT+0x74>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10a      	bne.n	80048c6 <UART_Receive_IT+0x82>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d106      	bne.n	80048c6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	701a      	strb	r2, [r3, #0]
 80048c4:	e008      	b.n	80048d8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	4619      	mov	r1, r3
 80048f0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d148      	bne.n	8004988 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0220 	bic.w	r2, r2, #32
 8004904:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004914:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	695a      	ldr	r2, [r3, #20]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0201 	bic.w	r2, r2, #1
 8004924:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2220      	movs	r2, #32
 800492a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004932:	2b01      	cmp	r3, #1
 8004934:	d123      	bne.n	800497e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0210 	bic.w	r2, r2, #16
 800494a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0310 	and.w	r3, r3, #16
 8004956:	2b10      	cmp	r3, #16
 8004958:	d10a      	bne.n	8004970 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800495a:	2300      	movs	r3, #0
 800495c:	60fb      	str	r3, [r7, #12]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004974:	4619      	mov	r1, r3
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7ff fe0f 	bl	800459a <HAL_UARTEx_RxEventCallback>
 800497c:	e002      	b.n	8004984 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7fb fc42 	bl	8000208 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004984:	2300      	movs	r3, #0
 8004986:	e002      	b.n	800498e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	e000      	b.n	800498e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800498c:	2302      	movs	r3, #2
  }
}
 800498e:	4618      	mov	r0, r3
 8004990:	3718      	adds	r7, #24
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80049d2:	f023 030c 	bic.w	r3, r3, #12
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6812      	ldr	r2, [r2, #0]
 80049da:	68b9      	ldr	r1, [r7, #8]
 80049dc:	430b      	orrs	r3, r1
 80049de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699a      	ldr	r2, [r3, #24]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a2c      	ldr	r2, [pc, #176]	; (8004aac <UART_SetConfig+0x114>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d103      	bne.n	8004a08 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a00:	f7fd feb2 	bl	8002768 <HAL_RCC_GetPCLK2Freq>
 8004a04:	60f8      	str	r0, [r7, #12]
 8004a06:	e002      	b.n	8004a0e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a08:	f7fd fe9a 	bl	8002740 <HAL_RCC_GetPCLK1Freq>
 8004a0c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	4613      	mov	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	009a      	lsls	r2, r3, #2
 8004a18:	441a      	add	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a24:	4a22      	ldr	r2, [pc, #136]	; (8004ab0 <UART_SetConfig+0x118>)
 8004a26:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2a:	095b      	lsrs	r3, r3, #5
 8004a2c:	0119      	lsls	r1, r3, #4
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4613      	mov	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	009a      	lsls	r2, r3, #2
 8004a38:	441a      	add	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a44:	4b1a      	ldr	r3, [pc, #104]	; (8004ab0 <UART_SetConfig+0x118>)
 8004a46:	fba3 0302 	umull	r0, r3, r3, r2
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	2064      	movs	r0, #100	; 0x64
 8004a4e:	fb00 f303 	mul.w	r3, r0, r3
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	3332      	adds	r3, #50	; 0x32
 8004a58:	4a15      	ldr	r2, [pc, #84]	; (8004ab0 <UART_SetConfig+0x118>)
 8004a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a64:	4419      	add	r1, r3
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	009a      	lsls	r2, r3, #2
 8004a70:	441a      	add	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a7c:	4b0c      	ldr	r3, [pc, #48]	; (8004ab0 <UART_SetConfig+0x118>)
 8004a7e:	fba3 0302 	umull	r0, r3, r3, r2
 8004a82:	095b      	lsrs	r3, r3, #5
 8004a84:	2064      	movs	r0, #100	; 0x64
 8004a86:	fb00 f303 	mul.w	r3, r0, r3
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	011b      	lsls	r3, r3, #4
 8004a8e:	3332      	adds	r3, #50	; 0x32
 8004a90:	4a07      	ldr	r2, [pc, #28]	; (8004ab0 <UART_SetConfig+0x118>)
 8004a92:	fba2 2303 	umull	r2, r3, r2, r3
 8004a96:	095b      	lsrs	r3, r3, #5
 8004a98:	f003 020f 	and.w	r2, r3, #15
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	440a      	add	r2, r1
 8004aa2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004aa4:	bf00      	nop
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	40013800 	.word	0x40013800
 8004ab0:	51eb851f 	.word	0x51eb851f

08004ab4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004ab8:	4904      	ldr	r1, [pc, #16]	; (8004acc <MX_FATFS_Init+0x18>)
 8004aba:	4805      	ldr	r0, [pc, #20]	; (8004ad0 <MX_FATFS_Init+0x1c>)
 8004abc:	f003 f9d4 	bl	8007e68 <FATFS_LinkDriver>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	4b03      	ldr	r3, [pc, #12]	; (8004ad4 <MX_FATFS_Init+0x20>)
 8004ac6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004ac8:	bf00      	nop
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	200033c4 	.word	0x200033c4
 8004ad0:	20000028 	.word	0x20000028
 8004ad4:	200033c0 	.word	0x200033c0

08004ad8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004adc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bc80      	pop	{r7}
 8004ae4:	4770      	bx	lr
	...

08004ae8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	4603      	mov	r3, r0
 8004af0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
#if DEBUG
    HAL_UART_Transmit(&huart1,(uint8_t*)"USER_initialize\r\n",17,0x1000);
#endif
    SD_PowerOn();
 8004af2:	f7fc f8c7 	bl	8000c84 <SD_PowerOn>
    if(sd_ini()==0) {Stat &= ~STA_NOINIT;} //Сбросим статус STA_NOINIT
 8004af6:	f7fc f96d 	bl	8000dd4 <sd_ini>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d107      	bne.n	8004b10 <USER_initialize+0x28>
 8004b00:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <USER_initialize+0x38>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	f023 0301 	bic.w	r3, r3, #1
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	4b04      	ldr	r3, [pc, #16]	; (8004b20 <USER_initialize+0x38>)
 8004b0e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004b10:	4b03      	ldr	r3, [pc, #12]	; (8004b20 <USER_initialize+0x38>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20000025 	.word	0x20000025

08004b24 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
#if DEBUG
    HAL_UART_Transmit(&huart1,(uint8_t*)"USER_status\r\n",13,0x1000);
#endif
    if (pdrv) return STA_NOINIT;
 8004b2e:	79fb      	ldrb	r3, [r7, #7]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <USER_status+0x14>
 8004b34:	2301      	movs	r3, #1
 8004b36:	e002      	b.n	8004b3e <USER_status+0x1a>
    return Stat;
 8004b38:	4b03      	ldr	r3, [pc, #12]	; (8004b48 <USER_status+0x24>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr
 8004b48:	20000025 	.word	0x20000025

08004b4c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	607a      	str	r2, [r7, #4]
 8004b56:	603b      	str	r3, [r7, #0]
 8004b58:	4603      	mov	r3, r0
 8004b5a:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1,(uint8_t*)"USER_read\r\n",11,0x1000);

	sprintf(str1,"sector: %lu; count: %d\r\n",sector, count);
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
#endif
	if (pdrv || !count) return RES_PARERR;
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d102      	bne.n	8004b68 <USER_read+0x1c>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <USER_read+0x20>
 8004b68:	2304      	movs	r3, #4
 8004b6a:	e023      	b.n	8004bb4 <USER_read+0x68>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004b6c:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <USER_read+0x70>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <USER_read+0x32>
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e01a      	b.n	8004bb4 <USER_read+0x68>
	if (!(sdinfo.type & CT_BLOCK)) sector *= 512; /* Convert to byte address if needed */
 8004b7e:	4b10      	ldr	r3, [pc, #64]	; (8004bc0 <USER_read+0x74>)
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	f003 0308 	and.w	r3, r3, #8
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d102      	bne.n	8004b92 <USER_read+0x46>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	025b      	lsls	r3, r3, #9
 8004b90:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d105      	bne.n	8004ba4 <USER_read+0x58>
	{
	  SD_Read_Block(buff,sector); //Считаем блок в буфер
 8004b98:	6879      	ldr	r1, [r7, #4]
 8004b9a:	68b8      	ldr	r0, [r7, #8]
 8004b9c:	f7fc f884 	bl	8000ca8 <SD_Read_Block>
	  count = 0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	603b      	str	r3, [r7, #0]
	else /* Multiple block read */
	{

	}

	SPI_Release();
 8004ba4:	f7fb ffdc 	bl	8000b60 <SPI_Release>

	return count ? RES_ERROR : RES_OK;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	bf14      	ite	ne
 8004bae:	2301      	movne	r3, #1
 8004bb0:	2300      	moveq	r3, #0
 8004bb2:	b2db      	uxtb	r3, r3
//    return RES_OK;
  /* USER CODE END READ */
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	20000025 	.word	0x20000025
 8004bc0:	200033b8 	.word	0x200033b8

08004bc4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]
 8004bce:	603b      	str	r3, [r7, #0]
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	73fb      	strb	r3, [r7, #15]
#if DEBUG
	HAL_UART_Transmit(&huart1,(uint8_t*)"USER_write\r\n",12,0x1000);
	sprintf(str1,"sector: %lu\r\n",sector);
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
#endif
	if (pdrv || !count) return RES_PARERR;
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d102      	bne.n	8004be0 <USER_write+0x1c>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <USER_write+0x20>
 8004be0:	2304      	movs	r3, #4
 8004be2:	e02c      	b.n	8004c3e <USER_write+0x7a>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004be4:	4b18      	ldr	r3, [pc, #96]	; (8004c48 <USER_write+0x84>)
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <USER_write+0x32>
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e023      	b.n	8004c3e <USER_write+0x7a>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8004bf6:	4b14      	ldr	r3, [pc, #80]	; (8004c48 <USER_write+0x84>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <USER_write+0x44>
 8004c04:	2302      	movs	r3, #2
 8004c06:	e01a      	b.n	8004c3e <USER_write+0x7a>
	if (!(sdinfo.type & CT_BLOCK)) sector *= 512; /* Convert to byte address if needed */
 8004c08:	4b10      	ldr	r3, [pc, #64]	; (8004c4c <USER_write+0x88>)
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d102      	bne.n	8004c1c <USER_write+0x58>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	025b      	lsls	r3, r3, #9
 8004c1a:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d105      	bne.n	8004c2e <USER_write+0x6a>
	{
		SD_Write_Block((BYTE*)buff,sector); //Считаем блок в буфер
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	68b8      	ldr	r0, [r7, #8]
 8004c26:	f7fc f883 	bl	8000d30 <SD_Write_Block>
		count = 0;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	603b      	str	r3, [r7, #0]
	}
	else /* Multiple block read */
	{
	}

	SPI_Release();
 8004c2e:	f7fb ff97 	bl	8000b60 <SPI_Release>
	return count ? RES_ERROR : RES_OK;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	bf14      	ite	ne
 8004c38:	2301      	movne	r3, #1
 8004c3a:	2300      	moveq	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3

  /* USER CODE END WRITE */
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	20000025 	.word	0x20000025
 8004c4c:	200033b8 	.word	0x200033b8

08004c50 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	4603      	mov	r3, r0
 8004c58:	603a      	str	r2, [r7, #0]
 8004c5a:	71fb      	strb	r3, [r7, #7]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	73fb      	strb	r3, [r7, #15]
#if DEBUG
    HAL_UART_Transmit(&huart1,(uint8_t*)"USER_ioctl\r\n",12,0x1000);
    sprintf(str1,"cmd: %d\r\n",cmd);
    HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
#endif
    if (pdrv) return RES_PARERR;
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <USER_ioctl+0x1e>
 8004c6a:	2304      	movs	r3, #4
 8004c6c:	e02b      	b.n	8004cc6 <USER_ioctl+0x76>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004c6e:	4b18      	ldr	r3, [pc, #96]	; (8004cd0 <USER_ioctl+0x80>)
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <USER_ioctl+0x30>
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e022      	b.n	8004cc6 <USER_ioctl+0x76>
	res = RES_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	73fb      	strb	r3, [r7, #15]
	switch (cmd)
 8004c84:	79bb      	ldrb	r3, [r7, #6]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d002      	beq.n	8004c90 <USER_ioctl+0x40>
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d00d      	beq.n	8004caa <USER_ioctl+0x5a>
 8004c8e:	e013      	b.n	8004cb8 <USER_ioctl+0x68>
	{
	  case CTRL_SYNC : /* Flush dirty buffer if present */
		SS_SD_SELECT();
 8004c90:	2200      	movs	r2, #0
 8004c92:	2108      	movs	r1, #8
 8004c94:	480f      	ldr	r0, [pc, #60]	; (8004cd4 <USER_ioctl+0x84>)
 8004c96:	f7fd f95b 	bl	8001f50 <HAL_GPIO_WritePin>
		if (SPI_wait_ready() == 0xFF)
 8004c9a:	f7fb ff68 	bl	8000b6e <SPI_wait_ready>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2bff      	cmp	r3, #255	; 0xff
 8004ca2:	d10c      	bne.n	8004cbe <USER_ioctl+0x6e>
		res = RES_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	73fb      	strb	r3, [r7, #15]
		break;
 8004ca8:	e009      	b.n	8004cbe <USER_ioctl+0x6e>
	  case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
		*(WORD*)buff = 512;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cb0:	801a      	strh	r2, [r3, #0]
		res = RES_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	73fb      	strb	r3, [r7, #15]
		break;
 8004cb6:	e003      	b.n	8004cc0 <USER_ioctl+0x70>
	  default:
		res = RES_PARERR;
 8004cb8:	2304      	movs	r3, #4
 8004cba:	73fb      	strb	r3, [r7, #15]
 8004cbc:	e000      	b.n	8004cc0 <USER_ioctl+0x70>
		break;
 8004cbe:	bf00      	nop
	}
	SPI_Release();
 8004cc0:	f7fb ff4e 	bl	8000b60 <SPI_Release>
	return res;
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20000025 	.word	0x20000025
 8004cd4:	40010800 	.word	0x40010800

08004cd8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	4603      	mov	r3, r0
 8004ce0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004ce2:	79fb      	ldrb	r3, [r7, #7]
 8004ce4:	4a08      	ldr	r2, [pc, #32]	; (8004d08 <disk_status+0x30>)
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	79fa      	ldrb	r2, [r7, #7]
 8004cf0:	4905      	ldr	r1, [pc, #20]	; (8004d08 <disk_status+0x30>)
 8004cf2:	440a      	add	r2, r1
 8004cf4:	7a12      	ldrb	r2, [r2, #8]
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	4798      	blx	r3
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	200035e8 	.word	0x200035e8

08004d0c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	4603      	mov	r3, r0
 8004d14:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004d1a:	79fb      	ldrb	r3, [r7, #7]
 8004d1c:	4a0d      	ldr	r2, [pc, #52]	; (8004d54 <disk_initialize+0x48>)
 8004d1e:	5cd3      	ldrb	r3, [r2, r3]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d111      	bne.n	8004d48 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8004d24:	79fb      	ldrb	r3, [r7, #7]
 8004d26:	4a0b      	ldr	r2, [pc, #44]	; (8004d54 <disk_initialize+0x48>)
 8004d28:	2101      	movs	r1, #1
 8004d2a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	4a09      	ldr	r2, [pc, #36]	; (8004d54 <disk_initialize+0x48>)
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	79fa      	ldrb	r2, [r7, #7]
 8004d3a:	4906      	ldr	r1, [pc, #24]	; (8004d54 <disk_initialize+0x48>)
 8004d3c:	440a      	add	r2, r1
 8004d3e:	7a12      	ldrb	r2, [r2, #8]
 8004d40:	4610      	mov	r0, r2
 8004d42:	4798      	blx	r3
 8004d44:	4603      	mov	r3, r0
 8004d46:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	200035e8 	.word	0x200035e8

08004d58 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004d58:	b590      	push	{r4, r7, lr}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60b9      	str	r1, [r7, #8]
 8004d60:	607a      	str	r2, [r7, #4]
 8004d62:	603b      	str	r3, [r7, #0]
 8004d64:	4603      	mov	r3, r0
 8004d66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004d68:	7bfb      	ldrb	r3, [r7, #15]
 8004d6a:	4a0a      	ldr	r2, [pc, #40]	; (8004d94 <disk_read+0x3c>)
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	689c      	ldr	r4, [r3, #8]
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	4a07      	ldr	r2, [pc, #28]	; (8004d94 <disk_read+0x3c>)
 8004d78:	4413      	add	r3, r2
 8004d7a:	7a18      	ldrb	r0, [r3, #8]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	68b9      	ldr	r1, [r7, #8]
 8004d82:	47a0      	blx	r4
 8004d84:	4603      	mov	r3, r0
 8004d86:	75fb      	strb	r3, [r7, #23]
  return res;
 8004d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	371c      	adds	r7, #28
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd90      	pop	{r4, r7, pc}
 8004d92:	bf00      	nop
 8004d94:	200035e8 	.word	0x200035e8

08004d98 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004d98:	b590      	push	{r4, r7, lr}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60b9      	str	r1, [r7, #8]
 8004da0:	607a      	str	r2, [r7, #4]
 8004da2:	603b      	str	r3, [r7, #0]
 8004da4:	4603      	mov	r3, r0
 8004da6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
 8004daa:	4a0a      	ldr	r2, [pc, #40]	; (8004dd4 <disk_write+0x3c>)
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	68dc      	ldr	r4, [r3, #12]
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	4a07      	ldr	r2, [pc, #28]	; (8004dd4 <disk_write+0x3c>)
 8004db8:	4413      	add	r3, r2
 8004dba:	7a18      	ldrb	r0, [r3, #8]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	68b9      	ldr	r1, [r7, #8]
 8004dc2:	47a0      	blx	r4
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	75fb      	strb	r3, [r7, #23]
  return res;
 8004dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	371c      	adds	r7, #28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd90      	pop	{r4, r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	200035e8 	.word	0x200035e8

08004dd8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	4603      	mov	r3, r0
 8004de0:	603a      	str	r2, [r7, #0]
 8004de2:	71fb      	strb	r3, [r7, #7]
 8004de4:	460b      	mov	r3, r1
 8004de6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	4a09      	ldr	r2, [pc, #36]	; (8004e10 <disk_ioctl+0x38>)
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	79fa      	ldrb	r2, [r7, #7]
 8004df6:	4906      	ldr	r1, [pc, #24]	; (8004e10 <disk_ioctl+0x38>)
 8004df8:	440a      	add	r2, r1
 8004dfa:	7a10      	ldrb	r0, [r2, #8]
 8004dfc:	79b9      	ldrb	r1, [r7, #6]
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	4798      	blx	r3
 8004e02:	4603      	mov	r3, r0
 8004e04:	73fb      	strb	r3, [r7, #15]
  return res;
 8004e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	200035e8 	.word	0x200035e8

08004e14 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8004e28:	e007      	b.n	8004e3a <mem_cpy+0x26>
		*d++ = *s++;
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	1c53      	adds	r3, r2, #1
 8004e2e:	613b      	str	r3, [r7, #16]
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	1c59      	adds	r1, r3, #1
 8004e34:	6179      	str	r1, [r7, #20]
 8004e36:	7812      	ldrb	r2, [r2, #0]
 8004e38:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	1e5a      	subs	r2, r3, #1
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1f2      	bne.n	8004e2a <mem_cpy+0x16>
}
 8004e44:	bf00      	nop
 8004e46:	bf00      	nop
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bc80      	pop	{r7}
 8004e4e:	4770      	bx	lr

08004e50 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004e60:	e005      	b.n	8004e6e <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	1c5a      	adds	r2, r3, #1
 8004e66:	617a      	str	r2, [r7, #20]
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	1e5a      	subs	r2, r3, #1
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1f4      	bne.n	8004e62 <mem_set+0x12>
}
 8004e78:	bf00      	nop
 8004e7a:	bf00      	nop
 8004e7c:	371c      	adds	r7, #28
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bc80      	pop	{r7}
 8004e82:	4770      	bx	lr

08004e84 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004e84:	b480      	push	{r7}
 8004e86:	b089      	sub	sp, #36	; 0x24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	61fb      	str	r3, [r7, #28]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004e9c:	bf00      	nop
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	1e5a      	subs	r2, r3, #1
 8004ea2:	607a      	str	r2, [r7, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00d      	beq.n	8004ec4 <mem_cmp+0x40>
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	61fa      	str	r2, [r7, #28]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	61ba      	str	r2, [r7, #24]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	1acb      	subs	r3, r1, r3
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0ec      	beq.n	8004e9e <mem_cmp+0x1a>
	return r;
 8004ec4:	697b      	ldr	r3, [r7, #20]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3724      	adds	r7, #36	; 0x24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bc80      	pop	{r7}
 8004ece:	4770      	bx	lr

08004ed0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004eda:	e002      	b.n	8004ee2 <chk_chr+0x12>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	607b      	str	r3, [r7, #4]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d005      	beq.n	8004ef6 <chk_chr+0x26>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d1f2      	bne.n	8004edc <chk_chr+0xc>
	return *str;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bc80      	pop	{r7}
 8004f02:	4770      	bx	lr

08004f04 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60bb      	str	r3, [r7, #8]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	e03b      	b.n	8004f90 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8004f18:	4931      	ldr	r1, [pc, #196]	; (8004fe0 <chk_lock+0xdc>)
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	440b      	add	r3, r1
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d02c      	beq.n	8004f86 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004f2c:	492c      	ldr	r1, [pc, #176]	; (8004fe0 <chk_lock+0xdc>)
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4613      	mov	r3, r2
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	4413      	add	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	440b      	add	r3, r1
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d120      	bne.n	8004f8a <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8004f48:	4925      	ldr	r1, [pc, #148]	; (8004fe0 <chk_lock+0xdc>)
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	3304      	adds	r3, #4
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f60:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d111      	bne.n	8004f8a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8004f66:	491e      	ldr	r1, [pc, #120]	; (8004fe0 <chk_lock+0xdc>)
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	4413      	add	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	3308      	adds	r3, #8
 8004f76:	881a      	ldrh	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f7e:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d102      	bne.n	8004f8a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8004f84:	e007      	b.n	8004f96 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8004f86:	2301      	movs	r3, #1
 8004f88:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d9c0      	bls.n	8004f18 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d109      	bne.n	8004fb0 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d102      	bne.n	8004fa8 <chk_lock+0xa4>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d101      	bne.n	8004fac <chk_lock+0xa8>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e013      	b.n	8004fd4 <chk_lock+0xd0>
 8004fac:	2312      	movs	r3, #18
 8004fae:	e011      	b.n	8004fd4 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10b      	bne.n	8004fce <chk_lock+0xca>
 8004fb6:	490a      	ldr	r1, [pc, #40]	; (8004fe0 <chk_lock+0xdc>)
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	4413      	add	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	440b      	add	r3, r1
 8004fc4:	330a      	adds	r3, #10
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fcc:	d101      	bne.n	8004fd2 <chk_lock+0xce>
 8004fce:	2310      	movs	r3, #16
 8004fd0:	e000      	b.n	8004fd4 <chk_lock+0xd0>
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bc80      	pop	{r7}
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	200033d0 	.word	0x200033d0

08004fe4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004fea:	2300      	movs	r3, #0
 8004fec:	607b      	str	r3, [r7, #4]
 8004fee:	e002      	b.n	8004ff6 <enq_lock+0x12>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	607b      	str	r3, [r7, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d809      	bhi.n	8005010 <enq_lock+0x2c>
 8004ffc:	490a      	ldr	r1, [pc, #40]	; (8005028 <enq_lock+0x44>)
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	4613      	mov	r3, r2
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	4413      	add	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	440b      	add	r3, r1
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1ef      	bne.n	8004ff0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b02      	cmp	r3, #2
 8005014:	bf14      	ite	ne
 8005016:	2301      	movne	r3, #1
 8005018:	2300      	moveq	r3, #0
 800501a:	b2db      	uxtb	r3, r3
}
 800501c:	4618      	mov	r0, r3
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	bc80      	pop	{r7}
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	200033d0 	.word	0x200033d0

0800502c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005036:	2300      	movs	r3, #0
 8005038:	60fb      	str	r3, [r7, #12]
 800503a:	e02e      	b.n	800509a <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 800503c:	4958      	ldr	r1, [pc, #352]	; (80051a0 <inc_lock+0x174>)
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	4613      	mov	r3, r2
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	4413      	add	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	429a      	cmp	r2, r3
 8005056:	d11d      	bne.n	8005094 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8005058:	4951      	ldr	r1, [pc, #324]	; (80051a0 <inc_lock+0x174>)
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4613      	mov	r3, r2
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	4413      	add	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	3304      	adds	r3, #4
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005070:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8005072:	429a      	cmp	r2, r3
 8005074:	d10e      	bne.n	8005094 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8005076:	494a      	ldr	r1, [pc, #296]	; (80051a0 <inc_lock+0x174>)
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	4613      	mov	r3, r2
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	4413      	add	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	440b      	add	r3, r1
 8005084:	3308      	adds	r3, #8
 8005086:	881a      	ldrh	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800508e:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8005090:	429a      	cmp	r2, r3
 8005092:	d006      	beq.n	80050a2 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	3301      	adds	r3, #1
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d9cd      	bls.n	800503c <inc_lock+0x10>
 80050a0:	e000      	b.n	80050a4 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 80050a2:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d148      	bne.n	800513c <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80050aa:	2300      	movs	r3, #0
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	e002      	b.n	80050b6 <inc_lock+0x8a>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	3301      	adds	r3, #1
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d809      	bhi.n	80050d0 <inc_lock+0xa4>
 80050bc:	4938      	ldr	r1, [pc, #224]	; (80051a0 <inc_lock+0x174>)
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	4613      	mov	r3, r2
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	440b      	add	r3, r1
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1ef      	bne.n	80050b0 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d101      	bne.n	80050da <inc_lock+0xae>
 80050d6:	2300      	movs	r3, #0
 80050d8:	e05d      	b.n	8005196 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050e0:	6819      	ldr	r1, [r3, #0]
 80050e2:	482f      	ldr	r0, [pc, #188]	; (80051a0 <inc_lock+0x174>)
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4613      	mov	r3, r2
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4403      	add	r3, r0
 80050f0:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050f8:	6899      	ldr	r1, [r3, #8]
 80050fa:	4829      	ldr	r0, [pc, #164]	; (80051a0 <inc_lock+0x174>)
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	4613      	mov	r3, r2
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	4413      	add	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4403      	add	r3, r0
 8005108:	3304      	adds	r3, #4
 800510a:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005112:	88d8      	ldrh	r0, [r3, #6]
 8005114:	4922      	ldr	r1, [pc, #136]	; (80051a0 <inc_lock+0x174>)
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4613      	mov	r3, r2
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	4413      	add	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	440b      	add	r3, r1
 8005122:	3308      	adds	r3, #8
 8005124:	4602      	mov	r2, r0
 8005126:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8005128:	491d      	ldr	r1, [pc, #116]	; (80051a0 <inc_lock+0x174>)
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	4613      	mov	r3, r2
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	440b      	add	r3, r1
 8005136:	330a      	adds	r3, #10
 8005138:	2200      	movs	r2, #0
 800513a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00c      	beq.n	800515c <inc_lock+0x130>
 8005142:	4917      	ldr	r1, [pc, #92]	; (80051a0 <inc_lock+0x174>)
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4613      	mov	r3, r2
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	4413      	add	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	440b      	add	r3, r1
 8005150:	330a      	adds	r3, #10
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <inc_lock+0x130>
 8005158:	2300      	movs	r3, #0
 800515a:	e01c      	b.n	8005196 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10b      	bne.n	800517a <inc_lock+0x14e>
 8005162:	490f      	ldr	r1, [pc, #60]	; (80051a0 <inc_lock+0x174>)
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	4613      	mov	r3, r2
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	4413      	add	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	440b      	add	r3, r1
 8005170:	330a      	adds	r3, #10
 8005172:	881b      	ldrh	r3, [r3, #0]
 8005174:	3301      	adds	r3, #1
 8005176:	b299      	uxth	r1, r3
 8005178:	e001      	b.n	800517e <inc_lock+0x152>
 800517a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800517e:	4808      	ldr	r0, [pc, #32]	; (80051a0 <inc_lock+0x174>)
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	4613      	mov	r3, r2
 8005184:	005b      	lsls	r3, r3, #1
 8005186:	4413      	add	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4403      	add	r3, r0
 800518c:	330a      	adds	r3, #10
 800518e:	460a      	mov	r2, r1
 8005190:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	3301      	adds	r3, #1
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	bc80      	pop	{r7}
 800519e:	4770      	bx	lr
 80051a0:	200033d0 	.word	0x200033d0

080051a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	607b      	str	r3, [r7, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d82e      	bhi.n	8005216 <dec_lock+0x72>
		n = Files[i].ctr;
 80051b8:	491b      	ldr	r1, [pc, #108]	; (8005228 <dec_lock+0x84>)
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	4613      	mov	r3, r2
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	4413      	add	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	440b      	add	r3, r1
 80051c6:	330a      	adds	r3, #10
 80051c8:	881b      	ldrh	r3, [r3, #0]
 80051ca:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80051cc:	89fb      	ldrh	r3, [r7, #14]
 80051ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d2:	d101      	bne.n	80051d8 <dec_lock+0x34>
 80051d4:	2300      	movs	r3, #0
 80051d6:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80051d8:	89fb      	ldrh	r3, [r7, #14]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d002      	beq.n	80051e4 <dec_lock+0x40>
 80051de:	89fb      	ldrh	r3, [r7, #14]
 80051e0:	3b01      	subs	r3, #1
 80051e2:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80051e4:	4910      	ldr	r1, [pc, #64]	; (8005228 <dec_lock+0x84>)
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	4613      	mov	r3, r2
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	4413      	add	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	440b      	add	r3, r1
 80051f2:	330a      	adds	r3, #10
 80051f4:	89fa      	ldrh	r2, [r7, #14]
 80051f6:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80051f8:	89fb      	ldrh	r3, [r7, #14]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d108      	bne.n	8005210 <dec_lock+0x6c>
 80051fe:	490a      	ldr	r1, [pc, #40]	; (8005228 <dec_lock+0x84>)
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	4613      	mov	r3, r2
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	4413      	add	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	440b      	add	r3, r1
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005210:	2300      	movs	r3, #0
 8005212:	737b      	strb	r3, [r7, #13]
 8005214:	e001      	b.n	800521a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005216:	2302      	movs	r3, #2
 8005218:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800521a:	7b7b      	ldrb	r3, [r7, #13]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	bc80      	pop	{r7}
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	200033d0 	.word	0x200033d0

0800522c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005234:	2300      	movs	r3, #0
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	e016      	b.n	8005268 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800523a:	4910      	ldr	r1, [pc, #64]	; (800527c <clear_lock+0x50>)
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	4613      	mov	r3, r2
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	4413      	add	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	440b      	add	r3, r1
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	429a      	cmp	r2, r3
 800524e:	d108      	bne.n	8005262 <clear_lock+0x36>
 8005250:	490a      	ldr	r1, [pc, #40]	; (800527c <clear_lock+0x50>)
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4613      	mov	r3, r2
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	4413      	add	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	440b      	add	r3, r1
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	3301      	adds	r3, #1
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d9e5      	bls.n	800523a <clear_lock+0xe>
	}
}
 800526e:	bf00      	nop
 8005270:	bf00      	nop
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	bc80      	pop	{r7}
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	200033d0 	.word	0x200033d0

08005280 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005288:	2300      	movs	r3, #0
 800528a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005292:	791b      	ldrb	r3, [r3, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d040      	beq.n	800531a <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052a8:	7858      	ldrb	r0, [r3, #1]
 80052aa:	6879      	ldr	r1, [r7, #4]
 80052ac:	2301      	movs	r3, #1
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	f7ff fd72 	bl	8004d98 <disk_write>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <sync_window+0x40>
			res = FR_DISK_ERR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	73fb      	strb	r3, [r7, #15]
 80052be:	e02c      	b.n	800531a <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052c6:	2200      	movs	r2, #0
 80052c8:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	1ad2      	subs	r2, r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d21b      	bcs.n	800531a <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e8:	78db      	ldrb	r3, [r3, #3]
 80052ea:	613b      	str	r3, [r7, #16]
 80052ec:	e012      	b.n	8005314 <sync_window+0x94>
					wsect += fs->fsize;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	4413      	add	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005302:	7858      	ldrb	r0, [r3, #1]
 8005304:	6879      	ldr	r1, [r7, #4]
 8005306:	2301      	movs	r3, #1
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	f7ff fd45 	bl	8004d98 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	3b01      	subs	r3, #1
 8005312:	613b      	str	r3, [r7, #16]
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d8e9      	bhi.n	80052ee <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 800531a:	7bfb      	ldrb	r3, [r7, #15]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d01e      	beq.n	800537e <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7ff ff9d 	bl	8005280 <sync_window>
 8005346:	4603      	mov	r3, r0
 8005348:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800534a:	7bfb      	ldrb	r3, [r7, #15]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d116      	bne.n	800537e <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005356:	7858      	ldrb	r0, [r3, #1]
 8005358:	6879      	ldr	r1, [r7, #4]
 800535a:	2301      	movs	r3, #1
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	f7ff fcfb 	bl	8004d58 <disk_read>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d004      	beq.n	8005372 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005368:	f04f 33ff 	mov.w	r3, #4294967295
 800536c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800536e:	2301      	movs	r3, #1
 8005370:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005378:	461a      	mov	r2, r3
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 800537e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff ff75 	bl	8005280 <sync_window>
 8005396:	4603      	mov	r3, r0
 8005398:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800539a:	7bfb      	ldrb	r3, [r7, #15]
 800539c:	2b00      	cmp	r3, #0
 800539e:	f040 80ad 	bne.w	80054fc <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	2b03      	cmp	r3, #3
 80053ac:	f040 8098 	bne.w	80054e0 <sync_fs+0x158>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053b6:	795b      	ldrb	r3, [r3, #5]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	f040 8091 	bne.w	80054e0 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053c6:	895b      	ldrh	r3, [r3, #10]
 80053c8:	461a      	mov	r2, r3
 80053ca:	2100      	movs	r1, #0
 80053cc:	f7ff fd40 	bl	8004e50 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2255      	movs	r2, #85	; 0x55
 80053d4:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	22aa      	movs	r2, #170	; 0xaa
 80053dc:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2252      	movs	r2, #82	; 0x52
 80053e4:	701a      	strb	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2252      	movs	r2, #82	; 0x52
 80053ea:	705a      	strb	r2, [r3, #1]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2261      	movs	r2, #97	; 0x61
 80053f0:	709a      	strb	r2, [r3, #2]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2241      	movs	r2, #65	; 0x41
 80053f6:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2272      	movs	r2, #114	; 0x72
 80053fc:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2272      	movs	r2, #114	; 0x72
 8005404:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2241      	movs	r2, #65	; 0x41
 800540c:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2261      	movs	r2, #97	; 0x61
 8005414:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	b2da      	uxtb	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	b29b      	uxth	r3, r3
 8005432:	0a1b      	lsrs	r3, r3, #8
 8005434:	b29b      	uxth	r3, r3
 8005436:	b2da      	uxtb	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	0c1b      	lsrs	r3, r3, #16
 8005448:	b2da      	uxtb	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	0e1b      	lsrs	r3, r3, #24
 800545a:	b2da      	uxtb	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	b2da      	uxtb	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	b29b      	uxth	r3, r3
 800547c:	0a1b      	lsrs	r3, r3, #8
 800547e:	b29b      	uxth	r3, r3
 8005480:	b2da      	uxtb	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	0c1b      	lsrs	r3, r3, #16
 8005492:	b2da      	uxtb	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	0e1b      	lsrs	r3, r3, #24
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	3301      	adds	r3, #1
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80054bc:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054c4:	7858      	ldrb	r0, [r3, #1]
 80054c6:	6879      	ldr	r1, [r7, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d0:	2301      	movs	r3, #1
 80054d2:	f7ff fc61 	bl	8004d98 <disk_write>
			fs->fsi_flag = 0;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054dc:	2200      	movs	r2, #0
 80054de:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054e6:	785b      	ldrb	r3, [r3, #1]
 80054e8:	2200      	movs	r2, #0
 80054ea:	2100      	movs	r1, #0
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7ff fc73 	bl	8004dd8 <disk_ioctl>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <sync_fs+0x174>
			res = FR_DISK_ERR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	3b02      	subs	r3, #2
 8005514:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	3b02      	subs	r3, #2
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d301      	bcc.n	800552a <clust2sect+0x24>
 8005526:	2300      	movs	r3, #0
 8005528:	e00c      	b.n	8005544 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005530:	789b      	ldrb	r3, [r3, #2]
 8005532:	461a      	mov	r2, r3
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	fb03 f202 	mul.w	r2, r3, r2
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005542:	4413      	add	r3, r2
}
 8005544:	4618      	mov	r0, r3
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	bc80      	pop	{r7}
 800554c:	4770      	bx	lr

0800554e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b086      	sub	sp, #24
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d906      	bls.n	800556c <get_fat+0x1e>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	429a      	cmp	r2, r3
 800556a:	d302      	bcc.n	8005572 <get_fat+0x24>
		val = 1;	/* Internal error */
 800556c:	2301      	movs	r3, #1
 800556e:	617b      	str	r3, [r7, #20]
 8005570:	e0e4      	b.n	800573c <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005572:	f04f 33ff 	mov.w	r3, #4294967295
 8005576:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b03      	cmp	r3, #3
 8005582:	f000 8098 	beq.w	80056b6 <get_fat+0x168>
 8005586:	2b03      	cmp	r3, #3
 8005588:	f300 80ce 	bgt.w	8005728 <get_fat+0x1da>
 800558c:	2b01      	cmp	r3, #1
 800558e:	d002      	beq.n	8005596 <get_fat+0x48>
 8005590:	2b02      	cmp	r3, #2
 8005592:	d05f      	beq.n	8005654 <get_fat+0x106>
 8005594:	e0c8      	b.n	8005728 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	085b      	lsrs	r3, r3, #1
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4413      	add	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055aa:	6a1a      	ldr	r2, [r3, #32]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055b2:	895b      	ldrh	r3, [r3, #10]
 80055b4:	4619      	mov	r1, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80055bc:	4413      	add	r3, r2
 80055be:	4619      	mov	r1, r3
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7ff feaf 	bl	8005324 <move_window>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f040 80b0 	bne.w	800572e <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	60fa      	str	r2, [r7, #12]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80055da:	8952      	ldrh	r2, [r2, #10]
 80055dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80055e0:	fb01 f202 	mul.w	r2, r1, r2
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	5cd3      	ldrb	r3, [r2, r3]
 80055ea:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055f2:	6a1a      	ldr	r2, [r3, #32]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055fa:	895b      	ldrh	r3, [r3, #10]
 80055fc:	4619      	mov	r1, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	fbb3 f3f1 	udiv	r3, r3, r1
 8005604:	4413      	add	r3, r2
 8005606:	4619      	mov	r1, r3
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7ff fe8b 	bl	8005324 <move_window>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	f040 808e 	bne.w	8005732 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800561c:	895b      	ldrh	r3, [r3, #10]
 800561e:	461a      	mov	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	fbb3 f1f2 	udiv	r1, r3, r2
 8005626:	fb01 f202 	mul.w	r2, r1, r2
 800562a:	1a9b      	subs	r3, r3, r2
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	5cd3      	ldrb	r3, [r2, r3]
 8005630:	021b      	lsls	r3, r3, #8
 8005632:	461a      	mov	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	4313      	orrs	r3, r2
 8005638:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <get_fat+0xfc>
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	091b      	lsrs	r3, r3, #4
 8005648:	e002      	b.n	8005650 <get_fat+0x102>
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005650:	617b      	str	r3, [r7, #20]
			break;
 8005652:	e073      	b.n	800573c <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800565a:	6a1a      	ldr	r2, [r3, #32]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005662:	895b      	ldrh	r3, [r3, #10]
 8005664:	085b      	lsrs	r3, r3, #1
 8005666:	b29b      	uxth	r3, r3
 8005668:	4619      	mov	r1, r3
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005670:	4413      	add	r3, r2
 8005672:	4619      	mov	r1, r3
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff fe55 	bl	8005324 <move_window>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d15a      	bne.n	8005736 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800568a:	8952      	ldrh	r2, [r2, #10]
 800568c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005690:	fb01 f202 	mul.w	r2, r1, r2
 8005694:	1a9b      	subs	r3, r3, r2
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	4413      	add	r3, r2
 800569a:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	3301      	adds	r3, #1
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	021b      	lsls	r3, r3, #8
 80056a4:	b21a      	sxth	r2, r3
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	b21b      	sxth	r3, r3
 80056ac:	4313      	orrs	r3, r2
 80056ae:	b21b      	sxth	r3, r3
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	617b      	str	r3, [r7, #20]
			break;
 80056b4:	e042      	b.n	800573c <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056bc:	6a1a      	ldr	r2, [r3, #32]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056c4:	895b      	ldrh	r3, [r3, #10]
 80056c6:	089b      	lsrs	r3, r3, #2
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	4619      	mov	r1, r3
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80056d2:	4413      	add	r3, r2
 80056d4:	4619      	mov	r1, r3
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7ff fe24 	bl	8005324 <move_window>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d12b      	bne.n	800573a <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80056ec:	8952      	ldrh	r2, [r2, #10]
 80056ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80056f2:	fb01 f202 	mul.w	r2, r1, r2
 80056f6:	1a9b      	subs	r3, r3, r2
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	4413      	add	r3, r2
 80056fc:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	3303      	adds	r3, #3
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	061a      	lsls	r2, r3, #24
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	3302      	adds	r3, #2
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	041b      	lsls	r3, r3, #16
 800570e:	4313      	orrs	r3, r2
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	3201      	adds	r2, #1
 8005714:	7812      	ldrb	r2, [r2, #0]
 8005716:	0212      	lsls	r2, r2, #8
 8005718:	4313      	orrs	r3, r2
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	7812      	ldrb	r2, [r2, #0]
 800571e:	4313      	orrs	r3, r2
 8005720:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005724:	617b      	str	r3, [r7, #20]
			break;
 8005726:	e009      	b.n	800573c <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8005728:	2301      	movs	r3, #1
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	e006      	b.n	800573c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800572e:	bf00      	nop
 8005730:	e004      	b.n	800573c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005732:	bf00      	nop
 8005734:	e002      	b.n	800573c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005736:	bf00      	nop
 8005738:	e000      	b.n	800573c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800573a:	bf00      	nop
		}
	}

	return val;
 800573c:	697b      	ldr	r3, [r7, #20]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b088      	sub	sp, #32
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d906      	bls.n	8005766 <put_fat+0x20>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	429a      	cmp	r2, r3
 8005764:	d302      	bcc.n	800576c <put_fat+0x26>
		res = FR_INT_ERR;
 8005766:	2302      	movs	r3, #2
 8005768:	77fb      	strb	r3, [r7, #31]
 800576a:	e13a      	b.n	80059e2 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b03      	cmp	r3, #3
 8005776:	f000 80d0 	beq.w	800591a <put_fat+0x1d4>
 800577a:	2b03      	cmp	r3, #3
 800577c:	f300 8127 	bgt.w	80059ce <put_fat+0x288>
 8005780:	2b01      	cmp	r3, #1
 8005782:	d003      	beq.n	800578c <put_fat+0x46>
 8005784:	2b02      	cmp	r3, #2
 8005786:	f000 808f 	beq.w	80058a8 <put_fat+0x162>
 800578a:	e120      	b.n	80059ce <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	085b      	lsrs	r3, r3, #1
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4413      	add	r3, r2
 8005798:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057a0:	6a1a      	ldr	r2, [r3, #32]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057a8:	895b      	ldrh	r3, [r3, #10]
 80057aa:	4619      	mov	r1, r3
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80057b2:	4413      	add	r3, r2
 80057b4:	4619      	mov	r1, r3
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f7ff fdb4 	bl	8005324 <move_window>
 80057bc:	4603      	mov	r3, r0
 80057be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80057c0:	7ffb      	ldrb	r3, [r7, #31]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f040 8106 	bne.w	80059d4 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	617a      	str	r2, [r7, #20]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80057d4:	8952      	ldrh	r2, [r2, #10]
 80057d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80057da:	fb01 f202 	mul.w	r2, r1, r2
 80057de:	1a9b      	subs	r3, r3, r2
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	4413      	add	r3, r2
 80057e4:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00d      	beq.n	800580c <put_fat+0xc6>
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	b25b      	sxtb	r3, r3
 80057f6:	f003 030f 	and.w	r3, r3, #15
 80057fa:	b25a      	sxtb	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	b25b      	sxtb	r3, r3
 8005804:	4313      	orrs	r3, r2
 8005806:	b25b      	sxtb	r3, r3
 8005808:	b2db      	uxtb	r3, r3
 800580a:	e001      	b.n	8005810 <put_fat+0xca>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	b2db      	uxtb	r3, r3
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800581a:	2201      	movs	r2, #1
 800581c:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005824:	6a1a      	ldr	r2, [r3, #32]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800582c:	895b      	ldrh	r3, [r3, #10]
 800582e:	4619      	mov	r1, r3
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	fbb3 f3f1 	udiv	r3, r3, r1
 8005836:	4413      	add	r3, r2
 8005838:	4619      	mov	r1, r3
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f7ff fd72 	bl	8005324 <move_window>
 8005840:	4603      	mov	r3, r0
 8005842:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005844:	7ffb      	ldrb	r3, [r7, #31]
 8005846:	2b00      	cmp	r3, #0
 8005848:	f040 80c6 	bne.w	80059d8 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005852:	895b      	ldrh	r3, [r3, #10]
 8005854:	461a      	mov	r2, r3
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	fbb3 f1f2 	udiv	r1, r3, r2
 800585c:	fb01 f202 	mul.w	r2, r1, r2
 8005860:	1a9b      	subs	r3, r3, r2
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	4413      	add	r3, r2
 8005866:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <put_fat+0x134>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	091b      	lsrs	r3, r3, #4
 8005876:	b2db      	uxtb	r3, r3
 8005878:	e00e      	b.n	8005898 <put_fat+0x152>
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	b25b      	sxtb	r3, r3
 8005880:	f023 030f 	bic.w	r3, r3, #15
 8005884:	b25a      	sxtb	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	0a1b      	lsrs	r3, r3, #8
 800588a:	b25b      	sxtb	r3, r3
 800588c:	f003 030f 	and.w	r3, r3, #15
 8005890:	b25b      	sxtb	r3, r3
 8005892:	4313      	orrs	r3, r2
 8005894:	b25b      	sxtb	r3, r3
 8005896:	b2db      	uxtb	r3, r3
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058a2:	2201      	movs	r2, #1
 80058a4:	711a      	strb	r2, [r3, #4]
			break;
 80058a6:	e09c      	b.n	80059e2 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ae:	6a1a      	ldr	r2, [r3, #32]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b6:	895b      	ldrh	r3, [r3, #10]
 80058b8:	085b      	lsrs	r3, r3, #1
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	4619      	mov	r1, r3
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80058c4:	4413      	add	r3, r2
 80058c6:	4619      	mov	r1, r3
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f7ff fd2b 	bl	8005324 <move_window>
 80058ce:	4603      	mov	r3, r0
 80058d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80058d2:	7ffb      	ldrb	r3, [r7, #31]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f040 8081 	bne.w	80059dc <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058e4:	8952      	ldrh	r2, [r2, #10]
 80058e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80058ea:	fb01 f202 	mul.w	r2, r1, r2
 80058ee:	1a9b      	subs	r3, r3, r2
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4413      	add	r3, r2
 80058f4:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	701a      	strb	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	b29b      	uxth	r3, r3
 8005902:	0a1b      	lsrs	r3, r3, #8
 8005904:	b29a      	uxth	r2, r3
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	3301      	adds	r3, #1
 800590a:	b2d2      	uxtb	r2, r2
 800590c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005914:	2201      	movs	r2, #1
 8005916:	711a      	strb	r2, [r3, #4]
			break;
 8005918:	e063      	b.n	80059e2 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005920:	6a1a      	ldr	r2, [r3, #32]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005928:	895b      	ldrh	r3, [r3, #10]
 800592a:	089b      	lsrs	r3, r3, #2
 800592c:	b29b      	uxth	r3, r3
 800592e:	4619      	mov	r1, r3
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	fbb3 f3f1 	udiv	r3, r3, r1
 8005936:	4413      	add	r3, r2
 8005938:	4619      	mov	r1, r3
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f7ff fcf2 	bl	8005324 <move_window>
 8005940:	4603      	mov	r3, r0
 8005942:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005944:	7ffb      	ldrb	r3, [r7, #31]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d14a      	bne.n	80059e0 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005954:	8952      	ldrh	r2, [r2, #10]
 8005956:	fbb3 f1f2 	udiv	r1, r3, r2
 800595a:	fb01 f202 	mul.w	r2, r1, r2
 800595e:	1a9b      	subs	r3, r3, r2
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4413      	add	r3, r2
 8005964:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	3303      	adds	r3, #3
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	061a      	lsls	r2, r3, #24
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	3302      	adds	r3, #2
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	041b      	lsls	r3, r3, #16
 8005976:	4313      	orrs	r3, r2
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	3201      	adds	r2, #1
 800597c:	7812      	ldrb	r2, [r2, #0]
 800597e:	0212      	lsls	r2, r2, #8
 8005980:	4313      	orrs	r3, r2
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	7812      	ldrb	r2, [r2, #0]
 8005986:	4313      	orrs	r3, r2
 8005988:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	4313      	orrs	r3, r2
 8005990:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	b2da      	uxtb	r2, r3
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	701a      	strb	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	b29b      	uxth	r3, r3
 800599e:	0a1b      	lsrs	r3, r3, #8
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	3301      	adds	r3, #1
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	0c1a      	lsrs	r2, r3, #16
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	3302      	adds	r3, #2
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	0e1a      	lsrs	r2, r3, #24
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	3303      	adds	r3, #3
 80059be:	b2d2      	uxtb	r2, r2
 80059c0:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059c8:	2201      	movs	r2, #1
 80059ca:	711a      	strb	r2, [r3, #4]
			break;
 80059cc:	e009      	b.n	80059e2 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 80059ce:	2302      	movs	r3, #2
 80059d0:	77fb      	strb	r3, [r7, #31]
 80059d2:	e006      	b.n	80059e2 <put_fat+0x29c>
			if (res != FR_OK) break;
 80059d4:	bf00      	nop
 80059d6:	e004      	b.n	80059e2 <put_fat+0x29c>
			if (res != FR_OK) break;
 80059d8:	bf00      	nop
 80059da:	e002      	b.n	80059e2 <put_fat+0x29c>
			if (res != FR_OK) break;
 80059dc:	bf00      	nop
 80059de:	e000      	b.n	80059e2 <put_fat+0x29c>
			if (res != FR_OK) break;
 80059e0:	bf00      	nop
		}
	}

	return res;
 80059e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3720      	adds	r7, #32
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d906      	bls.n	8005a0a <remove_chain+0x1e>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	683a      	ldr	r2, [r7, #0]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d302      	bcc.n	8005a10 <remove_chain+0x24>
		res = FR_INT_ERR;
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	73fb      	strb	r3, [r7, #15]
 8005a0e:	e049      	b.n	8005aa4 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8005a10:	2300      	movs	r3, #0
 8005a12:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005a14:	e03b      	b.n	8005a8e <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005a16:	6839      	ldr	r1, [r7, #0]
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7ff fd98 	bl	800554e <get_fat>
 8005a1e:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d03b      	beq.n	8005a9e <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d102      	bne.n	8005a32 <remove_chain+0x46>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	73fb      	strb	r3, [r7, #15]
 8005a30:	e038      	b.n	8005aa4 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a38:	d102      	bne.n	8005a40 <remove_chain+0x54>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	73fb      	strb	r3, [r7, #15]
 8005a3e:	e031      	b.n	8005aa4 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005a40:	2200      	movs	r2, #0
 8005a42:	6839      	ldr	r1, [r7, #0]
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7ff fe7e 	bl	8005746 <put_fat>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d126      	bne.n	8005aa2 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a60:	d013      	beq.n	8005a8a <remove_chain+0x9e>
				fs->free_clust++;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005a72:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a7a:	795b      	ldrb	r3, [r3, #5]
 8005a7c:	f043 0301 	orr.w	r3, r3, #1
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a88:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d3bc      	bcc.n	8005a16 <remove_chain+0x2a>
 8005a9c:	e002      	b.n	8005aa4 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8005a9e:	bf00      	nop
 8005aa0:	e000      	b.n	8005aa4 <remove_chain+0xb8>
			if (res != FR_OK) break;
 8005aa2:	bf00      	nop
		}
	}

	return res;
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b086      	sub	sp, #24
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d111      	bne.n	8005ae2 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d006      	beq.n	8005adc <create_chain+0x2e>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d31d      	bcc.n	8005b18 <create_chain+0x6a>
 8005adc:	2301      	movs	r3, #1
 8005ade:	613b      	str	r3, [r7, #16]
 8005ae0:	e01a      	b.n	8005b18 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005ae2:	6839      	ldr	r1, [r7, #0]
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7ff fd32 	bl	800554e <get_fat>
 8005aea:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d801      	bhi.n	8005af6 <create_chain+0x48>
 8005af2:	2301      	movs	r3, #1
 8005af4:	e07f      	b.n	8005bf6 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afc:	d101      	bne.n	8005b02 <create_chain+0x54>
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	e079      	b.n	8005bf6 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d201      	bcs.n	8005b14 <create_chain+0x66>
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	e070      	b.n	8005bf6 <create_chain+0x148>
		scl = clst;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d307      	bcc.n	8005b40 <create_chain+0x92>
			ncl = 2;
 8005b30:	2302      	movs	r3, #2
 8005b32:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d901      	bls.n	8005b40 <create_chain+0x92>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	e05a      	b.n	8005bf6 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8005b40:	6979      	ldr	r1, [r7, #20]
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7ff fd03 	bl	800554e <get_fat>
 8005b48:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00e      	beq.n	8005b6e <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b56:	d002      	beq.n	8005b5e <create_chain+0xb0>
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d101      	bne.n	8005b62 <create_chain+0xb4>
			return cs;
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	e049      	b.n	8005bf6 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d1d8      	bne.n	8005b1c <create_chain+0x6e>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	e043      	b.n	8005bf6 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8005b6e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8005b70:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8005b74:	6979      	ldr	r1, [r7, #20]
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7ff fde5 	bl	8005746 <put_fat>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d109      	bne.n	8005b9a <create_chain+0xec>
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d006      	beq.n	8005b9a <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	6839      	ldr	r1, [r7, #0]
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7ff fdd8 	bl	8005746 <put_fat>
 8005b96:	4603      	mov	r3, r0
 8005b98:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8005b9a:	7bfb      	ldrb	r3, [r7, #15]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d121      	bne.n	8005be4 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb8:	d01c      	beq.n	8005bf4 <create_chain+0x146>
			fs->free_clust--;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005bca:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bd2:	795b      	ldrb	r3, [r3, #5]
 8005bd4:	f043 0301 	orr.w	r3, r3, #1
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005be0:	715a      	strb	r2, [r3, #5]
 8005be2:	e007      	b.n	8005bf4 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d102      	bne.n	8005bf0 <create_chain+0x142>
 8005bea:	f04f 33ff 	mov.w	r3, #4294967295
 8005bee:	e000      	b.n	8005bf2 <create_chain+0x144>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005bf4:	697b      	ldr	r3, [r7, #20]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b086      	sub	sp, #24
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c12:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d009      	beq.n	8005c38 <dir_sdi+0x3a>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d301      	bcc.n	8005c3c <dir_sdi+0x3e>
		return FR_INT_ERR;
 8005c38:	2302      	movs	r3, #2
 8005c3a:	e0aa      	b.n	8005d92 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d110      	bne.n	8005c64 <dir_sdi+0x66>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d107      	bne.n	8005c64 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d115      	bne.n	8005c96 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c76:	891b      	ldrh	r3, [r3, #8]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d301      	bcc.n	8005c84 <dir_sdi+0x86>
			return FR_INT_ERR;
 8005c80:	2302      	movs	r3, #2
 8005c82:	e086      	b.n	8005d92 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c92:	613b      	str	r3, [r7, #16]
 8005c94:	e043      	b.n	8005d1e <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ca2:	895b      	ldrh	r3, [r3, #10]
 8005ca4:	095b      	lsrs	r3, r3, #5
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	461a      	mov	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cb6:	789b      	ldrb	r3, [r3, #2]
 8005cb8:	fb02 f303 	mul.w	r3, r2, r3
 8005cbc:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8005cbe:	e021      	b.n	8005d04 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6979      	ldr	r1, [r7, #20]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7ff fc3f 	bl	800554e <get_fat>
 8005cd0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd8:	d101      	bne.n	8005cde <dir_sdi+0xe0>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e059      	b.n	8005d92 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d909      	bls.n	8005cf8 <dir_sdi+0xfa>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d301      	bcc.n	8005cfc <dir_sdi+0xfe>
				return FR_INT_ERR;
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e04a      	b.n	8005d92 <dir_sdi+0x194>
			idx -= ic;
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d2d9      	bcs.n	8005cc0 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6979      	ldr	r1, [r7, #20]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7ff fbf5 	bl	8005506 <clust2sect>
 8005d1c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d24:	461a      	mov	r2, r3
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <dir_sdi+0x136>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e02e      	b.n	8005d92 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d40:	895b      	ldrh	r3, [r3, #10]
 8005d42:	095b      	lsrs	r3, r3, #5
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	461a      	mov	r2, r3
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	4413      	add	r3, r2
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d58:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4618      	mov	r0, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d70:	895b      	ldrh	r3, [r3, #10]
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	461a      	mov	r2, r3
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d7e:	fb01 f202 	mul.w	r2, r1, r2
 8005d82:	1a9b      	subs	r3, r3, r2
 8005d84:	015b      	lsls	r3, r3, #5
 8005d86:	4403      	add	r3, r0
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d8e:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3718      	adds	r7, #24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005d9a:	b590      	push	{r4, r7, lr}
 8005d9c:	b087      	sub	sp, #28
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005daa:	88db      	ldrh	r3, [r3, #6]
 8005dac:	3301      	adds	r3, #1
 8005dae:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d005      	beq.n	8005dc4 <dir_next+0x2a>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <dir_next+0x2e>
		return FR_NO_FILE;
 8005dc4:	2304      	movs	r3, #4
 8005dc6:	e12e      	b.n	8006026 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dd4:	895b      	ldrh	r3, [r3, #10]
 8005dd6:	095b      	lsrs	r3, r3, #5
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	461a      	mov	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	fbb3 f1f2 	udiv	r1, r3, r2
 8005de2:	fb01 f202 	mul.w	r2, r1, r2
 8005de6:	1a9b      	subs	r3, r3, r2
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f040 80fa 	bne.w	8005fe2 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	3301      	adds	r3, #1
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005dfe:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10d      	bne.n	8005e28 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e18:	891b      	ldrh	r3, [r3, #8]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	f0c0 80df 	bcc.w	8005fe2 <dir_next+0x248>
				return FR_NO_FILE;
 8005e24:	2304      	movs	r3, #4
 8005e26:	e0fe      	b.n	8006026 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e34:	895b      	ldrh	r3, [r3, #10]
 8005e36:	095b      	lsrs	r3, r3, #5
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e48:	6812      	ldr	r2, [r2, #0]
 8005e4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e4e:	7892      	ldrb	r2, [r2, #2]
 8005e50:	3a01      	subs	r2, #1
 8005e52:	4013      	ands	r3, r2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f040 80c4 	bne.w	8005fe2 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	4610      	mov	r0, r2
 8005e6e:	f7ff fb6e 	bl	800554e <get_fat>
 8005e72:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d801      	bhi.n	8005e7e <dir_next+0xe4>
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	e0d3      	b.n	8006026 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e84:	d101      	bne.n	8005e8a <dir_next+0xf0>
 8005e86:	2301      	movs	r3, #1
 8005e88:	e0cd      	b.n	8006026 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	f0c0 808e 	bcc.w	8005fbc <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <dir_next+0x110>
 8005ea6:	2304      	movs	r3, #4
 8005ea8:	e0bd      	b.n	8006026 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	4619      	mov	r1, r3
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	f7ff fdf6 	bl	8005aae <create_chain>
 8005ec2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <dir_next+0x134>
 8005eca:	2307      	movs	r3, #7
 8005ecc:	e0ab      	b.n	8006026 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <dir_next+0x13e>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e0a6      	b.n	8006026 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ede:	d101      	bne.n	8005ee4 <dir_next+0x14a>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e0a0      	b.n	8006026 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7ff f9c7 	bl	8005280 <sync_window>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <dir_next+0x162>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e094      	b.n	8006026 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4618      	mov	r0, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f12:	895b      	ldrh	r3, [r3, #10]
 8005f14:	461a      	mov	r2, r3
 8005f16:	2100      	movs	r1, #0
 8005f18:	f7fe ff9a 	bl	8004e50 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f2a:	681c      	ldr	r4, [r3, #0]
 8005f2c:	6979      	ldr	r1, [r7, #20]
 8005f2e:	4610      	mov	r0, r2
 8005f30:	f7ff fae9 	bl	8005506 <clust2sect>
 8005f34:	4603      	mov	r3, r0
 8005f36:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8005f3a:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	613b      	str	r3, [r7, #16]
 8005f40:	e021      	b.n	8005f86 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f4e:	2201      	movs	r2, #1
 8005f50:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7ff f990 	bl	8005280 <sync_window>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <dir_next+0x1d0>
 8005f66:	2301      	movs	r3, #1
 8005f68:	e05d      	b.n	8006026 <dir_next+0x28c>
						dp->fs->winsect++;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8005f76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005f78:	3201      	adds	r2, #1
 8005f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f7e:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	3301      	adds	r3, #1
 8005f84:	613b      	str	r3, [r7, #16]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f92:	789b      	ldrb	r3, [r3, #2]
 8005f94:	461a      	mov	r2, r3
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d3d2      	bcc.n	8005f42 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	1acb      	subs	r3, r1, r3
 8005fb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005fba:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6979      	ldr	r1, [r7, #20]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7ff fa97 	bl	8005506 <clust2sect>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe0:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fec:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006004:	895b      	ldrh	r3, [r3, #10]
 8006006:	095b      	lsrs	r3, r3, #5
 8006008:	b29b      	uxth	r3, r3
 800600a:	461a      	mov	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006012:	fb01 f202 	mul.w	r2, r1, r2
 8006016:	1a9b      	subs	r3, r3, r2
 8006018:	015b      	lsls	r3, r3, #5
 800601a:	4403      	add	r3, r0
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006022:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	371c      	adds	r7, #28
 800602a:	46bd      	mov	sp, r7
 800602c:	bd90      	pop	{r4, r7, pc}

0800602e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b084      	sub	sp, #16
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8006038:	2100      	movs	r1, #0
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff fddf 	bl	8005bfe <dir_sdi>
 8006040:	4603      	mov	r3, r0
 8006042:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006044:	7bfb      	ldrb	r3, [r7, #15]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d135      	bne.n	80060b6 <dir_alloc+0x88>
		n = 0;
 800604a:	2300      	movs	r3, #0
 800604c:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	4619      	mov	r1, r3
 8006060:	4610      	mov	r0, r2
 8006062:	f7ff f95f 	bl	8005324 <move_window>
 8006066:	4603      	mov	r3, r0
 8006068:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800606a:	7bfb      	ldrb	r3, [r7, #15]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d121      	bne.n	80060b4 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	2be5      	cmp	r3, #229	; 0xe5
 800607c:	d006      	beq.n	800608c <dir_alloc+0x5e>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d107      	bne.n	800609c <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	3301      	adds	r3, #1
 8006090:	60bb      	str	r3, [r7, #8]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d102      	bne.n	80060a0 <dir_alloc+0x72>
 800609a:	e00c      	b.n	80060b6 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800609c:	2300      	movs	r3, #0
 800609e:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80060a0:	2101      	movs	r1, #1
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7ff fe79 	bl	8005d9a <dir_next>
 80060a8:	4603      	mov	r3, r0
 80060aa:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d0cd      	beq.n	800604e <dir_alloc+0x20>
 80060b2:	e000      	b.n	80060b6 <dir_alloc+0x88>
			if (res != FR_OK) break;
 80060b4:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80060b6:	7bfb      	ldrb	r3, [r7, #15]
 80060b8:	2b04      	cmp	r3, #4
 80060ba:	d101      	bne.n	80060c0 <dir_alloc+0x92>
 80060bc:	2307      	movs	r3, #7
 80060be:	73fb      	strb	r3, [r7, #15]
	return res;
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b085      	sub	sp, #20
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
 80060d2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	331b      	adds	r3, #27
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	021b      	lsls	r3, r3, #8
 80060dc:	b21a      	sxth	r2, r3
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	331a      	adds	r3, #26
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	b21b      	sxth	r3, r3
 80060e6:	4313      	orrs	r3, r2
 80060e8:	b21b      	sxth	r3, r3
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	2b03      	cmp	r3, #3
 80060f8:	d10f      	bne.n	800611a <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	3315      	adds	r3, #21
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	021b      	lsls	r3, r3, #8
 8006102:	b21a      	sxth	r2, r3
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	3314      	adds	r3, #20
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	b21b      	sxth	r3, r3
 800610c:	4313      	orrs	r3, r2
 800610e:	b21b      	sxth	r3, r3
 8006110:	b29b      	uxth	r3, r3
 8006112:	041b      	lsls	r3, r3, #16
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]

	return cl;
 800611a:	68fb      	ldr	r3, [r7, #12]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	bc80      	pop	{r7}
 8006124:	4770      	bx	lr

08006126 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8006126:	b480      	push	{r7}
 8006128:	b083      	sub	sp, #12
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	331a      	adds	r3, #26
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	b2d2      	uxtb	r2, r2
 8006138:	701a      	strb	r2, [r3, #0]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	b29b      	uxth	r3, r3
 800613e:	0a1b      	lsrs	r3, r3, #8
 8006140:	b29a      	uxth	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	331b      	adds	r3, #27
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	0c1a      	lsrs	r2, r3, #16
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	3314      	adds	r3, #20
 8006152:	b2d2      	uxtb	r2, r2
 8006154:	701a      	strb	r2, [r3, #0]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	0c1b      	lsrs	r3, r3, #16
 800615a:	b29b      	uxth	r3, r3
 800615c:	0a1b      	lsrs	r3, r3, #8
 800615e:	b29a      	uxth	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3315      	adds	r3, #21
 8006164:	b2d2      	uxtb	r2, r2
 8006166:	701a      	strb	r2, [r3, #0]
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	bc80      	pop	{r7}
 8006170:	4770      	bx	lr
	...

08006174 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b086      	sub	sp, #24
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006186:	1e5a      	subs	r2, r3, #1
 8006188:	4613      	mov	r3, r2
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8006194:	2300      	movs	r3, #0
 8006196:	613b      	str	r3, [r7, #16]
 8006198:	2301      	movs	r3, #1
 800619a:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800619c:	4a2b      	ldr	r2, [pc, #172]	; (800624c <cmp_lfn+0xd8>)
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	4413      	add	r3, r2
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	3301      	adds	r3, #1
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	4413      	add	r3, r2
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	021b      	lsls	r3, r3, #8
 80061ae:	b21a      	sxth	r2, r3
 80061b0:	4926      	ldr	r1, [pc, #152]	; (800624c <cmp_lfn+0xd8>)
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	440b      	add	r3, r1
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	4619      	mov	r1, r3
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	440b      	add	r3, r1
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	b21b      	sxth	r3, r3
 80061c2:	4313      	orrs	r3, r2
 80061c4:	b21b      	sxth	r3, r3
 80061c6:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 80061c8:	89fb      	ldrh	r3, [r7, #14]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d019      	beq.n	8006202 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80061ce:	89bb      	ldrh	r3, [r7, #12]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f001 fe93 	bl	8007efc <ff_wtoupper>
 80061d6:	4603      	mov	r3, r0
 80061d8:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2bfe      	cmp	r3, #254	; 0xfe
 80061de:	d80e      	bhi.n	80061fe <cmp_lfn+0x8a>
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	617a      	str	r2, [r7, #20]
 80061e6:	005b      	lsls	r3, r3, #1
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	4413      	add	r3, r2
 80061ec:	881b      	ldrh	r3, [r3, #0]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f001 fe84 	bl	8007efc <ff_wtoupper>
 80061f4:	4603      	mov	r3, r0
 80061f6:	461a      	mov	r2, r3
 80061f8:	89fb      	ldrh	r3, [r7, #14]
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d008      	beq.n	8006210 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 80061fe:	2300      	movs	r3, #0
 8006200:	e01f      	b.n	8006242 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8006202:	89bb      	ldrh	r3, [r7, #12]
 8006204:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006208:	4293      	cmp	r3, r2
 800620a:	d001      	beq.n	8006210 <cmp_lfn+0x9c>
 800620c:	2300      	movs	r3, #0
 800620e:	e018      	b.n	8006242 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	3301      	adds	r3, #1
 8006214:	613b      	str	r3, [r7, #16]
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	2b0c      	cmp	r3, #12
 800621a:	d9bf      	bls.n	800619c <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00b      	beq.n	8006240 <cmp_lfn+0xcc>
 8006228:	89fb      	ldrh	r3, [r7, #14]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d008      	beq.n	8006240 <cmp_lfn+0xcc>
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	4413      	add	r3, r2
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <cmp_lfn+0xcc>
		return 0;
 800623c:	2300      	movs	r3, #0
 800623e:	e000      	b.n	8006242 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8006240:	2301      	movs	r3, #1
}
 8006242:	4618      	mov	r0, r3
 8006244:	3718      	adds	r7, #24
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	08008290 	.word	0x08008290

08006250 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8006250:	b480      	push	{r7}
 8006252:	b089      	sub	sp, #36	; 0x24
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	4611      	mov	r1, r2
 800625c:	461a      	mov	r2, r3
 800625e:	460b      	mov	r3, r1
 8006260:	71fb      	strb	r3, [r7, #7]
 8006262:	4613      	mov	r3, r2
 8006264:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	330d      	adds	r3, #13
 800626a:	79ba      	ldrb	r2, [r7, #6]
 800626c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	330b      	adds	r3, #11
 8006272:	220f      	movs	r2, #15
 8006274:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	330c      	adds	r3, #12
 800627a:	2200      	movs	r2, #0
 800627c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	331a      	adds	r3, #26
 8006282:	2200      	movs	r2, #0
 8006284:	701a      	strb	r2, [r3, #0]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	331b      	adds	r3, #27
 800628a:	2200      	movs	r2, #0
 800628c:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800628e:	79fb      	ldrb	r3, [r7, #7]
 8006290:	1e5a      	subs	r2, r3, #1
 8006292:	4613      	mov	r3, r2
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	4413      	add	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800629e:	2300      	movs	r3, #0
 80062a0:	82fb      	strh	r3, [r7, #22]
 80062a2:	2300      	movs	r3, #0
 80062a4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80062a6:	8afb      	ldrh	r3, [r7, #22]
 80062a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d007      	beq.n	80062c0 <fit_lfn+0x70>
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	61fa      	str	r2, [r7, #28]
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	4413      	add	r3, r2
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80062c0:	4a1c      	ldr	r2, [pc, #112]	; (8006334 <fit_lfn+0xe4>)
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	4413      	add	r3, r2
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	461a      	mov	r2, r3
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	4413      	add	r3, r2
 80062ce:	8afa      	ldrh	r2, [r7, #22]
 80062d0:	b2d2      	uxtb	r2, r2
 80062d2:	701a      	strb	r2, [r3, #0]
 80062d4:	8afb      	ldrh	r3, [r7, #22]
 80062d6:	0a1b      	lsrs	r3, r3, #8
 80062d8:	b299      	uxth	r1, r3
 80062da:	4a16      	ldr	r2, [pc, #88]	; (8006334 <fit_lfn+0xe4>)
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	4413      	add	r3, r2
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	3301      	adds	r3, #1
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	4413      	add	r3, r2
 80062e8:	b2ca      	uxtb	r2, r1
 80062ea:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 80062ec:	8afb      	ldrh	r3, [r7, #22]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d102      	bne.n	80062f8 <fit_lfn+0xa8>
 80062f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062f6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	3301      	adds	r3, #1
 80062fc:	61bb      	str	r3, [r7, #24]
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	2b0c      	cmp	r3, #12
 8006302:	d9d0      	bls.n	80062a6 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8006304:	8afb      	ldrh	r3, [r7, #22]
 8006306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800630a:	4293      	cmp	r3, r2
 800630c:	d006      	beq.n	800631c <fit_lfn+0xcc>
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	4413      	add	r3, r2
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d103      	bne.n	8006324 <fit_lfn+0xd4>
 800631c:	79fb      	ldrb	r3, [r7, #7]
 800631e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006322:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	79fa      	ldrb	r2, [r7, #7]
 8006328:	701a      	strb	r2, [r3, #0]
}
 800632a:	bf00      	nop
 800632c:	3724      	adds	r7, #36	; 0x24
 800632e:	46bd      	mov	sp, r7
 8006330:	bc80      	pop	{r7}
 8006332:	4770      	bx	lr
 8006334:	08008290 	.word	0x08008290

08006338 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08c      	sub	sp, #48	; 0x30
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
 8006344:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006346:	220b      	movs	r2, #11
 8006348:	68b9      	ldr	r1, [r7, #8]
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f7fe fd62 	bl	8004e14 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2b05      	cmp	r3, #5
 8006354:	d92b      	bls.n	80063ae <gen_numname+0x76>
		sr = seq;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800635a:	e022      	b.n	80063a2 <gen_numname+0x6a>
			wc = *lfn++;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	1c9a      	adds	r2, r3, #2
 8006360:	607a      	str	r2, [r7, #4]
 8006362:	881b      	ldrh	r3, [r3, #0]
 8006364:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006366:	2300      	movs	r3, #0
 8006368:	62bb      	str	r3, [r7, #40]	; 0x28
 800636a:	e017      	b.n	800639c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	005a      	lsls	r2, r3, #1
 8006370:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	4413      	add	r3, r2
 8006378:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800637a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800637c:	085b      	lsrs	r3, r3, #1
 800637e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d005      	beq.n	8006396 <gen_numname+0x5e>
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006390:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006394:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006398:	3301      	adds	r3, #1
 800639a:	62bb      	str	r3, [r7, #40]	; 0x28
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	2b0f      	cmp	r3, #15
 80063a0:	d9e4      	bls.n	800636c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	881b      	ldrh	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1d8      	bne.n	800635c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80063ae:	2307      	movs	r3, #7
 80063b0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	f003 030f 	and.w	r3, r3, #15
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	3330      	adds	r3, #48	; 0x30
 80063be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80063c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80063c6:	2b39      	cmp	r3, #57	; 0x39
 80063c8:	d904      	bls.n	80063d4 <gen_numname+0x9c>
 80063ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80063ce:	3307      	adds	r3, #7
 80063d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80063d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d6:	1e5a      	subs	r2, r3, #1
 80063d8:	62ba      	str	r2, [r7, #40]	; 0x28
 80063da:	3330      	adds	r3, #48	; 0x30
 80063dc:	443b      	add	r3, r7
 80063de:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80063e2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	091b      	lsrs	r3, r3, #4
 80063ea:	603b      	str	r3, [r7, #0]
	} while (seq);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1df      	bne.n	80063b2 <gen_numname+0x7a>
	ns[i] = '~';
 80063f2:	f107 0214 	add.w	r2, r7, #20
 80063f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f8:	4413      	add	r3, r2
 80063fa:	227e      	movs	r2, #126	; 0x7e
 80063fc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80063fe:	2300      	movs	r3, #0
 8006400:	627b      	str	r3, [r7, #36]	; 0x24
 8006402:	e002      	b.n	800640a <gen_numname+0xd2>
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	3301      	adds	r3, #1
 8006408:	627b      	str	r3, [r7, #36]	; 0x24
 800640a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800640c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640e:	429a      	cmp	r2, r3
 8006410:	d205      	bcs.n	800641e <gen_numname+0xe6>
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	4413      	add	r3, r2
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	2b20      	cmp	r3, #32
 800641c:	d1f2      	bne.n	8006404 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800641e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006420:	2b07      	cmp	r3, #7
 8006422:	d807      	bhi.n	8006434 <gen_numname+0xfc>
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	62ba      	str	r2, [r7, #40]	; 0x28
 800642a:	3330      	adds	r3, #48	; 0x30
 800642c:	443b      	add	r3, r7
 800642e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006432:	e000      	b.n	8006436 <gen_numname+0xfe>
 8006434:	2120      	movs	r1, #32
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	1c5a      	adds	r2, r3, #1
 800643a:	627a      	str	r2, [r7, #36]	; 0x24
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	4413      	add	r3, r2
 8006440:	460a      	mov	r2, r1
 8006442:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	2b07      	cmp	r3, #7
 8006448:	d9e9      	bls.n	800641e <gen_numname+0xe6>
}
 800644a:	bf00      	nop
 800644c:	bf00      	nop
 800644e:	3730      	adds	r7, #48	; 0x30
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800645c:	2300      	movs	r3, #0
 800645e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006460:	230b      	movs	r3, #11
 8006462:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8006464:	7bfb      	ldrb	r3, [r7, #15]
 8006466:	b2da      	uxtb	r2, r3
 8006468:	0852      	lsrs	r2, r2, #1
 800646a:	01db      	lsls	r3, r3, #7
 800646c:	4313      	orrs	r3, r2
 800646e:	b2da      	uxtb	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	1c59      	adds	r1, r3, #1
 8006474:	6079      	str	r1, [r7, #4]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	4413      	add	r3, r2
 800647a:	73fb      	strb	r3, [r7, #15]
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	3b01      	subs	r3, #1
 8006480:	60bb      	str	r3, [r7, #8]
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1ed      	bne.n	8006464 <sum_sfn+0x10>
	return sum;
 8006488:	7bfb      	ldrb	r3, [r7, #15]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	bc80      	pop	{r7}
 8006492:	4770      	bx	lr

08006494 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800649c:	2100      	movs	r1, #0
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7ff fbad 	bl	8005bfe <dir_sdi>
 80064a4:	4603      	mov	r3, r0
 80064a6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80064a8:	7dfb      	ldrb	r3, [r7, #23]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <dir_find+0x1e>
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
 80064b0:	e0b8      	b.n	8006624 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80064b2:	23ff      	movs	r3, #255	; 0xff
 80064b4:	753b      	strb	r3, [r7, #20]
 80064b6:	7d3b      	ldrb	r3, [r7, #20]
 80064b8:	757b      	strb	r3, [r7, #21]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064c4:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	4619      	mov	r1, r3
 80064d8:	4610      	mov	r0, r2
 80064da:	f7fe ff23 	bl	8005324 <move_window>
 80064de:	4603      	mov	r3, r0
 80064e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f040 8097 	bne.w	8006618 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80064fa:	7dbb      	ldrb	r3, [r7, #22]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d102      	bne.n	8006506 <dir_find+0x72>
 8006500:	2304      	movs	r3, #4
 8006502:	75fb      	strb	r3, [r7, #23]
 8006504:	e08d      	b.n	8006622 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	330b      	adds	r3, #11
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006510:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006512:	7dbb      	ldrb	r3, [r7, #22]
 8006514:	2be5      	cmp	r3, #229	; 0xe5
 8006516:	d007      	beq.n	8006528 <dir_find+0x94>
 8006518:	7bfb      	ldrb	r3, [r7, #15]
 800651a:	f003 0308 	and.w	r3, r3, #8
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00b      	beq.n	800653a <dir_find+0xa6>
 8006522:	7bfb      	ldrb	r3, [r7, #15]
 8006524:	2b0f      	cmp	r3, #15
 8006526:	d008      	beq.n	800653a <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006528:	23ff      	movs	r3, #255	; 0xff
 800652a:	757b      	strb	r3, [r7, #21]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006532:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006536:	849a      	strh	r2, [r3, #36]	; 0x24
 8006538:	e063      	b.n	8006602 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800653a:	7bfb      	ldrb	r3, [r7, #15]
 800653c:	2b0f      	cmp	r3, #15
 800653e:	d137      	bne.n	80065b0 <dir_find+0x11c>
				if (dp->lfn) {
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006546:	6a1b      	ldr	r3, [r3, #32]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d05a      	beq.n	8006602 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800654c:	7dbb      	ldrb	r3, [r7, #22]
 800654e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006552:	2b00      	cmp	r3, #0
 8006554:	d010      	beq.n	8006578 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	7b5b      	ldrb	r3, [r3, #13]
 800655a:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800655c:	7dbb      	ldrb	r3, [r7, #22]
 800655e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006562:	75bb      	strb	r3, [r7, #22]
 8006564:	7dbb      	ldrb	r3, [r7, #22]
 8006566:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800656e:	88da      	ldrh	r2, [r3, #6]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006576:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8006578:	7dba      	ldrb	r2, [r7, #22]
 800657a:	7d7b      	ldrb	r3, [r7, #21]
 800657c:	429a      	cmp	r2, r3
 800657e:	d114      	bne.n	80065aa <dir_find+0x116>
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	330d      	adds	r3, #13
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	7d3a      	ldrb	r2, [r7, #20]
 8006588:	429a      	cmp	r2, r3
 800658a:	d10e      	bne.n	80065aa <dir_find+0x116>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	6939      	ldr	r1, [r7, #16]
 8006596:	4618      	mov	r0, r3
 8006598:	f7ff fdec 	bl	8006174 <cmp_lfn>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <dir_find+0x116>
 80065a2:	7d7b      	ldrb	r3, [r7, #21]
 80065a4:	3b01      	subs	r3, #1
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	e000      	b.n	80065ac <dir_find+0x118>
 80065aa:	23ff      	movs	r3, #255	; 0xff
 80065ac:	757b      	strb	r3, [r7, #21]
 80065ae:	e028      	b.n	8006602 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80065b0:	7d7b      	ldrb	r3, [r7, #21]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d107      	bne.n	80065c6 <dir_find+0x132>
 80065b6:	6938      	ldr	r0, [r7, #16]
 80065b8:	f7ff ff4c 	bl	8006454 <sum_sfn>
 80065bc:	4603      	mov	r3, r0
 80065be:	461a      	mov	r2, r3
 80065c0:	7d3b      	ldrb	r3, [r7, #20]
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d02a      	beq.n	800661c <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	330b      	adds	r3, #11
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10b      	bne.n	80065f2 <dir_find+0x15e>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	220b      	movs	r2, #11
 80065e4:	4619      	mov	r1, r3
 80065e6:	6938      	ldr	r0, [r7, #16]
 80065e8:	f7fe fc4c 	bl	8004e84 <mem_cmp>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d016      	beq.n	8006620 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80065f2:	23ff      	movs	r3, #255	; 0xff
 80065f4:	757b      	strb	r3, [r7, #21]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006600:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006602:	2100      	movs	r1, #0
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f7ff fbc8 	bl	8005d9a <dir_next>
 800660a:	4603      	mov	r3, r0
 800660c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800660e:	7dfb      	ldrb	r3, [r7, #23]
 8006610:	2b00      	cmp	r3, #0
 8006612:	f43f af58 	beq.w	80064c6 <dir_find+0x32>
 8006616:	e004      	b.n	8006622 <dir_find+0x18e>
		if (res != FR_OK) break;
 8006618:	bf00      	nop
 800661a:	e002      	b.n	8006622 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800661c:	bf00      	nop
 800661e:	e000      	b.n	8006622 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006620:	bf00      	nop

	return res;
 8006622:	7dfb      	ldrb	r3, [r7, #23]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3718      	adds	r7, #24
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b08c      	sub	sp, #48	; 0x30
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	623b      	str	r3, [r7, #32]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8006648:	f107 030c 	add.w	r3, r7, #12
 800664c:	220c      	movs	r2, #12
 800664e:	6a39      	ldr	r1, [r7, #32]
 8006650:	4618      	mov	r0, r3
 8006652:	f7fe fbdf 	bl	8004e14 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006656:	7dfb      	ldrb	r3, [r7, #23]
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b00      	cmp	r3, #0
 800665e:	d03b      	beq.n	80066d8 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	330b      	adds	r3, #11
 8006664:	2200      	movs	r2, #0
 8006666:	701a      	strb	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800666e:	461a      	mov	r2, r3
 8006670:	2300      	movs	r3, #0
 8006672:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8006674:	2301      	movs	r3, #1
 8006676:	62bb      	str	r3, [r7, #40]	; 0x28
 8006678:	e013      	b.n	80066a2 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800667a:	f107 010c 	add.w	r1, r7, #12
 800667e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006680:	69fa      	ldr	r2, [r7, #28]
 8006682:	6a38      	ldr	r0, [r7, #32]
 8006684:	f7ff fe58 	bl	8006338 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7ff ff03 	bl	8006494 <dir_find>
 800668e:	4603      	mov	r3, r0
 8006690:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006694:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006698:	2b00      	cmp	r3, #0
 800669a:	d106      	bne.n	80066aa <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800669c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669e:	3301      	adds	r3, #1
 80066a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80066a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a4:	2b63      	cmp	r3, #99	; 0x63
 80066a6:	d9e8      	bls.n	800667a <dir_register+0x4e>
 80066a8:	e000      	b.n	80066ac <dir_register+0x80>
			if (res != FR_OK) break;
 80066aa:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80066ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ae:	2b64      	cmp	r3, #100	; 0x64
 80066b0:	d101      	bne.n	80066b6 <dir_register+0x8a>
 80066b2:	2307      	movs	r3, #7
 80066b4:	e0d8      	b.n	8006868 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80066b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066ba:	2b04      	cmp	r3, #4
 80066bc:	d002      	beq.n	80066c4 <dir_register+0x98>
 80066be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066c2:	e0d1      	b.n	8006868 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 80066c4:	6a3b      	ldr	r3, [r7, #32]
 80066c6:	330b      	adds	r3, #11
 80066c8:	7dfa      	ldrb	r2, [r7, #23]
 80066ca:	701a      	strb	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066d2:	461a      	mov	r2, r3
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 80066d8:	7dfb      	ldrb	r3, [r7, #23]
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d014      	beq.n	800670c <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 80066e2:	2300      	movs	r3, #0
 80066e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80066e6:	e002      	b.n	80066ee <dir_register+0xc2>
 80066e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ea:	3301      	adds	r3, #1
 80066ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80066ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	69fa      	ldr	r2, [r7, #28]
 80066f4:	4413      	add	r3, r2
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1f5      	bne.n	80066e8 <dir_register+0xbc>
		nent = (n + 25) / 13;
 80066fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fe:	3319      	adds	r3, #25
 8006700:	4a5b      	ldr	r2, [pc, #364]	; (8006870 <dir_register+0x244>)
 8006702:	fba2 2303 	umull	r2, r3, r2, r3
 8006706:	089b      	lsrs	r3, r3, #2
 8006708:	627b      	str	r3, [r7, #36]	; 0x24
 800670a:	e001      	b.n	8006710 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800670c:	2301      	movs	r3, #1
 800670e:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006710:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7ff fc8b 	bl	800602e <dir_alloc>
 8006718:	4603      	mov	r3, r0
 800671a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800671e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006722:	2b00      	cmp	r3, #0
 8006724:	d15b      	bne.n	80067de <dir_register+0x1b2>
 8006726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006728:	3b01      	subs	r3, #1
 800672a:	627b      	str	r3, [r7, #36]	; 0x24
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	2b00      	cmp	r3, #0
 8006730:	d055      	beq.n	80067de <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006738:	88db      	ldrh	r3, [r3, #6]
 800673a:	461a      	mov	r2, r3
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	4619      	mov	r1, r3
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7ff fa5b 	bl	8005bfe <dir_sdi>
 8006748:	4603      	mov	r3, r0
 800674a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800674e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006752:	2b00      	cmp	r3, #0
 8006754:	d143      	bne.n	80067de <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	4618      	mov	r0, r3
 8006760:	f7ff fe78 	bl	8006454 <sum_sfn>
 8006764:	4603      	mov	r3, r0
 8006766:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	4619      	mov	r1, r3
 800677a:	4610      	mov	r0, r2
 800677c:	f7fe fdd2 	bl	8005324 <move_window>
 8006780:	4603      	mov	r3, r0
 8006782:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006786:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800678a:	2b00      	cmp	r3, #0
 800678c:	d126      	bne.n	80067dc <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006794:	6a18      	ldr	r0, [r3, #32]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800679c:	6959      	ldr	r1, [r3, #20]
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	7efb      	ldrb	r3, [r7, #27]
 80067a4:	f7ff fd54 	bl	8006250 <fit_lfn>
				dp->fs->wflag = 1;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067b4:	2201      	movs	r2, #1
 80067b6:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 80067b8:	2100      	movs	r1, #0
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f7ff faed 	bl	8005d9a <dir_next>
 80067c0:	4603      	mov	r3, r0
 80067c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80067c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d107      	bne.n	80067de <dir_register+0x1b2>
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	3b01      	subs	r3, #1
 80067d2:	627b      	str	r3, [r7, #36]	; 0x24
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1c6      	bne.n	8006768 <dir_register+0x13c>
 80067da:	e000      	b.n	80067de <dir_register+0x1b2>
				if (res != FR_OK) break;
 80067dc:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80067de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d13e      	bne.n	8006864 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	4619      	mov	r1, r3
 80067f8:	4610      	mov	r0, r2
 80067fa:	f7fe fd93 	bl	8005324 <move_window>
 80067fe:	4603      	mov	r3, r0
 8006800:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006804:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006808:	2b00      	cmp	r3, #0
 800680a:	d12b      	bne.n	8006864 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	2220      	movs	r2, #32
 8006816:	2100      	movs	r1, #0
 8006818:	4618      	mov	r0, r3
 800681a:	f7fe fb19 	bl	8004e50 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006824:	6958      	ldr	r0, [r3, #20]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	220b      	movs	r2, #11
 8006830:	4619      	mov	r1, r3
 8006832:	f7fe faef 	bl	8004e14 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	330b      	adds	r3, #11
 8006840:	781a      	ldrb	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	330c      	adds	r3, #12
 800684c:	f002 0218 	and.w	r2, r2, #24
 8006850:	b2d2      	uxtb	r2, r2
 8006852:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006860:	2201      	movs	r2, #1
 8006862:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8006864:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006868:	4618      	mov	r0, r3
 800686a:	3730      	adds	r7, #48	; 0x30
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	4ec4ec4f 	.word	0x4ec4ec4f

08006874 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b08a      	sub	sp, #40	; 0x28
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	613b      	str	r3, [r7, #16]
 8006884:	e002      	b.n	800688c <create_name+0x18>
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	3301      	adds	r3, #1
 800688a:	613b      	str	r3, [r7, #16]
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	2b2f      	cmp	r3, #47	; 0x2f
 8006892:	d0f8      	beq.n	8006886 <create_name+0x12>
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	2b5c      	cmp	r3, #92	; 0x5c
 800689a:	d0f4      	beq.n	8006886 <create_name+0x12>
	lfn = dp->lfn;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068a2:	6a1b      	ldr	r3, [r3, #32]
 80068a4:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 80068a6:	2300      	movs	r3, #0
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	1c5a      	adds	r2, r3, #1
 80068b2:	61ba      	str	r2, [r7, #24]
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	4413      	add	r3, r2
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80068bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068be:	2b1f      	cmp	r3, #31
 80068c0:	d92f      	bls.n	8006922 <create_name+0xae>
 80068c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068c4:	2b2f      	cmp	r3, #47	; 0x2f
 80068c6:	d02c      	beq.n	8006922 <create_name+0xae>
 80068c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068ca:	2b5c      	cmp	r3, #92	; 0x5c
 80068cc:	d029      	beq.n	8006922 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2bfe      	cmp	r3, #254	; 0xfe
 80068d2:	d901      	bls.n	80068d8 <create_name+0x64>
			return FR_INVALID_NAME;
 80068d4:	2306      	movs	r3, #6
 80068d6:	e186      	b.n	8006be6 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 80068d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80068de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068e0:	2101      	movs	r1, #1
 80068e2:	4618      	mov	r0, r3
 80068e4:	f001 fad0 	bl	8007e88 <ff_convert>
 80068e8:	4603      	mov	r3, r0
 80068ea:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80068ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <create_name+0x82>
 80068f2:	2306      	movs	r3, #6
 80068f4:	e177      	b.n	8006be6 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80068f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068f8:	2b7f      	cmp	r3, #127	; 0x7f
 80068fa:	d809      	bhi.n	8006910 <create_name+0x9c>
 80068fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068fe:	4619      	mov	r1, r3
 8006900:	488e      	ldr	r0, [pc, #568]	; (8006b3c <create_name+0x2c8>)
 8006902:	f7fe fae5 	bl	8004ed0 <chk_chr>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <create_name+0x9c>
			return FR_INVALID_NAME;
 800690c:	2306      	movs	r3, #6
 800690e:	e16a      	b.n	8006be6 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	617a      	str	r2, [r7, #20]
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	4413      	add	r3, r2
 800691c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800691e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006920:	e7c5      	b.n	80068ae <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	441a      	add	r2, r3
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800692c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800692e:	2b1f      	cmp	r3, #31
 8006930:	d801      	bhi.n	8006936 <create_name+0xc2>
 8006932:	2304      	movs	r3, #4
 8006934:	e000      	b.n	8006938 <create_name+0xc4>
 8006936:	2300      	movs	r3, #0
 8006938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800693c:	e011      	b.n	8006962 <create_name+0xee>
		w = lfn[di - 1];
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006944:	3b01      	subs	r3, #1
 8006946:	005b      	lsls	r3, r3, #1
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	4413      	add	r3, r2
 800694c:	881b      	ldrh	r3, [r3, #0]
 800694e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006950:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006952:	2b20      	cmp	r3, #32
 8006954:	d002      	beq.n	800695c <create_name+0xe8>
 8006956:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006958:	2b2e      	cmp	r3, #46	; 0x2e
 800695a:	d106      	bne.n	800696a <create_name+0xf6>
		di--;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	3b01      	subs	r3, #1
 8006960:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1ea      	bne.n	800693e <create_name+0xca>
 8006968:	e000      	b.n	800696c <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800696a:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <create_name+0x102>
 8006972:	2306      	movs	r3, #6
 8006974:	e137      	b.n	8006be6 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	005b      	lsls	r3, r3, #1
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	4413      	add	r3, r2
 800697e:	2200      	movs	r2, #0
 8006980:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	220b      	movs	r2, #11
 800698c:	2120      	movs	r1, #32
 800698e:	4618      	mov	r0, r3
 8006990:	f7fe fa5e 	bl	8004e50 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006994:	2300      	movs	r3, #0
 8006996:	61bb      	str	r3, [r7, #24]
 8006998:	e002      	b.n	80069a0 <create_name+0x12c>
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	3301      	adds	r3, #1
 800699e:	61bb      	str	r3, [r7, #24]
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	4413      	add	r3, r2
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	d0f5      	beq.n	800699a <create_name+0x126>
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	005b      	lsls	r3, r3, #1
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	4413      	add	r3, r2
 80069b6:	881b      	ldrh	r3, [r3, #0]
 80069b8:	2b2e      	cmp	r3, #46	; 0x2e
 80069ba:	d0ee      	beq.n	800699a <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d009      	beq.n	80069d6 <create_name+0x162>
 80069c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069c6:	f043 0303 	orr.w	r3, r3, #3
 80069ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80069ce:	e002      	b.n	80069d6 <create_name+0x162>
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	617b      	str	r3, [r7, #20]
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d009      	beq.n	80069f0 <create_name+0x17c>
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80069e2:	3b01      	subs	r3, #1
 80069e4:	005b      	lsls	r3, r3, #1
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	4413      	add	r3, r2
 80069ea:	881b      	ldrh	r3, [r3, #0]
 80069ec:	2b2e      	cmp	r3, #46	; 0x2e
 80069ee:	d1ef      	bne.n	80069d0 <create_name+0x15c>

	b = i = 0; ni = 8;
 80069f0:	2300      	movs	r3, #0
 80069f2:	623b      	str	r3, [r7, #32]
 80069f4:	2300      	movs	r3, #0
 80069f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80069fa:	2308      	movs	r3, #8
 80069fc:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	61ba      	str	r2, [r7, #24]
 8006a04:	005b      	lsls	r3, r3, #1
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	4413      	add	r3, r2
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006a0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 8091 	beq.w	8006b38 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006a16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a18:	2b20      	cmp	r3, #32
 8006a1a:	d006      	beq.n	8006a2a <create_name+0x1b6>
 8006a1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a1e:	2b2e      	cmp	r3, #46	; 0x2e
 8006a20:	d10a      	bne.n	8006a38 <create_name+0x1c4>
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d006      	beq.n	8006a38 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 8006a2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a2e:	f043 0303 	orr.w	r3, r3, #3
 8006a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a36:	e07e      	b.n	8006b36 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006a38:	6a3a      	ldr	r2, [r7, #32]
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d203      	bcs.n	8006a48 <create_name+0x1d4>
 8006a40:	69ba      	ldr	r2, [r7, #24]
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d123      	bne.n	8006a90 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	2b0b      	cmp	r3, #11
 8006a4c:	d106      	bne.n	8006a5c <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 8006a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a52:	f043 0303 	orr.w	r3, r3, #3
 8006a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a5a:	e076      	b.n	8006b4a <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d005      	beq.n	8006a70 <create_name+0x1fc>
 8006a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a68:	f043 0303 	orr.w	r3, r3, #3
 8006a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d867      	bhi.n	8006b48 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	61bb      	str	r3, [r7, #24]
 8006a7c:	2308      	movs	r3, #8
 8006a7e:	623b      	str	r3, [r7, #32]
 8006a80:	230b      	movs	r3, #11
 8006a82:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006a84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006a8e:	e052      	b.n	8006b36 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006a90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a92:	2b7f      	cmp	r3, #127	; 0x7f
 8006a94:	d914      	bls.n	8006ac0 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006a96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a98:	2100      	movs	r1, #0
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f001 f9f4 	bl	8007e88 <ff_convert>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006aa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d004      	beq.n	8006ab4 <create_name+0x240>
 8006aaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006aac:	3b80      	subs	r3, #128	; 0x80
 8006aae:	4a24      	ldr	r2, [pc, #144]	; (8006b40 <create_name+0x2cc>)
 8006ab0:	5cd3      	ldrb	r3, [r2, r3]
 8006ab2:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ab8:	f043 0302 	orr.w	r3, r3, #2
 8006abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006ac0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d007      	beq.n	8006ad6 <create_name+0x262>
 8006ac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ac8:	4619      	mov	r1, r3
 8006aca:	481e      	ldr	r0, [pc, #120]	; (8006b44 <create_name+0x2d0>)
 8006acc:	f7fe fa00 	bl	8004ed0 <chk_chr>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d008      	beq.n	8006ae8 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006ad6:	235f      	movs	r3, #95	; 0x5f
 8006ad8:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006ada:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ade:	f043 0303 	orr.w	r3, r3, #3
 8006ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ae6:	e01b      	b.n	8006b20 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006ae8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006aea:	2b40      	cmp	r3, #64	; 0x40
 8006aec:	d909      	bls.n	8006b02 <create_name+0x28e>
 8006aee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006af0:	2b5a      	cmp	r3, #90	; 0x5a
 8006af2:	d806      	bhi.n	8006b02 <create_name+0x28e>
					b |= 2;
 8006af4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006af8:	f043 0302 	orr.w	r3, r3, #2
 8006afc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006b00:	e00e      	b.n	8006b20 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006b02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b04:	2b60      	cmp	r3, #96	; 0x60
 8006b06:	d90b      	bls.n	8006b20 <create_name+0x2ac>
 8006b08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b0a:	2b7a      	cmp	r3, #122	; 0x7a
 8006b0c:	d808      	bhi.n	8006b20 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 8006b0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b12:	f043 0301 	orr.w	r3, r3, #1
 8006b16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006b1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b1c:	3b20      	subs	r3, #32
 8006b1e:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b26:	699a      	ldr	r2, [r3, #24]
 8006b28:	6a3b      	ldr	r3, [r7, #32]
 8006b2a:	1c59      	adds	r1, r3, #1
 8006b2c:	6239      	str	r1, [r7, #32]
 8006b2e:	4413      	add	r3, r2
 8006b30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b32:	b2d2      	uxtb	r2, r2
 8006b34:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8006b36:	e762      	b.n	80069fe <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8006b38:	bf00      	nop
 8006b3a:	e006      	b.n	8006b4a <create_name+0x2d6>
 8006b3c:	080081b0 	.word	0x080081b0
 8006b40:	08008210 	.word	0x08008210
 8006b44:	080081bc 	.word	0x080081bc
			if (si > di) break;			/* No extension */
 8006b48:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2be5      	cmp	r3, #229	; 0xe5
 8006b56:	d105      	bne.n	8006b64 <create_name+0x2f0>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	2205      	movs	r2, #5
 8006b62:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	2b08      	cmp	r3, #8
 8006b68:	d104      	bne.n	8006b74 <create_name+0x300>
 8006b6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8006b74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b78:	f003 030c 	and.w	r3, r3, #12
 8006b7c:	2b0c      	cmp	r3, #12
 8006b7e:	d005      	beq.n	8006b8c <create_name+0x318>
 8006b80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b84:	f003 0303 	and.w	r3, r3, #3
 8006b88:	2b03      	cmp	r3, #3
 8006b8a:	d105      	bne.n	8006b98 <create_name+0x324>
		cf |= NS_LFN;
 8006b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b90:	f043 0302 	orr.w	r3, r3, #2
 8006b94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006b98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d117      	bne.n	8006bd4 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006ba4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ba8:	f003 0303 	and.w	r3, r3, #3
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d105      	bne.n	8006bbc <create_name+0x348>
 8006bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bb4:	f043 0310 	orr.w	r3, r3, #16
 8006bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006bbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006bc0:	f003 030c 	and.w	r3, r3, #12
 8006bc4:	2b04      	cmp	r3, #4
 8006bc6:	d105      	bne.n	8006bd4 <create_name+0x360>
 8006bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bcc:	f043 0308 	orr.w	r3, r3, #8
 8006bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	330b      	adds	r3, #11
 8006bde:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006be2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006be4:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3728      	adds	r7, #40	; 0x28
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop

08006bf0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	2b2f      	cmp	r3, #47	; 0x2f
 8006c00:	d003      	beq.n	8006c0a <follow_path+0x1a>
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	2b5c      	cmp	r3, #92	; 0x5c
 8006c08:	d102      	bne.n	8006c10 <follow_path+0x20>
		path++;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c16:	461a      	mov	r2, r3
 8006c18:	2300      	movs	r3, #0
 8006c1a:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	2b1f      	cmp	r3, #31
 8006c22:	d80c      	bhi.n	8006c3e <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8006c24:	2100      	movs	r1, #0
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7fe ffe9 	bl	8005bfe <dir_sdi>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c36:	461a      	mov	r2, r3
 8006c38:	2300      	movs	r3, #0
 8006c3a:	6153      	str	r3, [r2, #20]
 8006c3c:	e049      	b.n	8006cd2 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006c3e:	463b      	mov	r3, r7
 8006c40:	4619      	mov	r1, r3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7ff fe16 	bl	8006874 <create_name>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006c4c:	7bfb      	ldrb	r3, [r7, #15]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d13a      	bne.n	8006cc8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7ff fc1e 	bl	8006494 <dir_find>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	7adb      	ldrb	r3, [r3, #11]
 8006c66:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00a      	beq.n	8006c84 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006c6e:	7bfb      	ldrb	r3, [r7, #15]
 8006c70:	2b04      	cmp	r3, #4
 8006c72:	d12b      	bne.n	8006ccc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006c74:	7bbb      	ldrb	r3, [r7, #14]
 8006c76:	f003 0304 	and.w	r3, r3, #4
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d126      	bne.n	8006ccc <follow_path+0xdc>
 8006c7e:	2305      	movs	r3, #5
 8006c80:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006c82:	e023      	b.n	8006ccc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006c84:	7bbb      	ldrb	r3, [r7, #14]
 8006c86:	f003 0304 	and.w	r3, r3, #4
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d120      	bne.n	8006cd0 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	330b      	adds	r3, #11
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	f003 0310 	and.w	r3, r3, #16
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d102      	bne.n	8006cac <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8006ca6:	2305      	movs	r3, #5
 8006ca8:	73fb      	strb	r3, [r7, #15]
 8006caa:	e012      	b.n	8006cd2 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68b9      	ldr	r1, [r7, #8]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7ff fa07 	bl	80060ca <ld_clust>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cc4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006cc6:	e7ba      	b.n	8006c3e <follow_path+0x4e>
			if (res != FR_OK) break;
 8006cc8:	bf00      	nop
 8006cca:	e002      	b.n	8006cd2 <follow_path+0xe2>
				break;
 8006ccc:	bf00      	nop
 8006cce:	e000      	b.n	8006cd2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006cd0:	bf00      	nop
		}
	}

	return res;
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d031      	beq.n	8006d56 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	617b      	str	r3, [r7, #20]
 8006cf8:	e002      	b.n	8006d00 <get_ldnumber+0x24>
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	617b      	str	r3, [r7, #20]
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	2b1f      	cmp	r3, #31
 8006d06:	d903      	bls.n	8006d10 <get_ldnumber+0x34>
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	2b3a      	cmp	r3, #58	; 0x3a
 8006d0e:	d1f4      	bne.n	8006cfa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	2b3a      	cmp	r3, #58	; 0x3a
 8006d16:	d11c      	bne.n	8006d52 <get_ldnumber+0x76>
			tp = *path;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	1c5a      	adds	r2, r3, #1
 8006d22:	60fa      	str	r2, [r7, #12]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	3b30      	subs	r3, #48	; 0x30
 8006d28:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2b09      	cmp	r3, #9
 8006d2e:	d80e      	bhi.n	8006d4e <get_ldnumber+0x72>
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d10a      	bne.n	8006d4e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d107      	bne.n	8006d4e <get_ldnumber+0x72>
					vol = (int)i;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	3301      	adds	r3, #1
 8006d46:	617b      	str	r3, [r7, #20]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	e002      	b.n	8006d58 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006d52:	2300      	movs	r3, #0
 8006d54:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006d56:	693b      	ldr	r3, [r7, #16]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	371c      	adds	r7, #28
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bc80      	pop	{r7}
 8006d60:	4770      	bx	lr
	...

08006d64 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d74:	2200      	movs	r2, #0
 8006d76:	711a      	strb	r2, [r3, #4]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d7e:	461a      	mov	r2, r3
 8006d80:	f04f 33ff 	mov.w	r3, #4294967295
 8006d84:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7fe facb 	bl	8005324 <move_window>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d001      	beq.n	8006d98 <check_fs+0x34>
		return 3;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e04a      	b.n	8006e2e <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006d9e:	3301      	adds	r3, #1
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	021b      	lsls	r3, r3, #8
 8006da4:	b21a      	sxth	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006dac:	b21b      	sxth	r3, r3
 8006dae:	4313      	orrs	r3, r2
 8006db0:	b21b      	sxth	r3, r3
 8006db2:	4a21      	ldr	r2, [pc, #132]	; (8006e38 <check_fs+0xd4>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d001      	beq.n	8006dbc <check_fs+0x58>
		return 2;
 8006db8:	2302      	movs	r3, #2
 8006dba:	e038      	b.n	8006e2e <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	3336      	adds	r3, #54	; 0x36
 8006dc0:	3303      	adds	r3, #3
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	061a      	lsls	r2, r3, #24
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	3336      	adds	r3, #54	; 0x36
 8006dca:	3302      	adds	r3, #2
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	041b      	lsls	r3, r3, #16
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	3236      	adds	r2, #54	; 0x36
 8006dd6:	3201      	adds	r2, #1
 8006dd8:	7812      	ldrb	r2, [r2, #0]
 8006dda:	0212      	lsls	r2, r2, #8
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8006de4:	4313      	orrs	r3, r2
 8006de6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006dea:	4a14      	ldr	r2, [pc, #80]	; (8006e3c <check_fs+0xd8>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d101      	bne.n	8006df4 <check_fs+0x90>
		return 0;
 8006df0:	2300      	movs	r3, #0
 8006df2:	e01c      	b.n	8006e2e <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3352      	adds	r3, #82	; 0x52
 8006df8:	3303      	adds	r3, #3
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	061a      	lsls	r2, r3, #24
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	3352      	adds	r3, #82	; 0x52
 8006e02:	3302      	adds	r3, #2
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	041b      	lsls	r3, r3, #16
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	3252      	adds	r2, #82	; 0x52
 8006e0e:	3201      	adds	r2, #1
 8006e10:	7812      	ldrb	r2, [r2, #0]
 8006e12:	0212      	lsls	r2, r2, #8
 8006e14:	4313      	orrs	r3, r2
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e22:	4a06      	ldr	r2, [pc, #24]	; (8006e3c <check_fs+0xd8>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d101      	bne.n	8006e2c <check_fs+0xc8>
		return 0;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	e000      	b.n	8006e2e <check_fs+0xca>

	return 1;
 8006e2c:	2301      	movs	r3, #1
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	ffffaa55 	.word	0xffffaa55
 8006e3c:	00544146 	.word	0x00544146

08006e40 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b096      	sub	sp, #88	; 0x58
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006e54:	68b8      	ldr	r0, [r7, #8]
 8006e56:	f7ff ff41 	bl	8006cdc <get_ldnumber>
 8006e5a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	da01      	bge.n	8006e66 <find_volume+0x26>
 8006e62:	230b      	movs	r3, #11
 8006e64:	e311      	b.n	800748a <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006e66:	4a98      	ldr	r2, [pc, #608]	; (80070c8 <find_volume+0x288>)
 8006e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e6e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d101      	bne.n	8006e7a <find_volume+0x3a>
 8006e76:	230c      	movs	r3, #12
 8006e78:	e307      	b.n	800748a <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e7e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d01c      	beq.n	8006ec6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e92:	785b      	ldrb	r3, [r3, #1]
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7fd ff1f 	bl	8004cd8 <disk_status>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006ea0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10c      	bne.n	8006ec6 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006eac:	79fb      	ldrb	r3, [r7, #7]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d007      	beq.n	8006ec2 <find_volume+0x82>
 8006eb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006eb6:	f003 0304 	and.w	r3, r3, #4
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006ebe:	230a      	movs	r3, #10
 8006ec0:	e2e3      	b.n	800748a <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	e2e1      	b.n	800748a <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ecc:	2200      	movs	r2, #0
 8006ece:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ed2:	b2da      	uxtb	r2, r3
 8006ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eda:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ee2:	785b      	ldrb	r3, [r3, #1]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7fd ff11 	bl	8004d0c <disk_initialize>
 8006eea:	4603      	mov	r3, r0
 8006eec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006ef0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d001      	beq.n	8006f00 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006efc:	2303      	movs	r3, #3
 8006efe:	e2c4      	b.n	800748a <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006f00:	79fb      	ldrb	r3, [r7, #7]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d007      	beq.n	8006f16 <find_volume+0xd6>
 8006f06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f0a:	f003 0304 	and.w	r3, r3, #4
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8006f12:	230a      	movs	r3, #10
 8006f14:	e2b9      	b.n	800748a <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8006f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f1c:	7858      	ldrb	r0, [r3, #1]
 8006f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f24:	330a      	adds	r3, #10
 8006f26:	461a      	mov	r2, r3
 8006f28:	2102      	movs	r1, #2
 8006f2a:	f7fd ff55 	bl	8004dd8 <disk_ioctl>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10d      	bne.n	8006f50 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8006f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f3a:	895b      	ldrh	r3, [r3, #10]
 8006f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f40:	d306      	bcc.n	8006f50 <find_volume+0x110>
 8006f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f48:	895b      	ldrh	r3, [r3, #10]
 8006f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f4e:	d901      	bls.n	8006f54 <find_volume+0x114>
 8006f50:	2301      	movs	r3, #1
 8006f52:	e29a      	b.n	800748a <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006f54:	2300      	movs	r3, #0
 8006f56:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006f58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f5a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f5c:	f7ff ff02 	bl	8006d64 <check_fs>
 8006f60:	4603      	mov	r3, r0
 8006f62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006f66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d153      	bne.n	8007016 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006f6e:	2300      	movs	r3, #0
 8006f70:	643b      	str	r3, [r7, #64]	; 0x40
 8006f72:	e028      	b.n	8006fc6 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006f74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f78:	011b      	lsls	r3, r3, #4
 8006f7a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006f7e:	4413      	add	r3, r2
 8006f80:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f84:	3304      	adds	r3, #4
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d012      	beq.n	8006fb2 <find_volume+0x172>
 8006f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8e:	330b      	adds	r3, #11
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	061a      	lsls	r2, r3, #24
 8006f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f96:	330a      	adds	r3, #10
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	041b      	lsls	r3, r3, #16
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fa0:	3209      	adds	r2, #9
 8006fa2:	7812      	ldrb	r2, [r2, #0]
 8006fa4:	0212      	lsls	r2, r2, #8
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006faa:	3208      	adds	r2, #8
 8006fac:	7812      	ldrb	r2, [r2, #0]
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	e000      	b.n	8006fb4 <find_volume+0x174>
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	3358      	adds	r3, #88	; 0x58
 8006fba:	443b      	add	r3, r7
 8006fbc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	643b      	str	r3, [r7, #64]	; 0x40
 8006fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc8:	2b03      	cmp	r3, #3
 8006fca:	d9d3      	bls.n	8006f74 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006fcc:	2300      	movs	r3, #0
 8006fce:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d002      	beq.n	8006fdc <find_volume+0x19c>
 8006fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	3358      	adds	r3, #88	; 0x58
 8006fe2:	443b      	add	r3, r7
 8006fe4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006fe8:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d005      	beq.n	8006ffc <find_volume+0x1bc>
 8006ff0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ff2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ff4:	f7ff feb6 	bl	8006d64 <check_fs>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	e000      	b.n	8006ffe <find_volume+0x1be>
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8007002:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007006:	2b00      	cmp	r3, #0
 8007008:	d005      	beq.n	8007016 <find_volume+0x1d6>
 800700a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800700c:	3301      	adds	r3, #1
 800700e:	643b      	str	r3, [r7, #64]	; 0x40
 8007010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007012:	2b03      	cmp	r3, #3
 8007014:	d9e2      	bls.n	8006fdc <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007016:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800701a:	2b03      	cmp	r3, #3
 800701c:	d101      	bne.n	8007022 <find_volume+0x1e2>
 800701e:	2301      	movs	r3, #1
 8007020:	e233      	b.n	800748a <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007022:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007026:	2b00      	cmp	r3, #0
 8007028:	d001      	beq.n	800702e <find_volume+0x1ee>
 800702a:	230d      	movs	r3, #13
 800702c:	e22d      	b.n	800748a <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800702e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007030:	7b1b      	ldrb	r3, [r3, #12]
 8007032:	021b      	lsls	r3, r3, #8
 8007034:	b21a      	sxth	r2, r3
 8007036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007038:	7adb      	ldrb	r3, [r3, #11]
 800703a:	b21b      	sxth	r3, r3
 800703c:	4313      	orrs	r3, r2
 800703e:	b21a      	sxth	r2, r3
 8007040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007046:	895b      	ldrh	r3, [r3, #10]
 8007048:	b21b      	sxth	r3, r3
 800704a:	429a      	cmp	r2, r3
 800704c:	d001      	beq.n	8007052 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 800704e:	230d      	movs	r3, #13
 8007050:	e21b      	b.n	800748a <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8007052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007054:	7ddb      	ldrb	r3, [r3, #23]
 8007056:	021b      	lsls	r3, r3, #8
 8007058:	b21a      	sxth	r2, r3
 800705a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705c:	7d9b      	ldrb	r3, [r3, #22]
 800705e:	b21b      	sxth	r3, r3
 8007060:	4313      	orrs	r3, r2
 8007062:	b21b      	sxth	r3, r3
 8007064:	b29b      	uxth	r3, r3
 8007066:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8007068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800706a:	2b00      	cmp	r3, #0
 800706c:	d112      	bne.n	8007094 <find_volume+0x254>
 800706e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007070:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007074:	061a      	lsls	r2, r3, #24
 8007076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007078:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800707c:	041b      	lsls	r3, r3, #16
 800707e:	4313      	orrs	r3, r2
 8007080:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007082:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8007086:	0212      	lsls	r2, r2, #8
 8007088:	4313      	orrs	r3, r2
 800708a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800708c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8007090:	4313      	orrs	r3, r2
 8007092:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8007094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800709a:	461a      	mov	r2, r3
 800709c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800709e:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80070a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a2:	7c1a      	ldrb	r2, [r3, #16]
 80070a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070aa:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80070ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070b2:	78db      	ldrb	r3, [r3, #3]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d009      	beq.n	80070cc <find_volume+0x28c>
 80070b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070be:	78db      	ldrb	r3, [r3, #3]
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d003      	beq.n	80070cc <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 80070c4:	230d      	movs	r3, #13
 80070c6:	e1e0      	b.n	800748a <find_volume+0x64a>
 80070c8:	200033c8 	.word	0x200033c8
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80070cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070d2:	78db      	ldrb	r3, [r3, #3]
 80070d4:	461a      	mov	r2, r3
 80070d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070d8:	fb02 f303 	mul.w	r3, r2, r3
 80070dc:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80070de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e0:	7b5a      	ldrb	r2, [r3, #13]
 80070e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070e8:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80070ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070f0:	789b      	ldrb	r3, [r3, #2]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00c      	beq.n	8007110 <find_volume+0x2d0>
 80070f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070fc:	789b      	ldrb	r3, [r3, #2]
 80070fe:	461a      	mov	r2, r3
 8007100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007106:	789b      	ldrb	r3, [r3, #2]
 8007108:	3b01      	subs	r3, #1
 800710a:	4013      	ands	r3, r2
 800710c:	2b00      	cmp	r3, #0
 800710e:	d001      	beq.n	8007114 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8007110:	230d      	movs	r3, #13
 8007112:	e1ba      	b.n	800748a <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007116:	7c9b      	ldrb	r3, [r3, #18]
 8007118:	021b      	lsls	r3, r3, #8
 800711a:	b21a      	sxth	r2, r3
 800711c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711e:	7c5b      	ldrb	r3, [r3, #17]
 8007120:	b21b      	sxth	r3, r3
 8007122:	4313      	orrs	r3, r2
 8007124:	b21b      	sxth	r3, r3
 8007126:	b29a      	uxth	r2, r3
 8007128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800712e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007136:	891b      	ldrh	r3, [r3, #8]
 8007138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800713a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800713e:	8952      	ldrh	r2, [r2, #10]
 8007140:	0952      	lsrs	r2, r2, #5
 8007142:	b292      	uxth	r2, r2
 8007144:	fbb3 f1f2 	udiv	r1, r3, r2
 8007148:	fb01 f202 	mul.w	r2, r1, r2
 800714c:	1a9b      	subs	r3, r3, r2
 800714e:	b29b      	uxth	r3, r3
 8007150:	2b00      	cmp	r3, #0
 8007152:	d001      	beq.n	8007158 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8007154:	230d      	movs	r3, #13
 8007156:	e198      	b.n	800748a <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8007158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715a:	7d1b      	ldrb	r3, [r3, #20]
 800715c:	021b      	lsls	r3, r3, #8
 800715e:	b21a      	sxth	r2, r3
 8007160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007162:	7cdb      	ldrb	r3, [r3, #19]
 8007164:	b21b      	sxth	r3, r3
 8007166:	4313      	orrs	r3, r2
 8007168:	b21b      	sxth	r3, r3
 800716a:	b29b      	uxth	r3, r3
 800716c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800716e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007170:	2b00      	cmp	r3, #0
 8007172:	d112      	bne.n	800719a <find_volume+0x35a>
 8007174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007176:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800717a:	061a      	lsls	r2, r3, #24
 800717c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007182:	041b      	lsls	r3, r3, #16
 8007184:	4313      	orrs	r3, r2
 8007186:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007188:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800718c:	0212      	lsls	r2, r2, #8
 800718e:	4313      	orrs	r3, r2
 8007190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007192:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007196:	4313      	orrs	r3, r2
 8007198:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800719a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719c:	7bdb      	ldrb	r3, [r3, #15]
 800719e:	021b      	lsls	r3, r3, #8
 80071a0:	b21a      	sxth	r2, r3
 80071a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a4:	7b9b      	ldrb	r3, [r3, #14]
 80071a6:	b21b      	sxth	r3, r3
 80071a8:	4313      	orrs	r3, r2
 80071aa:	b21b      	sxth	r3, r3
 80071ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80071ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <find_volume+0x378>
 80071b4:	230d      	movs	r3, #13
 80071b6:	e168      	b.n	800748a <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80071b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80071ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071bc:	4413      	add	r3, r2
 80071be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80071c4:	8911      	ldrh	r1, [r2, #8]
 80071c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80071cc:	8952      	ldrh	r2, [r2, #10]
 80071ce:	0952      	lsrs	r2, r2, #5
 80071d0:	b292      	uxth	r2, r2
 80071d2:	fbb1 f2f2 	udiv	r2, r1, r2
 80071d6:	b292      	uxth	r2, r2
 80071d8:	4413      	add	r3, r2
 80071da:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80071dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d201      	bcs.n	80071e8 <find_volume+0x3a8>
 80071e4:	230d      	movs	r3, #13
 80071e6:	e150      	b.n	800748a <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80071e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80071f4:	7892      	ldrb	r2, [r2, #2]
 80071f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80071fa:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d101      	bne.n	8007206 <find_volume+0x3c6>
 8007202:	230d      	movs	r3, #13
 8007204:	e141      	b.n	800748a <find_volume+0x64a>
	fmt = FS_FAT12;
 8007206:	2301      	movs	r3, #1
 8007208:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007212:	4293      	cmp	r3, r2
 8007214:	d902      	bls.n	800721c <find_volume+0x3dc>
 8007216:	2302      	movs	r3, #2
 8007218:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007222:	4293      	cmp	r3, r2
 8007224:	d902      	bls.n	800722c <find_volume+0x3ec>
 8007226:	2303      	movs	r3, #3
 8007228:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722e:	3302      	adds	r3, #2
 8007230:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007232:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007236:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8007238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800723e:	461a      	mov	r2, r3
 8007240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007242:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007244:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007248:	4413      	add	r3, r2
 800724a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800724c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007250:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8007252:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007256:	4413      	add	r3, r2
 8007258:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800725a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800725e:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 8007260:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007264:	2b03      	cmp	r3, #3
 8007266:	d124      	bne.n	80072b2 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800726e:	891b      	ldrh	r3, [r3, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <find_volume+0x438>
 8007274:	230d      	movs	r3, #13
 8007276:	e108      	b.n	800748a <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8007278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800727e:	061a      	lsls	r2, r3, #24
 8007280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007282:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007286:	041b      	lsls	r3, r3, #16
 8007288:	4313      	orrs	r3, r2
 800728a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800728c:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8007290:	0212      	lsls	r2, r2, #8
 8007292:	4313      	orrs	r3, r2
 8007294:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007296:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800729a:	4313      	orrs	r3, r2
 800729c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800729e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80072a2:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80072a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	647b      	str	r3, [r7, #68]	; 0x44
 80072b0:	e02b      	b.n	800730a <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80072b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072b8:	891b      	ldrh	r3, [r3, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <find_volume+0x482>
 80072be:	230d      	movs	r3, #13
 80072c0:	e0e3      	b.n	800748a <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80072c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072c8:	6a1a      	ldr	r2, [r3, #32]
 80072ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072cc:	4413      	add	r3, r2
 80072ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80072d4:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80072d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d105      	bne.n	80072ea <find_volume+0x4aa>
 80072de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	e00e      	b.n	8007308 <find_volume+0x4c8>
 80072ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072f0:	695a      	ldr	r2, [r3, #20]
 80072f2:	4613      	mov	r3, r2
 80072f4:	005b      	lsls	r3, r3, #1
 80072f6:	4413      	add	r3, r2
 80072f8:	085a      	lsrs	r2, r3, #1
 80072fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007300:	695b      	ldr	r3, [r3, #20]
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007308:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800730a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007310:	699a      	ldr	r2, [r3, #24]
 8007312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007318:	895b      	ldrh	r3, [r3, #10]
 800731a:	4619      	mov	r1, r3
 800731c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800731e:	440b      	add	r3, r1
 8007320:	3b01      	subs	r3, #1
 8007322:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007324:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8007328:	8949      	ldrh	r1, [r1, #10]
 800732a:	fbb3 f3f1 	udiv	r3, r3, r1
 800732e:	429a      	cmp	r2, r3
 8007330:	d201      	bcs.n	8007336 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8007332:	230d      	movs	r3, #13
 8007334:	e0a9      	b.n	800748a <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800733c:	461a      	mov	r2, r3
 800733e:	f04f 33ff 	mov.w	r3, #4294967295
 8007342:	6113      	str	r3, [r2, #16]
 8007344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800734e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007352:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800735a:	2280      	movs	r2, #128	; 0x80
 800735c:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800735e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007362:	2b03      	cmp	r3, #3
 8007364:	d17a      	bne.n	800745c <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007368:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800736c:	021b      	lsls	r3, r3, #8
 800736e:	b21a      	sxth	r2, r3
 8007370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007372:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007376:	b21b      	sxth	r3, r3
 8007378:	4313      	orrs	r3, r2
 800737a:	b21b      	sxth	r3, r3
 800737c:	2b01      	cmp	r3, #1
 800737e:	d16d      	bne.n	800745c <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007382:	3301      	adds	r3, #1
 8007384:	4619      	mov	r1, r3
 8007386:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007388:	f7fd ffcc 	bl	8005324 <move_window>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d164      	bne.n	800745c <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8007392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007398:	2200      	movs	r2, #0
 800739a:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800739c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739e:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80073a2:	021b      	lsls	r3, r3, #8
 80073a4:	b21a      	sxth	r2, r3
 80073a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a8:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80073ac:	b21b      	sxth	r3, r3
 80073ae:	4313      	orrs	r3, r2
 80073b0:	b21b      	sxth	r3, r3
 80073b2:	4a38      	ldr	r2, [pc, #224]	; (8007494 <find_volume+0x654>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d151      	bne.n	800745c <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80073b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ba:	78db      	ldrb	r3, [r3, #3]
 80073bc:	061a      	lsls	r2, r3, #24
 80073be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c0:	789b      	ldrb	r3, [r3, #2]
 80073c2:	041b      	lsls	r3, r3, #16
 80073c4:	4313      	orrs	r3, r2
 80073c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073c8:	7852      	ldrb	r2, [r2, #1]
 80073ca:	0212      	lsls	r2, r2, #8
 80073cc:	4313      	orrs	r3, r2
 80073ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073d0:	7812      	ldrb	r2, [r2, #0]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	4a30      	ldr	r2, [pc, #192]	; (8007498 <find_volume+0x658>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d140      	bne.n	800745c <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80073da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073dc:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80073e0:	061a      	lsls	r2, r3, #24
 80073e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e4:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80073e8:	041b      	lsls	r3, r3, #16
 80073ea:	4313      	orrs	r3, r2
 80073ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073ee:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 80073f2:	0212      	lsls	r2, r2, #8
 80073f4:	4313      	orrs	r3, r2
 80073f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073f8:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 80073fc:	4313      	orrs	r3, r2
 80073fe:	4a27      	ldr	r2, [pc, #156]	; (800749c <find_volume+0x65c>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d12b      	bne.n	800745c <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007406:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800740a:	061a      	lsls	r2, r3, #24
 800740c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8007412:	041b      	lsls	r3, r3, #16
 8007414:	4313      	orrs	r3, r2
 8007416:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007418:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800741c:	0212      	lsls	r2, r2, #8
 800741e:	4313      	orrs	r3, r2
 8007420:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007422:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8007426:	4313      	orrs	r3, r2
 8007428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800742a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800742e:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8007430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007432:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8007436:	061a      	lsls	r2, r3, #24
 8007438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743a:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800743e:	041b      	lsls	r3, r3, #16
 8007440:	4313      	orrs	r3, r2
 8007442:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007444:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8007448:	0212      	lsls	r2, r2, #8
 800744a:	4313      	orrs	r3, r2
 800744c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800744e:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8007452:	4313      	orrs	r3, r2
 8007454:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007456:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800745a:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800745c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007462:	461a      	mov	r2, r3
 8007464:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007468:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800746a:	4b0d      	ldr	r3, [pc, #52]	; (80074a0 <find_volume+0x660>)
 800746c:	881b      	ldrh	r3, [r3, #0]
 800746e:	3301      	adds	r3, #1
 8007470:	b29a      	uxth	r2, r3
 8007472:	4b0b      	ldr	r3, [pc, #44]	; (80074a0 <find_volume+0x660>)
 8007474:	801a      	strh	r2, [r3, #0]
 8007476:	4b0a      	ldr	r3, [pc, #40]	; (80074a0 <find_volume+0x660>)
 8007478:	881a      	ldrh	r2, [r3, #0]
 800747a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007480:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8007482:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007484:	f7fd fed2 	bl	800522c <clear_lock>
#endif

	return FR_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3758      	adds	r7, #88	; 0x58
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	ffffaa55 	.word	0xffffaa55
 8007498:	41615252 	.word	0x41615252
 800749c:	61417272 	.word	0x61417272
 80074a0:	200033cc 	.word	0x200033cc

080074a4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d02a      	beq.n	800750c <validate+0x68>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d024      	beq.n	800750c <validate+0x68>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d01b      	beq.n	800750c <validate+0x68>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074e0:	88da      	ldrh	r2, [r3, #6]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074e8:	889b      	ldrh	r3, [r3, #4]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d10e      	bne.n	800750c <validate+0x68>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074fa:	785b      	ldrb	r3, [r3, #1]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7fd fbeb 	bl	8004cd8 <disk_status>
 8007502:	4603      	mov	r3, r0
 8007504:	f003 0301 	and.w	r3, r3, #1
 8007508:	2b00      	cmp	r3, #0
 800750a:	d001      	beq.n	8007510 <validate+0x6c>
		return FR_INVALID_OBJECT;
 800750c:	2309      	movs	r3, #9
 800750e:	e000      	b.n	8007512 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
	...

0800751c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b088      	sub	sp, #32
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	4613      	mov	r3, r2
 8007528:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800752e:	f107 0310 	add.w	r3, r7, #16
 8007532:	4618      	mov	r0, r3
 8007534:	f7ff fbd2 	bl	8006cdc <get_ldnumber>
 8007538:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	2b00      	cmp	r3, #0
 800753e:	da01      	bge.n	8007544 <f_mount+0x28>
 8007540:	230b      	movs	r3, #11
 8007542:	e02f      	b.n	80075a4 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007544:	4a19      	ldr	r2, [pc, #100]	; (80075ac <f_mount+0x90>)
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800754c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d007      	beq.n	8007564 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8007554:	69b8      	ldr	r0, [r7, #24]
 8007556:	f7fd fe69 	bl	800522c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007560:	2200      	movs	r2, #0
 8007562:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d004      	beq.n	8007574 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007570:	2200      	movs	r2, #0
 8007572:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	490d      	ldr	r1, [pc, #52]	; (80075ac <f_mount+0x90>)
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d002      	beq.n	800758a <f_mount+0x6e>
 8007584:	79fb      	ldrb	r3, [r7, #7]
 8007586:	2b01      	cmp	r3, #1
 8007588:	d001      	beq.n	800758e <f_mount+0x72>
 800758a:	2300      	movs	r3, #0
 800758c:	e00a      	b.n	80075a4 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800758e:	f107 0108 	add.w	r1, r7, #8
 8007592:	f107 030c 	add.w	r3, r7, #12
 8007596:	2200      	movs	r2, #0
 8007598:	4618      	mov	r0, r3
 800759a:	f7ff fc51 	bl	8006e40 <find_volume>
 800759e:	4603      	mov	r3, r0
 80075a0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80075a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3720      	adds	r7, #32
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	200033c8 	.word	0x200033c8

080075b0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80075be:	f843 0c4c 	str.w	r0, [r3, #-76]
 80075c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80075c6:	f843 1c50 	str.w	r1, [r3, #-80]
 80075ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80075ce:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80075d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80075d6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d101      	bne.n	80075e2 <f_open+0x32>
 80075de:	2309      	movs	r3, #9
 80075e0:	e2f7      	b.n	8007bd2 <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 80075e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80075e6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80075ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ee:	461a      	mov	r2, r3
 80075f0:	2300      	movs	r3, #0
 80075f2:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80075f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80075f8:	461a      	mov	r2, r3
 80075fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80075fe:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007602:	f003 031f 	and.w	r3, r3, #31
 8007606:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800760a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800760e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007612:	f023 0301 	bic.w	r3, r3, #1
 8007616:	b2da      	uxtb	r2, r3
 8007618:	f107 0118 	add.w	r1, r7, #24
 800761c:	3910      	subs	r1, #16
 800761e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007622:	3b18      	subs	r3, #24
 8007624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007628:	4618      	mov	r0, r3
 800762a:	f7ff fc09 	bl	8006e40 <find_volume>
 800762e:	4603      	mov	r3, r0
 8007630:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007634:	f102 0217 	add.w	r2, r2, #23
 8007638:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800763a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800763e:	f103 0317 	add.w	r3, r3, #23
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	f040 82bf 	bne.w	8007bc8 <f_open+0x618>
		INIT_BUF(dj);
 800764a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800764e:	461a      	mov	r2, r3
 8007650:	f107 0318 	add.w	r3, r7, #24
 8007654:	3b04      	subs	r3, #4
 8007656:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 800765a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800765e:	461a      	mov	r2, r3
 8007660:	4bd4      	ldr	r3, [pc, #848]	; (80079b4 <f_open+0x404>)
 8007662:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 8007666:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800766a:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800766e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007672:	3b18      	subs	r3, #24
 8007674:	4611      	mov	r1, r2
 8007676:	4618      	mov	r0, r3
 8007678:	f7ff faba 	bl	8006bf0 <follow_path>
 800767c:	4603      	mov	r3, r0
 800767e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007682:	f102 0217 	add.w	r2, r2, #23
 8007686:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8007688:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800768c:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8007690:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007694:	f102 0210 	add.w	r2, r2, #16
 8007698:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800769a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800769e:	f103 0317 	add.w	r3, r3, #23
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d126      	bne.n	80076f6 <f_open+0x146>
			if (!dir)	/* Default directory itself */
 80076a8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80076ac:	f103 0310 	add.w	r3, r3, #16
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d106      	bne.n	80076c4 <f_open+0x114>
				res = FR_INVALID_NAME;
 80076b6:	2306      	movs	r3, #6
 80076b8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80076bc:	f102 0217 	add.w	r2, r2, #23
 80076c0:	7013      	strb	r3, [r2, #0]
 80076c2:	e018      	b.n	80076f6 <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80076c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80076c8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80076cc:	f023 0301 	bic.w	r3, r3, #1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	bf14      	ite	ne
 80076d4:	2301      	movne	r3, #1
 80076d6:	2300      	moveq	r3, #0
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	461a      	mov	r2, r3
 80076dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80076e0:	3b18      	subs	r3, #24
 80076e2:	4611      	mov	r1, r2
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fd fc0d 	bl	8004f04 <chk_lock>
 80076ea:	4603      	mov	r3, r0
 80076ec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80076f0:	f102 0217 	add.w	r2, r2, #23
 80076f4:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80076f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80076fa:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80076fe:	f003 031c 	and.w	r3, r3, #28
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 813c 	beq.w	8007980 <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 8007708:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800770c:	f103 0317 	add.w	r3, r3, #23
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d02e      	beq.n	8007774 <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8007716:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800771a:	f103 0317 	add.w	r3, r3, #23
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	2b04      	cmp	r3, #4
 8007722:	d112      	bne.n	800774a <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007724:	f7fd fc5e 	bl	8004fe4 <enq_lock>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d007      	beq.n	800773e <f_open+0x18e>
 800772e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007732:	3b18      	subs	r3, #24
 8007734:	4618      	mov	r0, r3
 8007736:	f7fe ff79 	bl	800662c <dir_register>
 800773a:	4603      	mov	r3, r0
 800773c:	e000      	b.n	8007740 <f_open+0x190>
 800773e:	2312      	movs	r3, #18
 8007740:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007744:	f102 0217 	add.w	r2, r2, #23
 8007748:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800774a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800774e:	461a      	mov	r2, r3
 8007750:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007754:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007758:	f043 0308 	orr.w	r3, r3, #8
 800775c:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8007760:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007764:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8007768:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800776c:	f102 0210 	add.w	r2, r2, #16
 8007770:	6013      	str	r3, [r2, #0]
 8007772:	e01f      	b.n	80077b4 <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007774:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007778:	f103 0310 	add.w	r3, r3, #16
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	330b      	adds	r3, #11
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	f003 0311 	and.w	r3, r3, #17
 8007786:	2b00      	cmp	r3, #0
 8007788:	d006      	beq.n	8007798 <f_open+0x1e8>
					res = FR_DENIED;
 800778a:	2307      	movs	r3, #7
 800778c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007790:	f102 0217 	add.w	r2, r2, #23
 8007794:	7013      	strb	r3, [r2, #0]
 8007796:	e00d      	b.n	80077b4 <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007798:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800779c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80077a0:	f003 0304 	and.w	r3, r3, #4
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d005      	beq.n	80077b4 <f_open+0x204>
						res = FR_EXIST;
 80077a8:	2308      	movs	r3, #8
 80077aa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80077ae:	f102 0217 	add.w	r2, r2, #23
 80077b2:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80077b4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80077b8:	f103 0317 	add.w	r3, r3, #23
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f040 8113 	bne.w	80079ea <f_open+0x43a>
 80077c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80077c8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80077cc:	f003 0308 	and.w	r3, r3, #8
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 810a 	beq.w	80079ea <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 80077d6:	f7fd f97f 	bl	8004ad8 <get_fattime>
 80077da:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80077de:	f103 030c 	add.w	r3, r3, #12
 80077e2:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 80077e4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80077e8:	f103 0310 	add.w	r3, r3, #16
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	330e      	adds	r3, #14
 80077f0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80077f4:	f102 020c 	add.w	r2, r2, #12
 80077f8:	6812      	ldr	r2, [r2, #0]
 80077fa:	b2d2      	uxtb	r2, r2
 80077fc:	701a      	strb	r2, [r3, #0]
 80077fe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007802:	f103 030c 	add.w	r3, r3, #12
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	b29b      	uxth	r3, r3
 800780a:	0a1b      	lsrs	r3, r3, #8
 800780c:	b29a      	uxth	r2, r3
 800780e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007812:	f103 0310 	add.w	r3, r3, #16
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	330f      	adds	r3, #15
 800781a:	b2d2      	uxtb	r2, r2
 800781c:	701a      	strb	r2, [r3, #0]
 800781e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007822:	f103 030c 	add.w	r3, r3, #12
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	0c1a      	lsrs	r2, r3, #16
 800782a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800782e:	f103 0310 	add.w	r3, r3, #16
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	3310      	adds	r3, #16
 8007836:	b2d2      	uxtb	r2, r2
 8007838:	701a      	strb	r2, [r3, #0]
 800783a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800783e:	f103 030c 	add.w	r3, r3, #12
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	0e1a      	lsrs	r2, r3, #24
 8007846:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800784a:	f103 0310 	add.w	r3, r3, #16
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	3311      	adds	r3, #17
 8007852:	b2d2      	uxtb	r2, r2
 8007854:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8007856:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800785a:	f103 0310 	add.w	r3, r3, #16
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	330b      	adds	r3, #11
 8007862:	2200      	movs	r2, #0
 8007864:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007866:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800786a:	f103 0310 	add.w	r3, r3, #16
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	331c      	adds	r3, #28
 8007872:	2200      	movs	r2, #0
 8007874:	701a      	strb	r2, [r3, #0]
 8007876:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800787a:	f103 0310 	add.w	r3, r3, #16
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	331d      	adds	r3, #29
 8007882:	2200      	movs	r2, #0
 8007884:	701a      	strb	r2, [r3, #0]
 8007886:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800788a:	f103 0310 	add.w	r3, r3, #16
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	331e      	adds	r3, #30
 8007892:	2200      	movs	r2, #0
 8007894:	701a      	strb	r2, [r3, #0]
 8007896:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800789a:	f103 0310 	add.w	r3, r3, #16
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	331f      	adds	r3, #31
 80078a2:	2200      	movs	r2, #0
 80078a4:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80078a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80078aa:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 80078ae:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80078b2:	f102 0210 	add.w	r2, r2, #16
 80078b6:	6811      	ldr	r1, [r2, #0]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fe fc06 	bl	80060ca <ld_clust>
 80078be:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80078c2:	f103 0308 	add.w	r3, r3, #8
 80078c6:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 80078c8:	2100      	movs	r1, #0
 80078ca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80078ce:	f103 0310 	add.w	r3, r3, #16
 80078d2:	6818      	ldr	r0, [r3, #0]
 80078d4:	f7fe fc27 	bl	8006126 <st_clust>
				dj.fs->wflag = 1;
 80078d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80078dc:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 80078e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078e4:	2201      	movs	r2, #1
 80078e6:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 80078e8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80078ec:	f103 0308 	add.w	r3, r3, #8
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d079      	beq.n	80079ea <f_open+0x43a>
					dw = dj.fs->winsect;
 80078f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80078fa:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 80078fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007904:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007908:	f102 020c 	add.w	r2, r2, #12
 800790c:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800790e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007912:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007916:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800791a:	f102 0208 	add.w	r2, r2, #8
 800791e:	6811      	ldr	r1, [r2, #0]
 8007920:	4618      	mov	r0, r3
 8007922:	f7fe f863 	bl	80059ec <remove_chain>
 8007926:	4603      	mov	r3, r0
 8007928:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800792c:	f102 0217 	add.w	r2, r2, #23
 8007930:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8007932:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007936:	f103 0317 	add.w	r3, r3, #23
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d154      	bne.n	80079ea <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8007940:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007944:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 8007948:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800794c:	f103 0308 	add.w	r3, r3, #8
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3b01      	subs	r3, #1
 8007954:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007958:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 800795a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800795e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007962:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007966:	f102 020c 	add.w	r2, r2, #12
 800796a:	6811      	ldr	r1, [r2, #0]
 800796c:	4618      	mov	r0, r3
 800796e:	f7fd fcd9 	bl	8005324 <move_window>
 8007972:	4603      	mov	r3, r0
 8007974:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007978:	f102 0217 	add.w	r2, r2, #23
 800797c:	7013      	strb	r3, [r2, #0]
 800797e:	e034      	b.n	80079ea <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8007980:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007984:	f103 0317 	add.w	r3, r3, #23
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d12d      	bne.n	80079ea <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800798e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007992:	f103 0310 	add.w	r3, r3, #16
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	330b      	adds	r3, #11
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	f003 0310 	and.w	r3, r3, #16
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d009      	beq.n	80079b8 <f_open+0x408>
					res = FR_NO_FILE;
 80079a4:	2304      	movs	r3, #4
 80079a6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80079aa:	f102 0217 	add.w	r2, r2, #23
 80079ae:	7013      	strb	r3, [r2, #0]
 80079b0:	e01b      	b.n	80079ea <f_open+0x43a>
 80079b2:	bf00      	nop
 80079b4:	200033e8 	.word	0x200033e8
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80079b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80079bc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80079c0:	f003 0302 	and.w	r3, r3, #2
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d010      	beq.n	80079ea <f_open+0x43a>
 80079c8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80079cc:	f103 0310 	add.w	r3, r3, #16
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	330b      	adds	r3, #11
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d005      	beq.n	80079ea <f_open+0x43a>
						res = FR_DENIED;
 80079de:	2307      	movs	r3, #7
 80079e0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80079e4:	f102 0217 	add.w	r2, r2, #23
 80079e8:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 80079ea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80079ee:	f103 0317 	add.w	r3, r3, #23
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d157      	bne.n	8007aa8 <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80079f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80079fc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007a00:	f003 0308 	and.w	r3, r3, #8
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00a      	beq.n	8007a1e <f_open+0x46e>
				mode |= FA__WRITTEN;
 8007a08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a12:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007a16:	f043 0320 	orr.w	r3, r3, #32
 8007a1a:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007a1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a22:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007a30:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8007a34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007a38:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8007a3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a3e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a46:	461a      	mov	r2, r3
 8007a48:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007a4c:	f103 0310 	add.w	r3, r3, #16
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007a54:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a58:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007a5c:	f023 0301 	bic.w	r3, r3, #1
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	bf14      	ite	ne
 8007a64:	2301      	movne	r3, #1
 8007a66:	2300      	moveq	r3, #0
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007a70:	3b18      	subs	r3, #24
 8007a72:	4611      	mov	r1, r2
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fd fad9 	bl	800502c <inc_lock>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a80:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a88:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8007a8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a8e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d105      	bne.n	8007aa8 <f_open+0x4f8>
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007aa2:	f102 0217 	add.w	r2, r2, #23
 8007aa6:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8007aa8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007aac:	f103 0317 	add.w	r3, r3, #23
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f040 8088 	bne.w	8007bc8 <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 8007ab8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007abc:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007aca:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007ace:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8007ad0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007ad4:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007adc:	2200      	movs	r2, #0
 8007ade:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007ae0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007ae4:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007ae8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007aec:	f102 0210 	add.w	r2, r2, #16
 8007af0:	6811      	ldr	r1, [r2, #0]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fe fae9 	bl	80060ca <ld_clust>
 8007af8:	4602      	mov	r2, r0
 8007afa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007afe:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b06:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007b08:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b0c:	f103 0310 	add.w	r3, r3, #16
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	331f      	adds	r3, #31
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	061a      	lsls	r2, r3, #24
 8007b18:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b1c:	f103 0310 	add.w	r3, r3, #16
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	331e      	adds	r3, #30
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	041b      	lsls	r3, r3, #16
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007b2e:	f102 0210 	add.w	r2, r2, #16
 8007b32:	6812      	ldr	r2, [r2, #0]
 8007b34:	321d      	adds	r2, #29
 8007b36:	7812      	ldrb	r2, [r2, #0]
 8007b38:	0212      	lsls	r2, r2, #8
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007b40:	f102 0210 	add.w	r2, r2, #16
 8007b44:	6812      	ldr	r2, [r2, #0]
 8007b46:	321c      	adds	r2, #28
 8007b48:	7812      	ldrb	r2, [r2, #0]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007b50:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8007b54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007b58:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8007b5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b5e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b66:	461a      	mov	r2, r3
 8007b68:	2300      	movs	r3, #0
 8007b6a:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8007b6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b70:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b78:	461a      	mov	r2, r3
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007b7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b82:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007b90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b94:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007b98:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007b9c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8007ba0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ba4:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8007ba6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007baa:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bb8:	88da      	ldrh	r2, [r3, #6]
 8007bba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007bbe:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bc6:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8007bc8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007bcc:	f103 0317 	add.w	r3, r3, #23
 8007bd0:	781b      	ldrb	r3, [r3, #0]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop

08007be0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f7ff fc5b 	bl	80074a4 <validate>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007bf2:	7dfb      	ldrb	r3, [r7, #23]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f040 80bc 	bne.w	8007d72 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c00:	799b      	ldrb	r3, [r3, #6]
 8007c02:	f003 0320 	and.w	r3, r3, #32
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f000 80b3 	beq.w	8007d72 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c12:	799b      	ldrb	r3, [r3, #6]
 8007c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d01e      	beq.n	8007c5a <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c28:	7858      	ldrb	r0, [r3, #1]
 8007c2a:	6879      	ldr	r1, [r7, #4]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c32:	699a      	ldr	r2, [r3, #24]
 8007c34:	2301      	movs	r3, #1
 8007c36:	f7fd f8af 	bl	8004d98 <disk_write>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d001      	beq.n	8007c44 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007c40:	2301      	movs	r3, #1
 8007c42:	e097      	b.n	8007d74 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c4a:	799b      	ldrb	r3, [r3, #6]
 8007c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c58:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c68:	69db      	ldr	r3, [r3, #28]
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	f7fd fb59 	bl	8005324 <move_window>
 8007c72:	4603      	mov	r3, r0
 8007c74:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d17a      	bne.n	8007d72 <f_sync+0x192>
				dir = fp->dir_ptr;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c82:	6a1b      	ldr	r3, [r3, #32]
 8007c84:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	330b      	adds	r3, #11
 8007c8a:	781a      	ldrb	r2, [r3, #0]
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	330b      	adds	r3, #11
 8007c90:	f042 0220 	orr.w	r2, r2, #32
 8007c94:	b2d2      	uxtb	r2, r2
 8007c96:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c9e:	68da      	ldr	r2, [r3, #12]
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	331c      	adds	r3, #28
 8007ca4:	b2d2      	uxtb	r2, r2
 8007ca6:	701a      	strb	r2, [r3, #0]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	0a1b      	lsrs	r3, r3, #8
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	331d      	adds	r3, #29
 8007cba:	b2d2      	uxtb	r2, r2
 8007cbc:	701a      	strb	r2, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	0c1a      	lsrs	r2, r3, #16
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	331e      	adds	r3, #30
 8007ccc:	b2d2      	uxtb	r2, r2
 8007cce:	701a      	strb	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	0e1a      	lsrs	r2, r3, #24
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	331f      	adds	r3, #31
 8007cde:	b2d2      	uxtb	r2, r2
 8007ce0:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	4619      	mov	r1, r3
 8007cec:	6938      	ldr	r0, [r7, #16]
 8007cee:	f7fe fa1a 	bl	8006126 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8007cf2:	f7fc fef1 	bl	8004ad8 <get_fattime>
 8007cf6:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	3316      	adds	r3, #22
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	b2d2      	uxtb	r2, r2
 8007d00:	701a      	strb	r2, [r3, #0]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	0a1b      	lsrs	r3, r3, #8
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	3317      	adds	r3, #23
 8007d0e:	b2d2      	uxtb	r2, r2
 8007d10:	701a      	strb	r2, [r3, #0]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	0c1a      	lsrs	r2, r3, #16
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	3318      	adds	r3, #24
 8007d1a:	b2d2      	uxtb	r2, r2
 8007d1c:	701a      	strb	r2, [r3, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	0e1a      	lsrs	r2, r3, #24
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	3319      	adds	r3, #25
 8007d26:	b2d2      	uxtb	r2, r2
 8007d28:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	3312      	adds	r3, #18
 8007d2e:	2200      	movs	r2, #0
 8007d30:	701a      	strb	r2, [r3, #0]
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	3313      	adds	r3, #19
 8007d36:	2200      	movs	r2, #0
 8007d38:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d40:	799b      	ldrb	r3, [r3, #6]
 8007d42:	f023 0320 	bic.w	r3, r3, #32
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d4e:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7fd fb0d 	bl	8005388 <sync_fs>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3718      	adds	r7, #24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7ff ff2b 	bl	8007be0 <f_sync>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d119      	bne.n	8007dc8 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f7ff fb85 	bl	80074a4 <validate>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007d9e:	7bfb      	ldrb	r3, [r7, #15]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d111      	bne.n	8007dc8 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7fd f9f9 	bl	80051a4 <dec_lock>
 8007db2:	4603      	mov	r3, r0
 8007db4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007db6:	7bfb      	ldrb	r3, [r7, #15]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d105      	bne.n	8007dc8 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
	...

08007dd4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b087      	sub	sp, #28
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	4613      	mov	r3, r2
 8007de0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007de2:	2301      	movs	r3, #1
 8007de4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8007dea:	4b1e      	ldr	r3, [pc, #120]	; (8007e64 <FATFS_LinkDriverEx+0x90>)
 8007dec:	7a5b      	ldrb	r3, [r3, #9]
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d831      	bhi.n	8007e58 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007df4:	4b1b      	ldr	r3, [pc, #108]	; (8007e64 <FATFS_LinkDriverEx+0x90>)
 8007df6:	7a5b      	ldrb	r3, [r3, #9]
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	4b19      	ldr	r3, [pc, #100]	; (8007e64 <FATFS_LinkDriverEx+0x90>)
 8007dfe:	2100      	movs	r1, #0
 8007e00:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8007e02:	4b18      	ldr	r3, [pc, #96]	; (8007e64 <FATFS_LinkDriverEx+0x90>)
 8007e04:	7a5b      	ldrb	r3, [r3, #9]
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	4a16      	ldr	r2, [pc, #88]	; (8007e64 <FATFS_LinkDriverEx+0x90>)
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	4413      	add	r3, r2
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8007e12:	4b14      	ldr	r3, [pc, #80]	; (8007e64 <FATFS_LinkDriverEx+0x90>)
 8007e14:	7a5b      	ldrb	r3, [r3, #9]
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	461a      	mov	r2, r3
 8007e1a:	4b12      	ldr	r3, [pc, #72]	; (8007e64 <FATFS_LinkDriverEx+0x90>)
 8007e1c:	4413      	add	r3, r2
 8007e1e:	79fa      	ldrb	r2, [r7, #7]
 8007e20:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007e22:	4b10      	ldr	r3, [pc, #64]	; (8007e64 <FATFS_LinkDriverEx+0x90>)
 8007e24:	7a5b      	ldrb	r3, [r3, #9]
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	1c5a      	adds	r2, r3, #1
 8007e2a:	b2d1      	uxtb	r1, r2
 8007e2c:	4a0d      	ldr	r2, [pc, #52]	; (8007e64 <FATFS_LinkDriverEx+0x90>)
 8007e2e:	7251      	strb	r1, [r2, #9]
 8007e30:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007e32:	7dbb      	ldrb	r3, [r7, #22]
 8007e34:	3330      	adds	r3, #48	; 0x30
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	223a      	movs	r2, #58	; 0x3a
 8007e42:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	3302      	adds	r3, #2
 8007e48:	222f      	movs	r2, #47	; 0x2f
 8007e4a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	3303      	adds	r3, #3
 8007e50:	2200      	movs	r2, #0
 8007e52:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007e54:	2300      	movs	r3, #0
 8007e56:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8007e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	371c      	adds	r7, #28
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bc80      	pop	{r7}
 8007e62:	4770      	bx	lr
 8007e64:	200035e8 	.word	0x200035e8

08007e68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007e72:	2200      	movs	r2, #0
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7ff ffac 	bl	8007dd4 <FATFS_LinkDriverEx>
 8007e7c:	4603      	mov	r3, r0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
	...

08007e88 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	4603      	mov	r3, r0
 8007e90:	6039      	str	r1, [r7, #0]
 8007e92:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007e94:	88fb      	ldrh	r3, [r7, #6]
 8007e96:	2b7f      	cmp	r3, #127	; 0x7f
 8007e98:	d802      	bhi.n	8007ea0 <ff_convert+0x18>
		c = chr;
 8007e9a:	88fb      	ldrh	r3, [r7, #6]
 8007e9c:	81fb      	strh	r3, [r7, #14]
 8007e9e:	e025      	b.n	8007eec <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00b      	beq.n	8007ebe <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007ea6:	88fb      	ldrh	r3, [r7, #6]
 8007ea8:	2bff      	cmp	r3, #255	; 0xff
 8007eaa:	d805      	bhi.n	8007eb8 <ff_convert+0x30>
 8007eac:	88fb      	ldrh	r3, [r7, #6]
 8007eae:	3b80      	subs	r3, #128	; 0x80
 8007eb0:	4a11      	ldr	r2, [pc, #68]	; (8007ef8 <ff_convert+0x70>)
 8007eb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007eb6:	e000      	b.n	8007eba <ff_convert+0x32>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	81fb      	strh	r3, [r7, #14]
 8007ebc:	e016      	b.n	8007eec <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	81fb      	strh	r3, [r7, #14]
 8007ec2:	e009      	b.n	8007ed8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007ec4:	89fb      	ldrh	r3, [r7, #14]
 8007ec6:	4a0c      	ldr	r2, [pc, #48]	; (8007ef8 <ff_convert+0x70>)
 8007ec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ecc:	88fa      	ldrh	r2, [r7, #6]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d006      	beq.n	8007ee0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007ed2:	89fb      	ldrh	r3, [r7, #14]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	81fb      	strh	r3, [r7, #14]
 8007ed8:	89fb      	ldrh	r3, [r7, #14]
 8007eda:	2b7f      	cmp	r3, #127	; 0x7f
 8007edc:	d9f2      	bls.n	8007ec4 <ff_convert+0x3c>
 8007ede:	e000      	b.n	8007ee2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007ee0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007ee2:	89fb      	ldrh	r3, [r7, #14]
 8007ee4:	3380      	adds	r3, #128	; 0x80
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007eec:	89fb      	ldrh	r3, [r7, #14]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bc80      	pop	{r7}
 8007ef6:	4770      	bx	lr
 8007ef8:	080082a0 	.word	0x080082a0

08007efc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	4603      	mov	r3, r0
 8007f04:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8007f06:	2300      	movs	r3, #0
 8007f08:	60fb      	str	r3, [r7, #12]
 8007f0a:	e002      	b.n	8007f12 <ff_wtoupper+0x16>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	60fb      	str	r3, [r7, #12]
 8007f12:	4a0f      	ldr	r2, [pc, #60]	; (8007f50 <ff_wtoupper+0x54>)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d006      	beq.n	8007f2c <ff_wtoupper+0x30>
 8007f1e:	4a0c      	ldr	r2, [pc, #48]	; (8007f50 <ff_wtoupper+0x54>)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f26:	88fa      	ldrh	r2, [r7, #6]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d1ef      	bne.n	8007f0c <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8007f2c:	4a08      	ldr	r2, [pc, #32]	; (8007f50 <ff_wtoupper+0x54>)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d004      	beq.n	8007f42 <ff_wtoupper+0x46>
 8007f38:	4a06      	ldr	r2, [pc, #24]	; (8007f54 <ff_wtoupper+0x58>)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f40:	e000      	b.n	8007f44 <ff_wtoupper+0x48>
 8007f42:	88fb      	ldrh	r3, [r7, #6]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3714      	adds	r7, #20
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bc80      	pop	{r7}
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	080083a0 	.word	0x080083a0
 8007f54:	08008580 	.word	0x08008580

08007f58 <__libc_init_array>:
 8007f58:	b570      	push	{r4, r5, r6, lr}
 8007f5a:	2600      	movs	r6, #0
 8007f5c:	4d0c      	ldr	r5, [pc, #48]	; (8007f90 <__libc_init_array+0x38>)
 8007f5e:	4c0d      	ldr	r4, [pc, #52]	; (8007f94 <__libc_init_array+0x3c>)
 8007f60:	1b64      	subs	r4, r4, r5
 8007f62:	10a4      	asrs	r4, r4, #2
 8007f64:	42a6      	cmp	r6, r4
 8007f66:	d109      	bne.n	8007f7c <__libc_init_array+0x24>
 8007f68:	f000 f822 	bl	8007fb0 <_init>
 8007f6c:	2600      	movs	r6, #0
 8007f6e:	4d0a      	ldr	r5, [pc, #40]	; (8007f98 <__libc_init_array+0x40>)
 8007f70:	4c0a      	ldr	r4, [pc, #40]	; (8007f9c <__libc_init_array+0x44>)
 8007f72:	1b64      	subs	r4, r4, r5
 8007f74:	10a4      	asrs	r4, r4, #2
 8007f76:	42a6      	cmp	r6, r4
 8007f78:	d105      	bne.n	8007f86 <__libc_init_array+0x2e>
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}
 8007f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f80:	4798      	blx	r3
 8007f82:	3601      	adds	r6, #1
 8007f84:	e7ee      	b.n	8007f64 <__libc_init_array+0xc>
 8007f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f8a:	4798      	blx	r3
 8007f8c:	3601      	adds	r6, #1
 8007f8e:	e7f2      	b.n	8007f76 <__libc_init_array+0x1e>
 8007f90:	08008760 	.word	0x08008760
 8007f94:	08008760 	.word	0x08008760
 8007f98:	08008760 	.word	0x08008760
 8007f9c:	08008764 	.word	0x08008764

08007fa0 <memset>:
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	4402      	add	r2, r0
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d100      	bne.n	8007faa <memset+0xa>
 8007fa8:	4770      	bx	lr
 8007faa:	f803 1b01 	strb.w	r1, [r3], #1
 8007fae:	e7f9      	b.n	8007fa4 <memset+0x4>

08007fb0 <_init>:
 8007fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb2:	bf00      	nop
 8007fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb6:	bc08      	pop	{r3}
 8007fb8:	469e      	mov	lr, r3
 8007fba:	4770      	bx	lr

08007fbc <_fini>:
 8007fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fbe:	bf00      	nop
 8007fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fc2:	bc08      	pop	{r3}
 8007fc4:	469e      	mov	lr, r3
 8007fc6:	4770      	bx	lr
